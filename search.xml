<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>update project</title>
      <link href="/2021/12/23/git%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E8%87%B3github/"/>
      <url>/2021/12/23/git%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E8%87%B3github/</url>
      
        <content type="html"><![CDATA[<h3 id="一、打开终端"><a href="#一、打开终端" class="headerlink" title="一、打开终端"></a>一、打开终端</h3><ul><li>cd 直接将项目文件夹拖进来；</li></ul><h3 id="二、输入"><a href="#二、输入" class="headerlink" title="二、输入"></a>二、输入</h3><ol><li><p>cd 直接将项目文件夹拖进来；</p></li><li><p>git init</p></li><li><p>git config –global user.name “你的账户名”</p></li><li><p>git config –global user.email “你的账户邮箱”</p></li><li><p>git add 直接将项目文件夹拖进来</p></li><li><p>git commit -m “对项目文件进行注释”</p><blockquote><p>这时候点击回车键，会生成一些描述，就是将项目中的各种文件都进行了创建，并创建相关的描述文件，我们可以对README.md文件进行编辑（下面会提到在哪里进行项目说明）</p></blockquote></li><li><p>git remote add origin <a href="https://url/">https://URL</a></p><blockquote><p>这时候如果中断中提示：fatal: remote origin already exists.，已经存在了，不用管，执行下一步</p></blockquote></li><li><p>git push -u origin maste</p></li></ol><p>原文链接：<a href="https://blog.csdn.net/m0_37625794/article/details/73549997">https://blog.csdn.net/m0_37625794/article/details/73549997</a></p>]]></content>
      
      
      <categories>
          
          <category> project-manage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networks (chapter 6)</title>
      <link href="/2021/12/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%85%AD%E7%AB%A0/"/>
      <url>/2021/12/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networks (chapter 5)</title>
      <link href="/2021/12/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
      <url>/2021/12/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-运输层"><a href="#第四章-运输层" class="headerlink" title="第四章 运输层"></a>第四章 运输层</h2><h3 id="5-1-1-进程之间的通信"><a href="#5-1-1-进程之间的通信" class="headerlink" title="5.1.1 进程之间的通信"></a>5.1.1 进程之间的通信</h3><ul><li><p>从通信和信息处理的角度看，<code>运输层向它上面的应用层提供通信服务</code>，它属于面向通信部分的最高层，同时也是用户功能中的最低层。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220144559062.png" alt="image-20211220144559062"></p></li><li><p>运输层为应用进程之间提供<code>端到端的逻辑通信</code>，即，向高层用户<code>屏蔽通信子网的细节</code>（如网络拓扑、路由选择协议等），提供通用的传输接口，使应用进程看见的就是好像在两个运输层实体之间有一条端到端的逻辑通信信道。</p></li><li><p>运输层对信息流具有调节作用，提供可靠性传输，确保数据到达无误。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220144728995.png" alt="协议的作用范围"></p></li><li><table><thead><tr><th align="center">各层的逻辑通信</th><th align="center">通信</th><th align="center">寻址</th></tr></thead><tbody><tr><td align="center">数据链路层</td><td align="center"><code>点-点</code>通信，主机→链路/连接设备→主机</td><td align="center">源MAC地址——目的MAC地址</td></tr><tr><td align="center">网络层</td><td align="center"><code>点-点</code>通信，主机/路由器→网络→主机/路由器</td><td align="center">源IP地址——目的IP地址</td></tr><tr><td align="center">运输层</td><td align="center"><code>端-端</code>通信，主机→主机</td><td align="center">源端口——目的端口</td></tr></tbody></table></li></ul><h3 id="5-1-2-运输层的两个主要协议"><a href="#5-1-2-运输层的两个主要协议" class="headerlink" title="5.1.2 运输层的两个主要协议"></a>5.1.2 运输层的两个主要协议</h3><h4 id="1-用户数据报协议-UDP"><a href="#1-用户数据报协议-UDP" class="headerlink" title="1).用户数据报协议 UDP"></a>1).用户数据报协议 UDP</h4><ul><li>UDP 提供<code>无连接的不可靠的服务</code>。在传送数据之前不需要先建立连接。对方的运输层在收到 UDP 报文后，不需要给出任何确认。</li><li>UDP 传送的数据单位协议是 <code>UDP 报文或用户数据报</code>。</li><li>对方的运输层在收到UDP报文后，不需要给出任何确认。</li></ul><h4 id="2-传输控制协议-TCP"><a href="#2-传输控制协议-TCP" class="headerlink" title="2).传输控制协议 TCP"></a>2).传输控制协议 TCP</h4><ul><li>TCP提供<code>面向连接的可靠服务</code>。在传送数据之前需要先建立连接，且要保证可靠通信，因此不可避免地<code>增加了许多的开销</code>。</li><li><code>TCP不提供广播或多播服务</code>。</li><li>TCP 传送的数据单位协议是 <code>TCP 报文段</code>。</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220145619534.png" alt="image-20211220145619534"></p><h4 id="2-两个协议的相同点"><a href="#2-两个协议的相同点" class="headerlink" title="2).两个协议的相同点"></a>2).两个协议的相同点</h4><ul><li>UDP和TCP都使用<code>IP协议</code>。</li><li>两个对等运输实体在通信时传送的数据单位叫作<code>运输协议数据单元 TPDU</code> 。</li></ul><h3 id="5-1-3-运输层的端口"><a href="#5-1-3-运输层的端口" class="headerlink" title="5.1.3 运输层的端口"></a>5.1.3 运输层的端口</h3><ul><li>运行在计算机中的进程是用<code>进程标识符</code>来标志的。</li><li>为了使运行不同操作系统的计算机的应用进程能够互相通信，就必须用<code>统一的方法</code>对 TCP/IP 体系的<code>应用进程进行标志</code>。</li><li>解决这个问题的方法就是在运输层使用协议端口号(protocolport number)，或通常简称为<code>端口(port)</code>。</li><li>端口就是<code>运输层服务访问点 TSAP</code>，其作用就是让应用层的各种应用进程都能将其数据通过端口向下交付给运输层，以及让运输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程</li><li>简言之，<code>端口就是用来标志应用层的进程（即应用进程）</code>。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220151634608.png" alt="端口在进程之间的通信中所起的作用"></li></ul><h4 id="1-软件端口与硬件端口"><a href="#1-软件端口与硬件端口" class="headerlink" title="1).软件端口与硬件端口"></a>1).软件端口与硬件端口</h4><ol><li>软件端口（逻辑端口）<ul><li>软件端口（逻辑端口）是在协议栈层间的抽象的协议端口；</li><li>软件端口是应用层的各种协议进程与运输实体进行层间交互的一种地址。</li></ul></li><li>硬件端口(物理端口)<ul><li>硬件端口(物理端口)是路由器或交换机上的端口；</li><li>硬件端口是不同硬件设备进行交互的接口。</li></ul></li></ol><h4 id="2-TCP-IP运输层端口"><a href="#2-TCP-IP运输层端口" class="headerlink" title="2).TCP/IP运输层端口"></a>2).TCP/IP运输层端口</h4><ol><li>端口用一个16位端口号进行标志。</li><li>端口号只<code>具有本地意义</code>即端口号只是为了标志本计算机应用层中的各进程。</li><li>在互联网中， 不同计算机的相同端口号是没有联系的。</li></ol><blockquote><p>由此可见，两个计算机中的进程要互相通信，不仅必须知道对方的IP地址（为了找到对方的计算机），而且还要知道对方的端口号（为了找到对方计算机中的应用进程）。</p></blockquote><h4 id="3-TCP-IP运输层端口类型"><a href="#3-TCP-IP运输层端口类型" class="headerlink" title="3). TCP/IP运输层端口类型"></a>3). TCP/IP运输层端口类型</h4><ol><li>服务器端使用的端口号<ul><li>熟知端口号：数值一般为 0~1023。</li><li>登记端口号：数值为1024~49151，为没有熟知端口号的应用程序使用的。</li><li>任何TCP/IP实现所提供的服务程序与应用程序使用的端口号由IANA（Internet Assigned Numbers Authority，Internet号码分配机构）分配管理。</li><li>常用的TCP端口号：<code>HTTP 80</code>，FTP 20/21，Telnet 23，SMTP 25， DNS 53， POP3 110 等；</li><li>常用的UDP端口号：DNS 53，TFTP 69，SNMP 161等。</li></ul></li><li>客户端使用的端口号<ul><li>称为客户端口号、动态端口或<code>短暂端口号</code>数值为49152~65535，留给客户进程选择暂时使用。</li><li>当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，释放这个端口号，可供其他客户进程以后使用。</li><li>在“登记端口号1024~49151”没有 被服务器资源占用的时候，也可以由用户端动态地选为源端口（客户端口）</li></ul></li></ol><h3 id="5-2-用户数据报协议-UDP"><a href="#5-2-用户数据报协议-UDP" class="headerlink" title="5.2 用户数据报协议 UDP"></a>5.2 用户数据报协议 UDP</h3><h4 id="1-UDP-概述"><a href="#1-UDP-概述" class="headerlink" title="1).UDP 概述"></a>1).UDP 概述</h4><ul><li>UDP 提供了IP层没有提供的两个服务。它<code>提供了端口号</code>来帮助辨别不同的用户请求，以及（可选的）验证数据完整达到，未经修改的<code>检测功能</code>。（复用和分用的功能、差错检测的功能）</li><li>UDP<code>不提供将消息分割成包</code>的（数据报），并在另一端重新组装的功能。</li><li>用户数据报协议不<code>提供数据到达的包的顺序</code>。这就意味着使用用户数据报协议的<code>应用程序</code>必须能够确保全部的消息都能够到达，并是按正确的顺序。</li></ul><h4 id="2-UDP-的主要特点"><a href="#2-UDP-的主要特点" class="headerlink" title="2).UDP 的主要特点"></a>2).UDP 的主要特点</h4><ul><li>以实现效率为首要目标，具有良好的实时性</li><li>UDP 是<code>无连接的</code>，即发送数据之前不需要建立连接。</li><li>UDP 使用<code>尽最大努力交付</code>，即不保证可靠交付</li><li><code>可能出现分组的丢失、重复、错序</code>。<code>应用程序</code>需要负责传输可靠性方面的所有工作。</li><li><code>UDP 是面向报文的</code>。UDP对应用层交下来的报文,<code>既不合并，也不拆分</code>，而是保留这些报文的边界。UDP<code>一次交付一个完整的报文</code>，所以应用程序必须选择合适大小的报文。</li><li>UDP <code>没有拥塞控制</code>，很适合多媒体通信的要求。</li><li>UDP 支持一对一、一对多、多对一和多对多的交互通信。</li><li>UDP 的<code>首部开销小</code>，只有 <code>8 个字节</code>。</li></ul><h4 id="3-UDP-的首部格式"><a href="#3-UDP-的首部格式" class="headerlink" title="3).UDP 的首部格式"></a>3).UDP 的首部格式</h4><ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220152133725.png" alt="UDP 的首部格式"></li></ul><ol><li><h5 id="计算检验和"><a href="#计算检验和" class="headerlink" title="计算检验和"></a>计算检验和</h5><p>在计算检验和时，临时把“伪首部”和UDP用户数据报连接在一起。<code>伪首部仅仅是为了计算检验和</code>。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220152548392.png" alt="计算检验和"></p></li><li><h5 id="UDP基本工作过程"><a href="#UDP基本工作过程" class="headerlink" title="UDP基本工作过程"></a>UDP基本工作过程</h5><ul><li>（1）数据报发送<ol><li>UDP 软件将用户数据封装在 UDP 数据报中；</li><li>转交给 IP 软件，进行 IP 封装和转发。</li></ol></li><li>（2）数据报的接收<ol><li>IP 层接收到 UDP 数据报， 提交给 UDP 软件的各端口；</li><li>端口判断该报文的目的端口号是否与当前端口匹配；</li><li>若匹配成功，将该数据报保存到相应端口的接收队列中（若队列已满，则丢弃该数据报）。</li><li>若未匹配，则丢弃该数据报，同时向源端发送 “端口不可达” 的 ICMP 包。</li></ol></li></ul></li><li><h5 id="UDP应用"><a href="#UDP应用" class="headerlink" title="UDP应用"></a>UDP应用</h5><ul><li>UDP协议适用于对<code>效率要求相对高，对准确性要求相对低</code>的场景。</li><li>例如：<ul><li>查询操作、网络管理</li><li>即时通信、聊天工具，如QQ</li><li>IP phone、在线视频/电话会议</li><li>在屏幕上报告股票市场、在屏幕上显示航空信息</li><li>下载工具（如迅雷、某些P2P下载）等等</li></ul></li></ul></li></ol><h3 id="5-3-传输控制协议-TCP"><a href="#5-3-传输控制协议-TCP" class="headerlink" title="5.3 传输控制协议 TCP"></a>5.3 传输控制协议 TCP</h3><h4 id="1-TCP-的主要特点"><a href="#1-TCP-的主要特点" class="headerlink" title="1). TCP 的主要特点"></a>1). TCP 的主要特点</h4><ul><li>TCP 是<code>面向连接</code>的运输层协议。TCP连接是一条<code>虚连接</code>而不是一条真正的物理连接。</li><li>每一条 TCP 连接<code>只能有两个端点</code>(endpoint)，每一条 TCP连接只能是<code>点对点</code>的（一对一）。</li><li><code>TCP 可把太长的数据块划分短一些再传送</code>。TCP <code>也可等待积累有足够多的字节后再构成报文段发送出去</code>。</li><li>TCP 提供可靠交付的服务。</li><li><code>提供包丢失重发机制、流量控制、拥塞控制</code></li><li>TCP 提供<code>全双工</code>通信。</li><li><code>面向字节流</code>。</li><li><code>不支持组播和广播</code></li></ul><h4 id="2-面向字节流"><a href="#2-面向字节流" class="headerlink" title="2). 面向字节流"></a>2). 面向字节流</h4><ul><li><p>TCP中的“流”(stream)指的是流入或流出进程的字节序列。</p></li><li><p>“面向字节流”的含义是：虽然应用程序和TCP的交互是一次一个数据块，但TCP把应用程序交下来的数据看成仅仅是一连串无结构的字节流。</p></li><li><p>TCP不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系。但<code>接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样</code>。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220154622153.png" alt="面向字节流"></p></li></ul><h4 id="3-TCP-的连接"><a href="#3-TCP-的连接" class="headerlink" title="3). TCP 的连接"></a>3). TCP 的连接</h4><ul><li>TCP 把连接作为最基本的抽象。</li><li>每一条 TCP 连接有<code>两个端点</code>。</li><li>TCP 连接的端点不是主机，不是主机的IP 地址，不是应用进程，也不是运输层的协议端口。</li><li>TCP 连接的端点叫做<code>套接字</code>(socket)或插口。<code>端口号拼接到</code>(contatenated with) <code>IP 地址</code>即构成了套接字。</li></ul><p>套接字</p><ul><li><p>套接字由IP地址和端口号组成</p><blockquote><p>套接字 = (IP地址: 端口号)</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220155350892.png" alt="套接字"></p></blockquote></li><li><p>每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）所确定。即：</p><blockquote><p>TCP 连接 ::= {socket1, socket2}= { (IP1: port1)，(IP2: port2) }</p></blockquote></li></ul><h3 id="5-4-1-停止等待协议"><a href="#5-4-1-停止等待协议" class="headerlink" title="5.4.1 停止等待协议"></a>5.4.1 停止等待协议</h3><ul><li>“停止等待”就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</li></ul><h4 id="1-简单停止等待协议的工作过程"><a href="#1-简单停止等待协议的工作过程" class="headerlink" title="1). 简单停止等待协议的工作过程"></a>1). 简单停止等待协议的工作过程</h4><ol><li><h5 id="正常过程（无差错情况）"><a href="#正常过程（无差错情况）" class="headerlink" title="正常过程（无差错情况）"></a>正常过程（无差错情况）</h5><ul><li><p>发送方每发送一个报文就停止发送，等待接收方的确认报文；</p></li><li><p>接收方每收到一个正确的报文就向发送一个确认报文；</p></li><li><p>发送方每收到一个确认报文就继续发送下一个报文。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220155845541.png" alt="无差错情况"></p></li></ul></li><li><h5 id="异常过程（报文丢失或报文有差错）"><a href="#异常过程（报文丢失或报文有差错）" class="headerlink" title="异常过程（报文丢失或报文有差错）"></a>异常过程（报文丢失或报文有差错）</h5><ul><li><p>发送的报文在传输过程中丢失，或出现差错，接收方不会发送确认报文；</p></li><li><p>发送方每发送一个报文，启动超时计时器，超过时间重传报文——<code>超时重传</code>。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220160018573.png" alt="报文丢失或报文有差错"></p></li></ul></li><li><h5 id="异常过程（确认丢失）"><a href="#异常过程（确认丢失）" class="headerlink" title="异常过程（确认丢失）"></a>异常过程（确认丢失）</h5><ul><li><p>接收方发送的确认报文在传输过程中丢失；</p></li><li><p>发送方收不到确认报文——<code>超时重传</code>。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220160114587.png" alt="确认丢失"></p></li></ul></li><li><h5 id="异常过程（确认迟到）"><a href="#异常过程（确认迟到）" class="headerlink" title="异常过程（确认迟到）"></a>异常过程（确认迟到）</h5><ul><li><p>接收方发送的确认报文在计时器超时前没有到达发送方；</p></li><li><p>发送方收不到确认报文——超时重传。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220160207182.png" alt="确认迟到"></p></li></ul></li></ol><h4 id="2-采用停止等待协议的信道利用率"><a href="#2-采用停止等待协议的信道利用率" class="headerlink" title="2). 采用停止等待协议的信道利用率"></a>2). 采用停止等待协议的信道利用率</h4><ul><li>停止等待协议的优点是简单，但缺点是信道利用率太低</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220201910112.png" alt="采用停止等待协议的信道利用率"></li></ul><h4 id="3-流水线传输"><a href="#3-流水线传输" class="headerlink" title="3). 流水线传输"></a>3). 流水线传输</h4><ul><li><p>发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。</p></li><li><p>由于信道上一直有数据不间断地传送，这种传输方式可获得很高的信道利用率。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220202007016.png" alt="流水线传输"></p></li></ul><h3 id="5-4-2-连续-ARQ-协议"><a href="#5-4-2-连续-ARQ-协议" class="headerlink" title="5.4.2 连续 ARQ 协议"></a>5.4.2 连续 ARQ 协议</h3><h4 id="1-连续-ARQ-协议的基本方法"><a href="#1-连续-ARQ-协议的基本方法" class="headerlink" title="1).连续 ARQ 协议的基本方法"></a>1).连续 ARQ 协议的基本方法</h4><ul><li>在简单停止等待协议的基础上，允许连续发送若干报文，在收到相应ACK后继续发送若干报文，用以提高传输效率。</li><li>在发生差错时丢弃原已发送的所有后续报文，重发差错发生以后的所有报文，相当于完全返回重传。</li></ul><h4 id="2-累积确认与捎带确认"><a href="#2-累积确认与捎带确认" class="headerlink" title="2).累积确认与捎带确认"></a>2).累积确认与捎带确认</h4><ul><li><p>接收方一般采用<strong>累积确认</strong>的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，这样就表示：<code>到这个分组为止的所有分组都已正确收到了</code>。</p><ol><li>优点：容易实现，即使确认丢失也不必重传。</li><li>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li></ol></li><li><p><strong>捎带确认</strong>：确认信息被附在往外发送的报文中。如，B在收到A发来数据的同时也有数据向A发送，则可将对A的确认信息与向A发的数据合在一个报文中发送</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220202253390.png" alt="累积确认与捎带确认"></p></li></ul><h4 id="3-Go-back-N（回退-N）"><a href="#3-Go-back-N（回退-N）" class="headerlink" title="3).Go-back-N（回退 N）"></a>3).Go-back-N（回退 N）</h4><ul><li>如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。</li><li>这就叫做 Go-back-N（回退 N），<code>表示需要再退回来重传已发送过的 N 个分组</code>。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220202330282.png" alt="回退N帧"></li></ul><h4 id="4-TCP-可靠通信的具体实现"><a href="#4-TCP-可靠通信的具体实现" class="headerlink" title="4).TCP 可靠通信的具体实现"></a>4).TCP 可靠通信的具体实现</h4><ul><li>TCP 连接的每一端都必须设有两个窗口——一个<code>发送窗口</code>和一个<code>接收窗口</code>。（见后面的<code>滑动窗口协议</code>）</li><li>TCP 的可靠传输机制用<code>字节的序号</code>进行控制。TCP 所有的确认都是<code>基于序号</code>而不是基于报文段。</li><li>TCP 两端的四个窗口经常处于<code>动态变化</code>之中。</li><li>TCP连接的往返时间 RTT 也<code>不是固定不变的</code>。需要使用特定的算法<code>估算较为合理的重传时间</code>。</li></ul><h3 id="5-5-TCP-报文段的首部格式"><a href="#5-5-TCP-报文段的首部格式" class="headerlink" title="5.5 TCP 报文段的首部格式"></a>5.5 TCP 报文段的首部格式</h3><ul><li><p>TCP虽然是面向字节流的，但TCP传送的数据，单元却是报文段。</p></li><li><p>一个TCP报文段分为首部和数据两部分，而TCP的全部功能都体现在它首部中各字段的作用。</p></li><li><p>TCP报文段首部的前20个字节是固定的，后面有4n字节是根据需要而增加的选项(n是整数)。因此<code>TCP首部的最小长度是20字节</code>。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220203318253.png" alt="TCP 报文段的首部格式"></p></li></ul><ol><li><p><strong>源端口和目的端口字段（第1-2，3-4个字节）</strong>——各占 2 字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。</p></li><li><p><strong>序号字段</strong>——占 4 字节（第5-8个字节），取值0~2<SUP>32</SUP>-1。TCP 连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值指的是本报文段所发送的数据的第一个字节的序号。</p></li><li><p><strong>确认号字段</strong>——占 4 字节（第9-12个字节），取值0 ~ 232-1。指明期望收到对方下一个TCP报文段中第一个数据的字节序号。也表明了该序号前面的字节已经被全部正确接收</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220203440009.png" alt="序号与确认号的使用示例"></p></li><li><p><strong>数据偏移（即首部长度）</strong>——占4位，最大值1111（即十进制的15）。它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远。“数据偏移”的单位是 32 位的字（即以 4 字节为计算单位）。</p><blockquote><p>例如，数据偏移字段的值为1000（即十进制的8），则表明数据起始处距离报文段的起始处距离<code>8×4=32 个字节</code>，<code>即首部长度为32个字节</code>，其中固定部分20B，“选项与填充”部分12B。同理，若首部长度20B，则在数据偏移字段应填入数据0101（即十进制的5）</p></blockquote></li><li><p><strong>填充字段</strong>——是为了使整个首部长度是 4 字节的整数倍。</p></li><li><p><strong>保留字段</strong>——占 6 位，保留为今后使用，但目前应置为 0。</p></li><li><p><strong>紧急URG</strong>——当 URG=1 时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。</p></li><li><p><strong>确认 ACK</strong> —— <code>只有当 ACK=1 时确认号字段才有效。当ACK=0 时，确认号无效</code>。</p></li><li><p><strong>推送 PSH (PuSH)</strong> —— 接收 TCP 收到 PSH = 1 的报文段，就<code>尽快地交付接收应用进程，而不再等到整个缓存都填满</code>了后再向上交付。</p></li><li><p><strong>复位 RST (ReSeT)</strong> —— 当 RST=1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。</p></li><li><p><strong>同步 SYN</strong> —— 同步 SYN = 1 表示这是一个<code>连接请求或连接接受</code>报文。<code>若SYN=1,ACK=0，则表示是一个连接请求报文；若SYN=1,ACK=1，则表示是一个连接接受报文</code>。</p></li><li><p><strong>终止 FIN (FINal)</strong> —— 用来释放一个连接。<code>FIN=1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接</code>。</p></li><li><p><strong>窗口字段</strong> —— 占 2 字节，用来让对方设置发送窗口的依据，单位为字节，取值0 ~ 65535。</p></li><li><p><strong>检验和</strong> —— 占 2 字节。检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，要在TCP 报文段的前面加上12 字节的伪首部。计算方法同UDP</p></li><li><p><strong>紧急指针字段</strong>—占16 位，指出在<code>本报文段中紧急数据共有多少个字节</code>（紧急数据放在本报文段数据的最前面）</p></li><li><p><strong>选项字段</strong>——</p><ul><li><strong>MSS (Maximum Segment Size)</strong> ——指明<code>TCP 报文段中的数据字段的最大长度。数据字段加上 TCP 首部才等于整个的 TCP 报文段</code>。</li><li><strong>窗口扩大选项</strong> ——占 3 字节，其中有一个字节表示移位值 S。新的窗口值等于TCP 首部中的窗口位数增大到(16S)，相当于把窗口值向左移动 S 位后获得实际的窗口大小。</li><li><strong>时间戳选项</strong>——占10 字节，其中最主要的字段时间戳值字段（4 字节）和时间戳回送回答字段（4 字节）。选择确认选项——该选项参数告诉对方已经接收到并缓存的不连续的数据块边界。</li></ul></li></ol><h3 id="5-6-1-以字节为单位的滑动窗口"><a href="#5-6-1-以字节为单位的滑动窗口" class="headerlink" title="5.6.1 以字节为单位的滑动窗口"></a>5.6.1 以字节为单位的滑动窗口</h3><ul><li>TCP的窗口以字节为单位进行设置</li><li>发送方设置一个发送窗口，接收方设置一个接收窗口<ul><li><strong>发送窗口</strong>：发送方维持的一个允许连续发送的字节的序号。发送窗口的大小就是最多允许连续发送的字节数量。</li><li><strong>接收窗口</strong>：接收方维持的一个连续的允许接收的字节的序号。接收窗口的大小就是最多允许连续接收的字节数量。</li></ul></li><li>由于TCP工作在全双工方式，所以一个TCP连接的两端都需设置一个发送窗口和一个接收窗口。</li></ul><h4 id="1-TCP的滑动窗口"><a href="#1-TCP的滑动窗口" class="headerlink" title="1).TCP的滑动窗口"></a>1).TCP的滑动窗口</h4><ol><li><h5 id="发送窗口"><a href="#发送窗口" class="headerlink" title="发送窗口"></a>发送窗口</h5><ul><li>发送窗口内的序号代表了“那些已经被发送，但是还没有被确认的字节”，或者是“那些可以被发送的字节序号”</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220214026847.png" alt="窗口的移动"></li></ul></li><li><h5 id="接收窗口"><a href="#接收窗口" class="headerlink" title="接收窗口"></a>接收窗口</h5><ul><li>接收窗口内的序号代表了“那些已经收到，但是还没有发回确认的字节（还没有提交给应用进程）”，或者是“那些可以接收的字节序号” 。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220214113597.png" alt="窗口的移动"></li><li>当数据到达后，接收方需发送确认报文，并利用<code>首部中的窗口字段</code>向发送方通知自己剩余的接收窗口大小（字节数），这种指出窗口大小的通知称为<code>窗口通告</code>。</li><li>接收方在发送的每一确认中都含有一个窗口通告。</li><li>发送方根据接收方发来的窗口通知调整自己发送窗口的大小</li></ul></li></ol><h4 id="2-滑动窗口的工作过程（以A向B发送数据为例）"><a href="#2-滑动窗口的工作过程（以A向B发送数据为例）" class="headerlink" title="2).滑动窗口的工作过程（以A向B发送数据为例）"></a>2).滑动窗口的工作过程（以A向B发送数据为例）</h4><ul><li><p><strong>T1时刻</strong>：根据 B 给出的窗口值（窗口通告，TCP首部中的窗口字段），A 构造出自己的发送窗口：</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215146057.png" alt="T1时刻"></p></li><li><p><strong>T2时刻</strong>： A 发送了31-41这 11 个字节的数据</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215226285.png" alt="T2时刻"></p><blockquote><ul><li>P3 – P1 = A 的发送窗口（又称为通知窗口）</li><li>P2 – P1 = 已发送但尚未收到确认的字节数</li><li>P3 – P2 = 允许发送但尚未发送的字节数（又称为可用窗口）</li></ul></blockquote></li><li><p><strong>T3时刻</strong>： B收到了31-36字节（除了32、33字节）的数据此时如果发确认报文，B只能确定31字节，其余的先存下，等待缺少的数据的到达</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215341936.png" alt="T3时刻"></p></li><li><p><strong>T4时刻</strong>： B收到了32、33、37-39字节，并向A发送了对31-33字节的确认，接收窗口向前滑动</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215410946.png" alt="T4时刻"></p></li><li><p><strong>T5时刻</strong>： A 收到新的确认号（确认33及以前的字节号），发送窗口向前滑动</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215450216.png" alt="T5时刻"></p></li><li><p><strong>T6时刻</strong>： A 的发送窗口内的序号都已用完，但还没有再收到确认，必须停止发送</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215525163.png" alt="T6时刻"></p></li></ul><h4 id="3-发送缓存与接受缓存"><a href="#3-发送缓存与接受缓存" class="headerlink" title="3).发送缓存与接受缓存"></a>3).发送缓存与接受缓存</h4><ol><li><h5 id="发送缓存"><a href="#发送缓存" class="headerlink" title="发送缓存"></a>发送缓存</h5><ul><li>发送缓存用来暂时存放：<ul><li>发送应用程序传送给发送方 TCP 准备发送的数据</li><li>TCP 已发送出但尚未收到确认的数据</li></ul></li><li>缓存空间和字节序号空间都是有限的，且都是循环使用的</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215808502.png" alt="发送缓存与发送窗口"></p></li><li><h5 id="接收缓存"><a href="#接收缓存" class="headerlink" title="接收缓存"></a>接收缓存</h5><ul><li>接收缓存用来暂时存放：<ul><li>按序到达的、但尚未被接收应用程序读取的数据</li><li>不按序到达的数据</li></ul></li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220215935330.png" alt="接收缓存"></p></li><li><h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h5><ol><li>A 的发送窗口并<code>不总是</code>和 B 的接收窗口一样大（因为有一定的<code>时间滞后</code>）。</li><li><code>TCP 标准没有规定对不按序到达的数据应如何处理</code>。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</li><li>TCP 要求接收方必须有<code>累积确认</code>的功能，这样可以减小传输开销。</li></ol></li></ol><h3 id="5-6-1-超时重传时间的选择"><a href="#5-6-1-超时重传时间的选择" class="headerlink" title="5.6.1 超时重传时间的选择"></a>5.6.1 超时重传时间的选择</h3><h4 id="1-重传机制是-TCP-中最重要和最复杂的问题之一"><a href="#1-重传机制是-TCP-中最重要和最复杂的问题之一" class="headerlink" title="1).重传机制是 TCP 中最重要和最复杂的问题之一"></a>1).重传机制是 TCP 中最重要和最复杂的问题之一</h4><ul><li>TCP 每发送一个报文段，就对这个报文段设置一次计时器。</li><li>只要计时器设置的重传时间到但还没有收到确认，就要重传这一报文段，直至发送成功为止。</li></ul><h4 id="2-往返时延的自适应算法——加权平均往返时间"><a href="#2-往返时延的自适应算法——加权平均往返时间" class="headerlink" title="2).往返时延的自适应算法——加权平均往返时间"></a>2).往返时延的自适应算法——加权平均往返时间</h4><ul><li><p>TCP 保留了 RTT 的一个加权平均往返时间 RTT<sub>s</sub>（这又称为平滑的往返时间）。</p></li><li><p>第一次测量到 RTT 样本时， RTT<sub>s</sub>值就取为所测量到的RTT 样本值。以后每测量到一个新的 RTT 样本，就按下式重新计算一次  RTT<sub>s</sub>：</p><blockquote><p>新的  RTT<sub>s</sub>= (1 -$\alpha$) * (旧的  RTTs) + (新的 RTT 样本)</p><ul><li>式中，0$\le\alpha$ $\lt$1。若 $\alpha$ 很接近于零，表示 RTT 值更新较慢。若选择 $\alpha$接近于 1，则表示 RTT 值更新较快。</li><li>RFC 2988 推荐的 $\alpha$ 值为 1/8，即 0.125。</li></ul></blockquote></li></ul><h3 id="5-7-TCP-的流量控制"><a href="#5-7-TCP-的流量控制" class="headerlink" title="5.7 TCP 的流量控制"></a>5.7 TCP 的流量控制</h3><h4 id="1-利用滑动窗口实现流量控制"><a href="#1-利用滑动窗口实现流量控制" class="headerlink" title="1).利用滑动窗口实现流量控制"></a>1).利用滑动窗口实现流量控制</h4><ul><li><p>一般说来，我们总是希望数据传输得更快一些。但如果发送方把数据发送得过快，接收方就可能来不及接收，这就会造成数据的丢失。</p></li><li><p>流量控制(flow control)就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</p></li><li><p>利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211220233153979.png" alt="流量控制举例"></p></li></ul><h4 id="2-持续计时器-persistence-timer"><a href="#2-持续计时器-persistence-timer" class="headerlink" title="2).持续计时器(persistence timer)"></a>2).持续计时器(persistence timer)</h4><ul><li>TCP 为每一个连接设有一个<code>持续计时器</code>。</li><li>只要 TCP 连接的一方收到对方的<code>零窗口</code>通知，就启动持续计时器。</li><li>若持续计时器设置的<code>时间到期</code>，就发送一个<code>零窗口探测报文段</code>（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。</li><li>若窗口仍然<code>是零</code>，则收到这个报文段的一方就重新设置持续计时器。</li><li>若窗口<code>不是零</code>，则死锁的僵局就可以打破了。</li></ul><h4 id="3-TCP-报文段的发送时机"><a href="#3-TCP-报文段的发送时机" class="headerlink" title="3).TCP 报文段的发送时机"></a>3).TCP 报文段的发送时机</h4><ul><li><strong>第一种机制</strong>是 TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP 报文段发送出去。</li><li><strong>第二种机制</strong>是由发送方的应用进程指明要求发送报文段，即 TCP 支持的推送(push)操作。</li><li><strong>第三种机制</strong>是发送方的一个计时器期限到了，这时就把当<br>前已有的缓存数据装入报文段（但长度不能超过 MSS）发<br>送出去。</li></ul><h3 id="5-8-TCP的拥塞控制"><a href="#5-8-TCP的拥塞控制" class="headerlink" title="5.8 TCP的拥塞控制"></a>5.8 TCP的拥塞控制</h3><h4 id="1-拥塞控制的一般原理"><a href="#1-拥塞控制的一般原理" class="headerlink" title="1).拥塞控制的一般原理"></a>1).拥塞控制的一般原理</h4><ol><li><h5 id="拥塞"><a href="#拥塞" class="headerlink" title="拥塞"></a>拥塞</h5><ul><li><p>拥塞：当到达通信子网中某一部分的分组数量过多，使得该部分网络来不及处理，以致引起这部分乃至整个网络性能下降的现象，这种想象称为拥塞</p></li><li><p>拥塞严重时甚至会导致网络通信业务陷入停顿，即出现死锁现象，</p></li></ul></li><li><h5 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h5><ul><li>拥塞控制：处理网络拥塞现象的一种机制</li><li>拥塞控制不仅是网络稳定、高效运行的关键，同时又是实现各种服务质量的基础和前提。</li></ul></li><li><h5 id="拥塞控制的一般原理"><a href="#拥塞控制的一般原理" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h5><ul><li>在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏——产生<code>拥塞</code>(congestion)。</li><li>出现资源拥塞的条件：<code>对资源需求的总和 &gt; 可用资源</code></li><li>若网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。</li><li>从原理上讲，<code>寻找拥塞控制的方案</code>就是寻找使上述<code>不等式不再成立</code>的条件</li></ul></li><li><h5 id="拥塞控制与流量控制的比较"><a href="#拥塞控制与流量控制的比较" class="headerlink" title="拥塞控制与流量控制的比较"></a>拥塞控制与流量控制的比较</h5><ul><li>流量控制<ul><li>流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</li><li>流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制，主要解决快速发送方与慢速接收方的问题。</li><li>流量控制是局部问题，只涉及两个端系统。</li></ul></li><li>拥塞控制<ul><li>拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</li><li>拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。</li><li>拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。</li></ul></li></ul></li></ol><h4 id="2-慢开始和拥塞避免"><a href="#2-慢开始和拥塞避免" class="headerlink" title="2).慢开始和拥塞避免"></a>2).慢开始和拥塞避免</h4><ol><li><h5 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h5><ul><li><p>发送方维持一个叫做<code>拥塞窗口 cwnd</code> (congestion window)的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。</p></li><li><p>发送方让自己的发送窗口等于拥塞窗口。如再考虑到接收方的接收能力，则发送窗口还可能小于拥塞窗口。</p></li><li><p>发送方控制拥塞窗口的原则：</p><ul><li><code>只要网络没有出现拥塞，拥塞窗口就再增大一些</code>，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。</li></ul></li><li><h6 id="慢开始算法的思路"><a href="#慢开始算法的思路" class="headerlink" title="慢开始算法的思路"></a>慢开始算法的思路</h6><ul><li>在主机刚刚开始发送报文段时可先设置拥塞窗口cwnd = 1，即设置为一个最大报文段 MSS 的数值。</li><li>在每收到一个对新的报文段的确认后，将<code>拥塞窗口加 1</code>，即增加一个 MSS 的数值。</li><li>用这样的方法逐步增大发送端的拥塞窗口 cwnd，可以使分组注入到网络的速率更加合理。</li></ul><blockquote><p><strong>发送方每收到一个对新报文段的确认（重传的不算在内）就使cwnd 加 1，即<code>每经过一个传输轮次，拥塞窗口 cwnd就加倍。</code></strong></p><p>“传输轮次”更加强调：把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。<code>一个传输轮次所经历的时间其实就是往返时间 RTT</code>。</p><ul><li>例如，拥塞窗口 cwnd = 4，这时的往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。</li></ul></blockquote></li></ul></li><li><h5 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h5><ul><li><h6 id="拥塞避免算法的思路："><a href="#拥塞避免算法的思路：" class="headerlink" title="拥塞避免算法的思路："></a>拥塞避免算法的思路：</h6><ul><li>让拥塞窗口 cwnd 缓慢地增大，即每经过一个往返时间RTT 就把发送方的<code>拥塞窗口 cwnd 加 1，而不是加倍</code>，使拥塞窗口 cwnd 按<code>线性</code>规律缓慢增长。</li></ul></li><li><h6 id="慢开始门限-ssthresh-的用法"><a href="#慢开始门限-ssthresh-的用法" class="headerlink" title="慢开始门限 ssthresh 的用法"></a>慢开始门限 ssthresh 的用法</h6><ul><li>当 cwnd &lt; ssthresh 时，使用慢开始算法。</li><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</li></ul></li></ul></li><li><h5 id="网络出现拥塞时的处理方法"><a href="#网络出现拥塞时的处理方法" class="headerlink" title="网络出现拥塞时的处理方法"></a>网络出现拥塞时的处理方法</h5><ul><li><p>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（<code>其根据就是没有按时收到确认</code>），就要如下处理：</p><blockquote><ol><li>把慢开始门限 <code>ssthresh 设置为出现拥塞时的发送方窗口值的一半</code>（但不能小于2）。</li><li>把拥塞窗口 <code>cwnd 重新设置为 1，执行慢开始算法</code>。</li></ol></blockquote></li></ul></li><li><h5 id="慢开始和拥塞避免算法的实现举例"><a href="#慢开始和拥塞避免算法的实现举例" class="headerlink" title="慢开始和拥塞避免算法的实现举例"></a>慢开始和拥塞避免算法的实现举例</h5><ul><li><p>当 TCP 连接进行初始化时，将拥塞窗口置为 1，即</p><ul><li>cwnd=1</li></ul></li><li><p>慢开始门限的初始值设置为 16 个报文段，即</p><ul><li>ssthresh = 16。</li></ul></li><li><p><code>发送端的发送窗口swnd不能超过拥塞窗口 cwnd 和接收端窗口 rwnd 中的最小值</code>，即</p><ul><li><code>swnd=min(rwnd，cwnd)</code></li><li>初始时，swnd=min(rwnd，1)=1</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221000134179.png" alt="慢开始和拥塞避免算法的实现举例"></p></li></ul></li></ol><h4 id="3-快重传和快恢复"><a href="#3-快重传和快恢复" class="headerlink" title="3).快重传和快恢复"></a>3).快重传和快恢复</h4><ol><li><h5 id="快重传"><a href="#快重传" class="headerlink" title="快重传"></a>快重传</h5><ul><li>首先要求接收方每收到一个失序的报文段后就立即发出重复确认。这样做可以让发送方及早知道有报文段没有到达接收方。</li><li>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。</li><li>快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221000326915.png" alt="快重传"></p></li><li><h5 id="快恢复算法"><a href="#快恢复算法" class="headerlink" title="快恢复算法"></a>快恢复算法</h5><ul><li>当发送端收到<code>连续三个重复的确认</code>时，就执行“乘法减小”算法，把<code>慢开始门限 ssthresh 减半</code>。但接下去不执行慢开始算法。</li><li>由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，即拥塞窗口 cwnd 现在不设置为 1，而是<code>设置为慢开始门限 ssthresh 减半后的数值</code>，然后开始执行拥塞避免算法（“<code>加法增大</code>”），使拥塞窗口缓慢地线性增大。</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221001820669.png" alt="快恢复算法"></p></li></ol><h3 id="5-9-1-TCP-的连接建立"><a href="#5-9-1-TCP-的连接建立" class="headerlink" title="5.9.1 TCP 的连接建立"></a>5.9.1 TCP 的连接建立</h3><h4 id="1-运输连接的三个阶段"><a href="#1-运输连接的三个阶段" class="headerlink" title="1).运输连接的三个阶段"></a>1).运输连接的三个阶段</h4><ul><li>运输连接有三个阶段，即：连接建立、数据传送和连接释放。运输连接的管理就是使运输连接的建立和释放都能正常地进行。</li><li>TCP 连接的建立都是采用客户服务器方式<ul><li>主动发起连接建立的应用进程叫做客户；</li><li>被动等待连接建立的应用进程叫做服务器；</li></ul></li></ul><ol><li><h5 id="用三次握手建立-TCP-连接——第一次："><a href="#用三次握手建立-TCP-连接——第一次：" class="headerlink" title="用三次握手建立 TCP 连接——第一次："></a>用三次握手建立 TCP 连接——第一次：</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221002407759.png" alt="第一次握手"></p></li><li><h5 id="用三次握手建立-TCP-连接——第二次："><a href="#用三次握手建立-TCP-连接——第二次：" class="headerlink" title="用三次握手建立 TCP 连接——第二次："></a>用三次握手建立 TCP 连接——第二次：</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221002440657.png" alt="第二次握手"></p></li><li><h5 id="用三次握手建立-TCP-连接——第三次："><a href="#用三次握手建立-TCP-连接——第三次：" class="headerlink" title="用三次握手建立 TCP 连接——第三次："></a>用三次握手建立 TCP 连接——第三次：</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221002536184.png" alt="第三次握手"></p></li></ol><h3 id="5-9-2-TCP的连接释放"><a href="#5-9-2-TCP的连接释放" class="headerlink" title="5.9.2 TCP的连接释放"></a>5.9.2 TCP的连接释放</h3><h4 id="1-客户发起，释放连接"><a href="#1-客户发起，释放连接" class="headerlink" title="1).客户发起，释放连接"></a>1).客户发起，释放连接</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221002949526.png" alt="客户发起，释放连接"></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221003125036.png" alt="服务器确认，释放连接"></p><h4 id="2-服务器发起，释放连接"><a href="#2-服务器发起，释放连接" class="headerlink" title="2).服务器发起，释放连接"></a>2).服务器发起，释放连接</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221003231972.png" alt="服务器发起，释放连接"></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221003245873.png" alt="客户确认，释放连接"></p><h3 id="5-9-3-TCP的有限状态机"><a href="#5-9-3-TCP的有限状态机" class="headerlink" title="5.9.3 TCP的有限状态机"></a>5.9.3 TCP的有限状态机</h3><h4 id="1-TCP的有限状态机"><a href="#1-TCP的有限状态机" class="headerlink" title="1).TCP的有限状态机"></a>1).TCP的有限状态机</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221003430715.png" alt="TCP的有限状态机"></p><h4 id="2-用三次握手建立-TCP-连接的各状态"><a href="#2-用三次握手建立-TCP-连接的各状态" class="headerlink" title="2).用三次握手建立 TCP 连接的各状态"></a>2).用三次握手建立 TCP 连接的各状态</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221003443139.png" alt="用三次握手建立 TCP 连接的各状态"></p><h4 id="3-TCP-连接释放的各状态"><a href="#3-TCP-连接释放的各状态" class="headerlink" title="3).TCP 连接释放的各状态"></a>3).TCP 连接释放的各状态</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211221003456682.png" alt="TCP 连接释放的各状态"></p>]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networks (chapter 4)</title>
      <link href="/2021/12/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
      <url>/2021/12/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h2><h3 id="4-1-1-网络层的几个重要概念"><a href="#4-1-1-网络层的几个重要概念" class="headerlink" title="4.1.1 网络层的几个重要概念"></a>4.1.1 网络层的几个重要概念</h3><h4 id="1-网络层的位置及功能"><a href="#1-网络层的位置及功能" class="headerlink" title="1).网络层的位置及功能"></a>1).网络层的位置及功能</h4><ul><li><p>网络层是OSI参考模型中的第三层，TCP/IP的第二层</p></li><li><p>网络层使用数据链路层的服务，向运输层的“端一端”传输连接提供分组的“点-点”的传送服务</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216205748527.png" alt="网络层的位置及功能"></p></li></ul><p>2).网络层的任务</p><ul><li>网络层的任务是将源计算机发出的信息经过适当的路径送到目的计算机<ul><li>在数据链路层提供的两个相邻端点之间的数据帧的传送功能上，进一步管理网络中的数据通信，将数据设法从源端经过若干个中间节点传送到目的端，从而向运输层提供最基本的端到端的数据传送服务</li></ul></li><li>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。</li><li>数据透明传送：网络层屏蔽各种不同类型网络之间的差异，实现互连</li></ul><h3 id="4-1-2-网络层提供的两种服务"><a href="#4-1-2-网络层提供的两种服务" class="headerlink" title="4.1.2 网络层提供的两种服务"></a>4.1.2 网络层提供的两种服务</h3><h4 id="1-虚电路服务（Virtual-circuit）"><a href="#1-虚电路服务（Virtual-circuit）" class="headerlink" title="1).虚电路服务（Virtual circuit）"></a>1).虚电路服务（Virtual circuit）</h4><ul><li>面向连接的、可靠的数据传输服务。与电路链接类似，<code>占用此条虚电路上的所有资源</code>。</li><li>虚电路——在两个终端设备的逻辑或物理端口之间，通过分组交换网建立的<code>双向、透明传输信道</code>（端点间的<code>逻辑链路</code> ）</li><li>建立虚电路，以保证双方通信所需的一切网络资源。如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点。</li></ul><h4 id="2-数据报服务（Datagram）"><a href="#2-数据报服务（Datagram）" class="headerlink" title="2).数据报服务（Datagram）"></a>2).数据报服务（Datagram）</h4><ul><li><p>无连接的、不可靠的数据传输服务</p></li><li><p>数据报（packet，或称包、分组）——通过网络传输的数据的基本单元，包含一个报头和数据本身，其中报头描述了数据的目的地以及和其它数据之间的关系</p></li><li><p>每个数据报自身携带有足够的信息，它的传送是被单独处<br>理的，网络节点为每个数据报作路由选择。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216211649995.png" alt="虚电路服务与数据报服务的对比"></p></li></ul><h4 id="3-因特网采用的设计思路"><a href="#3-因特网采用的设计思路" class="headerlink" title="3).因特网采用的设计思路 *"></a>3).因特网采用的设计思路 *</h4><ul><li>网络层向上只提供简单灵活的、<code>无连接的</code>、<code>尽最大努力交付</code>（best effort deliver）的数据报服务。<ul><li><strong>无连接</strong>：网络在发送分组时<code>不需要先建立连接</code>。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li><strong>尽最大努力交付</strong>：<code>网络层不提供服务质量的承诺</code>。即所传送的分组可能<strong>出错</strong>、<strong>丢失</strong>、<strong>重复和失序</strong>（不按序到达终点），当然也不保证分组传送的时限。因此，也称“<code>不可靠的交付</code>”(unreliable delivery)</li></ul></li></ul><h4 id="4-数据报方式关键技术"><a href="#4-数据报方式关键技术" class="headerlink" title="4).数据报方式关键技术 *"></a>4).数据报方式关键技术 *</h4><ol><li><strong>寻址</strong>：网络地址将采用统一的编址方法，它可以实现跨互联网络的寻址能力</li><li><strong>路由</strong>：端系统和路由器维护路由表：<code>&lt;目的网络，下一个路由器&gt;</code></li><li><strong>分组生命期</strong>：防止分组占用带宽（站点计数 、时间戳）</li><li><strong>差错控制和流量控制</strong>：允许路由器和接收端限制它们接收数据的速率。</li><li><strong>分段和重组</strong>：<ul><li>透明分段法：某个数据报分出的若干个数据报经过一个路由器重组，分段对于后面的网络完全透明。</li><li>不透明分段法：中间路由器不重组数据报分段，由接收端主机负责重组该数据报。</li></ul></li></ol><h3 id="4-1-3-网络层的两个层面"><a href="#4-1-3-网络层的两个层面" class="headerlink" title="4.1.3 网络层的两个层面"></a>4.1.3 网络层的两个层面</h3><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216211922305.png" alt="网络层的两个层面"></p><h4 id="1-数据层面"><a href="#1-数据层面" class="headerlink" title="1).数据层面"></a>1).数据层面</h4><ul><li>路由器根据本路由器生成的转发表，把收到的分组从查找到的对应接口转发出去。</li><li>独立工作；采用硬件进行转发，快。</li></ul><h4 id="2-控制层面"><a href="#2-控制层面" class="headerlink" title="2).控制层面"></a>2).控制层面</h4><ul><li>根据路由选择协议所用的路由算法计算路由，创建出本路由器的路由表。</li><li>许多路由器协同动作；采用软件计算，慢。</li></ul><h3 id="4-2-网际协议IP"><a href="#4-2-网际协议IP" class="headerlink" title="4.2 网际协议IP"></a>4.2 网际协议IP</h3><h4 id="1-网际协议IP"><a href="#1-网际协议IP" class="headerlink" title="1).网际协议IP"></a>1).网际协议IP</h4><ul><li>网际协议 IP （Internet Protocol）是一种包含寻址信息、控制信息，为网络中的包获取选择路径的网络层协议。</li><li>]IP是 TCP/IP 体系中两个最主要的协议之一。</li><li>当前 IP 协议有两种版本：IPv4(RFC791)和IPv6(RFC2460)</li><li>IP 协议同样都适用于 LAN 和 WAN 通信。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216212541926.png" alt="网际层的IP协议及配套协议"></li></ul><h4 id="2-IP-协议的两个基本任务"><a href="#2-IP-协议的两个基本任务" class="headerlink" title="2).IP 协议的两个基本任务"></a>2).IP 协议的两个基本任务</h4><ol><li><h5 id="寻址："><a href="#寻址：" class="headerlink" title="寻址："></a>寻址：</h5><ul><li>提供无连接的和最有效的数据包传送</li><li>IP可以根据数据包包头中包括的目的地址将数据报传送到目的地址，在此过程中IP负责选择传送的道路，这种选择道路称为路由功能</li></ul></li><li><h5 id="管理分割数据片："><a href="#管理分割数据片：" class="headerlink" title="管理分割数据片："></a>管理分割数据片：</h5><ul><li>提供数据包的分割及重组以支持不同最大传输单元(MTU)大小的数据连接。</li></ul></li></ol><h4 id="3-IP协议的特点"><a href="#3-IP协议的特点" class="headerlink" title="3).IP协议的特点"></a>3).IP协议的特点</h4><ol><li>IP协议是一种<code>不可靠、无连接的数据报传送</code>服务协议</li><li>IP协议是<code>点-点</code>的网络层通信协议</li><li>IP协议向运输层屏蔽了物理网络的差异</li></ol><h3 id="4-3-虚拟互连网络-互联网"><a href="#4-3-虚拟互连网络-互联网" class="headerlink" title="4.3 虚拟互连网络/ 互联网"></a>4.3 虚拟互连网络/ 互联网</h3><h4 id="1-网络互连"><a href="#1-网络互连" class="headerlink" title="1).网络互连"></a>1).网络互连</h4><ol><li><p><code>所谓虛拟互连网络也就是逻辑互连网络</code>，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用IP协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。</p></li><li><p>目的：将两个或者两个以上具有独立自治能力的计算机网络通过一个网络互连部件连接起来，实现数据流通，扩大资源共享的范围，或者容纳更多的用户。</p></li><li><h5 id="互连所需的中间设备"><a href="#互连所需的中间设备" class="headerlink" title="互连所需的中间设备"></a>互连所需的中间设备</h5><ul><li>中间设备又称为中间系统或中继(relay)系统<ul><li>物理层中继系统：中继器或转发器(repeater)、集线器<br>(hub) 。</li><li>数据链路层中继系统：网桥 (bridge)、交换机(switch) 。</li><li>网络层中继系统：路由器(router)。</li><li>网络层以上的中继系统：网关(gateway)。</li><li><code>网络互连使用路由器</code></li></ul></li></ul><blockquote><p>使用转发器、网桥或交换机不称为网络互连，仅把一个网络扩大了，仍然是一个网络。</p></blockquote><ul><li><strong>路由器的功能</strong><ol><li>路由器的主要任务是把通信引导到目的网络，然后到达特定的节点。</li><li>中间节点路由器在网络中传输时，提供<code>报文的存储和转发</code>。同时根据当前的路由表所保持的路由信息情况，选择“<code>最好的路径</code>”传送报文。</li></ol></li></ul></li><li><h5 id="分组在互联网中的传送"><a href="#分组在互联网中的传送" class="headerlink" title="分组在互联网中的传送"></a>分组在互联网中的传送</h5><ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216215218376.png" alt="分组在互联网中的传送"></li><li>如果我们只从网络层考虑问题，那么 IP 数据报就可以想象是在网络层中传送。<ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216215341832.png" alt="从网络层看分组在互联网中的传送"></li></ul></li></ul></li><li><h5 id="IP-网的意义"><a href="#IP-网的意义" class="headerlink" title="IP 网的意义"></a>IP 网的意义</h5><ul><li>使用IP协议的虚拟互连网络可简称为IP网。</li><li>当互联网上的主机进行通信时，就好像在一个网络上通信一样，看不见互连的各具体的网络异构细节。</li></ul></li></ol><h3 id="4-4-IP-地址"><a href="#4-4-IP-地址" class="headerlink" title="4.4 IP 地址"></a>4.4 IP 地址</h3><h4 id="1-IP-地址及其表示方法"><a href="#1-IP-地址及其表示方法" class="headerlink" title="1).IP 地址及其表示方法"></a>1).IP 地址及其表示方法</h4><ul><li><strong>IP地址</strong>（Internet Protocol Address）是一种在因特网上给主机（或路由器）编址的方式，也称为网际协议地址。</li><li><strong>IP 地址的编码</strong>：32位的二进制标识符(IPV4)。</li><li><code>在 Internet网络中，IP地址唯一地标识了一台计算机或路由器（的接口）</code></li><li>IP地址现在由因特网名字与号码指派公司 ICANN(Internet Corporation for Assigned Names andNumbers)进行分配，总部设在美国，由美国政府通过委托合同授权的形式来管理。</li></ul><h4 id="2-IP-地址表示方法"><a href="#2-IP-地址表示方法" class="headerlink" title="2).IP 地址表示方法"></a>2).IP 地址表示方法</h4><ol><li><p>点分十进制记法</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216215456915.png" alt="点分十进制记法"></p></li></ol><h4 id="3-IP-地址的分级结构"><a href="#3-IP-地址的分级结构" class="headerlink" title="3).IP 地址的分级结构"></a>3).IP 地址的分级结构</h4><ul><li><p>每一类地址都由两个固定长度的字段组成，其中一个字段是<code>网络号 net-id</code>，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号 host-id，它标志该主机（或路由器）。</p></li><li><p>两级的 IP 地址可以记为：</p><blockquote><p>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}，其中“ ::= ” 代表“定义为”</p></blockquote></li><li><p><code>IP地址在整个互联网范围内是唯一的</code>。IP 地址指明了连接到某个网络上的一个主机。</p></li><li><p>IP地址是一种分等级的地址结构。分两个等级的好处是:</p><ol><li>IP地址管理机构在分配IP地址时只分配网络号,而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了IP地址的管理；</li><li>路由器<code>仅根据目的主机所连接的网络号来转发分组</code>(而不考虑目的主机号)，这样就可以使<code>路由表中的项目</code>数大幅度减少，从而减小了路由表所占的存储空间。</li></ol></li></ul><h4 id="4-IP-地址的分类结构"><a href="#4-IP-地址的分类结构" class="headerlink" title="4).IP 地址的分类结构"></a>4).IP 地址的分类结构</h4><ul><li>址类型的判断：求出第一个字段的二进制数，看其最高一位（0）、最高两位(10) 、最高三位(110)或四位(1110、1111)</li></ul><ol><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216221414809.png" alt="IP地址的分类结构"></p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216221945948.png" alt="特殊的IP 地址"></p></li><li><p>A类地址：</p><ul><li>A类网络总数：2<sup>7</sup>=128</li><li>全部地址范围： 0.0.0.0 ~127.255.255.255</li><li>第一个可用网络号：1；网络地址：1.0.0.0</li><li>最后一个可用网络号：126 ；网络地址：126.0.0.0</li><li>每个网络中全部IP地址范围：*.0.0.0 ~*.255.255.255</li><li>每个网络中全部IP地址总数：2<sup>24</sup>=16777216</li><li>每个网络中可用IP地址范围：*.0.0.1 ~*.255.255.254</li><li>每个网络中可用IP地址总数： 2<sup>24</sup>-2=16777214</li></ul><blockquote><p>A类地址网络号字段第一个必须为0，若后续的网络号字段全部为0（即00000000）的IP地址是个保留地址，意思是“<code>本网络</code>”；若后续网络号为全1（即01111111）的IP地址是个保留地址作为本地软件<code>环回测试</code>本主机的进程之间的通信之用。</p></blockquote></li><li><p>B类地址：</p><ul><li>B类网络总数：2<sup>14</sup>=16384</li><li>全部地址范围： 128.0.0.0 ~191.255.255.255</li><li>第一个可用网络号：128.0 ；网络地址：128.1.0.0</li><li>最后一个可用网络号：191.255 ；网络地址：191.255.0.0</li><li>每个网络中全部IP地址范围：*.<em>.0.0 ~</em>.*.255.255</li><li>每个网络中全部IP地址总数：2<sup>16</sup>=65536</li><li>每个网络中可用IP地址范围：*.<em>.0.1 ~</em>.*.255.254</li><li>每个网络中可用IP地址总数： 2<sup>16</sup>-2=65534</li></ul><blockquote><p>B类网络地址128.0.0.0是不可指派的，故可以指派的B类网络数为2<sup>14</sup>-1个；</p></blockquote></li><li><p>C类地址：</p><ul><li>C类网络总数：2<sup>21</sup>=2097152</li><li>全部地址范围： 192.0.0.0 ~223.255.255.255</li><li>第一个可用网络号：192.0.0 ；网络地址：192.0.1.0</li><li>最后一个可用网络号：223.255.255 ；网络地址：223.255.255.0</li><li>每个网络中全部IP地址范围：*.<em>.</em>.0 ~<em>.</em>.*.255</li><li>每个网络中全部IP地址总数：2<sup>8</sup>=256</li><li>每个网络中可用IP地址范围：*.<em>.</em>.1 ~<em>.</em>.*.254</li><li>每个网络中可用IP地址总数： 2<sup>8</sup>-2=254</li></ul><blockquote><p>C类网络地址192.0.0.0是不可指派的，故可以指派的B类网络数为2<sup>21</sup>-1个；</p></blockquote></li></ol><h4 id="5-IP-地址的一些重要特点"><a href="#5-IP-地址的一些重要特点" class="headerlink" title="5).IP 地址的一些重要特点"></a>5).IP 地址的一些重要特点</h4><ul><li>实际，上IP地址是标志一个主机(或路由器)和一条链路的接口。<ul><li>当一个主机同时连接到两个网络上时，该主机就必.须同时具有两个相应的IP地址，其网络号net-id必须是不同的。这种主机称为<code>多归属主机</code>(multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络(这样它才能将IP数据报从一个网络转发到另一个网络) ,因此<code>一个路由器至少应当有两个不同的IP地址</code>。</li><li><code>用转发器或网桥连接起来的若干个局域网仍为一个网络</code>，因此这些局域网都具有同样的网络号net-id。</li><li>所有分配到网络号net-id的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是<code>平等的</code>。</li></ul></li></ul><h4 id="6-互联网中的IP地址"><a href="#6-互联网中的IP地址" class="headerlink" title="6).互联网中的IP地址"></a>6).互联网中的IP地址</h4><ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216224711983.png" alt="互联网中的IP地址"></li></ul><ol><li><h5 id="为什么要使用IP地址"><a href="#为什么要使用IP地址" class="headerlink" title="为什么要使用IP地址"></a>为什么要使用IP地址</h5><ul><li>主机要在物理网络上通信，最终必须依靠物理地址。</li><li>统一物理地址的表示方法不现实</li><li>IP地址屏蔽各种物理网络的地址差异，即互联网对各种物理网络地址的“统一”通过IP地址在IP层完成。</li><li>IP地址从字面看，它具有定位的作用(<code>网络定位</code>)，，定位原则取决于它的分配原则，IP地址查询就是基于此。</li><li>在网络层使用统一的、 抽象的IP地址， 研究主机-主机、主机-路由器、路由器路由器之间的通信。</li></ul></li><li><h5 id="IP地址与MAC地址"><a href="#IP地址与MAC地址" class="headerlink" title="IP地址与MAC地址"></a>IP地址与MAC地址</h5><ul><li>尽管互连在一起的网络的MAC地址体系各不相同，但IP 层抽象的互联网却屏蔽了下层这些很复杂的细节。</li><li>只要我们在网络层.上讨论问题，就能够使用统一的、抽象的IP地址研究主机和主机或路由器之间的通信。</li><li>实现IP通信时使用了两个地址:<ul><li>IP地址(网络层地址)</li><li>MAC地址(数据链层地址)</li></ul></li></ul></li></ol><h4 id="7-地址解析协议ARP"><a href="#7-地址解析协议ARP" class="headerlink" title="7).地址解析协议ARP"></a>7).地址解析协议ARP</h4><ol><li><h5 id="ARP的要点"><a href="#ARP的要点" class="headerlink" title="ARP的要点"></a>ARP的要点</h5><ul><li><p>不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件地址。</p></li><li><p>ARP协议就是根据IP地址获取物理地址的一个TCP/ IP协议。</p></li><li><p><code>ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行</code>。</p></li><li><p>每一个主机都设有一个<code>ARP高速缓存</code>(ARP cache)，里面<code>有所在的局域网上的各主机和路由器的IP地址到硬件地址的映射表</code>。</p><blockquote><p>&lt; IP address;  MAC address; TTL &gt;</p></blockquote><p><code>TTL (Time To Live):地址映射有效时间</code>，超过TTL的地址映射会被删除，（一般为20分钟）。</p></li></ul></li><li><h5 id="ARP高速缓存的作用"><a href="#ARP高速缓存的作用" class="headerlink" title="ARP高速缓存的作用"></a>ARP高速缓存的作用</h5><p><code>以主机A向主机B发送报文时的地址解析为例</code></p><ul><li><strong>为了减少网络上的通信量</strong>，主机A在发送其ARP请求分组时，就将自己的IP 地址到硬件地址的映射写入ARP请求分组。</li><li>当主机B收到A的ARP请求分组时，就将主机A的这一地址映射写入主机B自己的ARP高速缓存中。当主机B以后向A发送数据报时就方便了。</li><li>在整个ARP工作期间，不但计算机A得到了计算机B的IP地址与MAC地址的映像关系，而且计算机B和收到此ARP请求分组的其他及其也都得到了计算机A的IP地址与MAC地址的映像关系。</li></ul></li><li><h5 id="ARP协议的工作过程"><a href="#ARP协议的工作过程" class="headerlink" title="ARP协议的工作过程"></a>ARP协议的工作过程</h5><p><code>以源主机A与目的主机B在同一网络中为例</code></p><ul><li><p>（1）主机A检查自己高速Cache中的ARP表中是否存有主机B的IP地址与MAC地址的映像关系，如果找到，则完成ARP地址解析；如果没有找到，则转下一步；</p></li><li><p>（2）主机A广播含有自身IP地址与MAC地址映像关系的请求信息包（目的MAC地址是FF-FF-FF-FF-FF-FF），请求解析主机B的IP地址与MAC地址映像关系；</p></li><li><p>（3）包括B在内的所有主机接收到A的请求信息，然后将A的IP地址与MAC地址的映像关系存入各自的ARP表中；</p></li><li><p>（4）B发送ARP响应报文，通知自己的IP地址与MAC地址的对应关系；</p></li><li><p>（5）A收到B的响应信息，并将B的IP地址与MAC地址的映像关系存入自己的ARP表中，从而完成B的ARP地址解析。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219153825531.png" alt="地址解析协议ARP"></p></li></ul></li><li><h5 id="使用ARP的典型情况"><a href="#使用ARP的典型情况" class="headerlink" title="使用ARP的典型情况"></a>使用ARP的典型情况</h5></li></ol><ul><li><p>(1)源主机与目的主机在同一网络中</p><p>发送方是主机，要把IP数据报发送到本网络上的另一个主机。(以A→ B通信为例)</p><ul><li>这时源主机(A)用ARP找到目的主机(B)的硬件地址。</li><li>源主机(A)向目的主机(B)发送IP数据报，A→B通信结束</li></ul></li><li><p>(2) 源主机与目的主机不在同一网络中<br>发送方是主机，要把IP数据报发送到另一个网络上的主机。(以A→B通 信为例)</p><ul><li><p>第一阶段:</p><ol><li>源主机(A)用ARP找到本网络.上的一个路由器的硬件地址。</li><li>源主机(A)将报文发给此路由器(R1)剩下的工作由这个路由器(R1)来完成。</li></ol></li><li><p>第二阶段:</p><p>路由器的地址解析过程，有两种情况:</p><ol><li><p><strong>情况①:直接交付一</strong>发送方是路由器R1，要把IP数据报转发到本网络上的一个目的主机(B)。</p><ul><li>这时路由器R1用ARP找到目的主机(B)的硬件地址，然后按此硬件地址向目的主机(B)转发报文。</li><li>A→B通信结束。</li></ul></li><li><p><strong>情况②:间接交付一</strong>发送方是路由器R1，要把IP数据报转发到另一个网络上的一个目的主机(B)。这时路由器R1用ARP找到本网络上的另一个路由器R2的硬件地址，然后按此硬件地址向R2转发报文。</p><ul><li>剩下的工作由路由器R2来完成。</li><li>如此继续，直至报文转发到目的主机(B)，A→B通信<br>结束。</li></ul></li></ol></li></ul></li></ul><h3 id="4-5-IP-数据报的格式"><a href="#4-5-IP-数据报的格式" class="headerlink" title="4.5 IP 数据报的格式"></a>4.5 IP 数据报的格式</h3><h4 id="1-简单格式"><a href="#1-简单格式" class="headerlink" title="1).简单格式"></a>1).简单格式</h4><ul><li>一个IP数据报由首部和数据两部分组成。</li><li><code>首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的</code>。</li><li>在首部的固定部分的后面是一-些可选字段，其长度是可变的。</li></ul><h4 id="2-详细格式"><a href="#2-详细格式" class="headerlink" title="2).详细格式"></a>2).详细格式</h4><ul><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219160431213.png" alt="IP 数据报的格式"></p></li><li><p><strong>第1字段：版本（4位）</strong>——指出 IP 协议的版本，目前的 IP协议版本号为 4 (即 IPv4)。</p></li><li><p><strong>第2字段：首部长度（4位）</strong>——指明IP数据报首部长度是多少个单位，一个单位代表4个字节。</p><ol><li>即：<code>IP数据报首部实际长度=首部长度字段的值×4个字节</code>。例如，某IP报文首部字段中的数据是“1100”，则该IP报文首部实际长度是“12×4=48”个字节，其中，“固定部分”20个字节，“可选+填充”部分28个字节</li><li>也即：<code>首部长度字段的值=IP数据报首部实际长度的字节数/4</code>。例如，某IP报文首部实际长度是24个字节，则首部长度应填入数据“0110”。</li><li>该字段可表示的<code>最大数值是1111</code>，因此<code>IP首部最多长“15×4=60” 个字节</code>。其中，“固定部分”20个字节，“可变部分“40个字节。这个字段的<code>最小值是0101</code>，即只有“固定部分的5×4=20 个字节”</li></ol></li><li><p><strong>第3字段：区分服务（8位，第2个字节）</strong>——用来获得更好的服务。在旧标准中叫做服务类型，但实际上一直未被使用过。1998 年这个字段改名为区分服务。只有在使用区分服务（DiffServ）时，这个字段才起作用。<code>目前，几乎所有路由器都忽略服务类型域</code>。</p></li><li><p><strong>第4字段：总长度（16 位，第3-4字节）</strong>——指出数据报总长度，即<code>首部长度+数据部分长度，单位为字节</code>。因此数据报的最大长度为2<sup>16</sup>-1= 65535 个字节。</p><p><code>总长度必须不超过最大传送单元 MTU。</code></p><blockquote><p>例如</p><ul><li>（1）某数据报首部长20B，数据长60B，则总长度字段应填入80的二进制数0000000001010000</li><li>（2）某数据报首部长度字段值是6，总长度字段值是80，则数据部分长度为80-4×6=56（字节）</li></ul></blockquote></li><li><p><strong>第5字段：标识（占16 位，第32—47位，即第5-6字节）</strong>——是一个计数器，用来产生数据报的标识。数据报分片时使用，标识分片是属于哪个数据报的 。</p></li><li><p><strong>第6字段：标志（3 位）</strong>——<code>目前只有后两位有意义</code>。</p><ul><li>标志字段的最低位是 MF (More Fragment)。<code>MF=1 表示后面“还有分片”。MF=0 表示最后一个分片</code>。</li><li>标志字段中间的一位是 DF (Don’t Fragment) 。<code>只有当DF=0 时才允许分片</code>。</li></ul></li><li><p>**第7字段：片偏移(13 位)**——指出较长的分组在分片后，某片在原分组中的相对位置。</p><ul><li><p>片偏移以 8 个字节为偏移单位。即，某片在原分组中的起始位置（字节数）=8×片偏移字段的值，也即，<code>片偏移字段的值=某片在原分组中的起始位置（字节数）/8</code></p><blockquote><p>例如，一个IP数据片的片偏移字段的值是50，则该IP数据片的数据部分的第一个字节是原IP数据报的第50×8 =400个字节；</p><p>反之，如果某数据片第一个字节是原IP数据报的第640个字节，则片偏移字段的值应为640/8=80(对应的二进制数)</p></blockquote><p><code>最大片偏移=213 ×8 B=64KB</code></p></li></ul></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219161814731.png" alt="IP 数据报的分片"></p></li><li><p>**第8字段：生存时间(8 位，第9字节)**——记为TTL(Time ToLive)</p><ul><li><code>指出数据报在网络中可通过的路由器数的最大值</code>，每经过一个路由器TTL值就减1。</li><li>生存时间字段的最大值=2<sup>8</sup>-1=255。</li></ul></li><li><p><strong>第9字段：协议(8 位，第10字节）</strong>——指出此数据报携带的数据使用何种协议，以便目的主机的 IP 层将数据部分上交给哪个处理过程。</p></li><li><p>**第10字段：首部检验和(16 位，第11-12字节)**——<code>只检验数据报的首部</code>，不检验数据部分。<code>这里不采用 CRC 检验码而采用简单的反码运算</code>。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219171613766.png" alt="首部检验"></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219170455821.png" alt="反码算数求和"></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219172401196.png" alt="首部检验和的计算与校验"></p></li><li><p><strong>第11、12字段：源地址和目的IP地址（各占 4 字节，第13-16字节、第17-20字节）</strong>——指出发送节点（源）的IP地址和接收节点（目的）的IP地址。</p></li><li><p><strong>IP 数据报首部的可变部分</strong>是一个选项字段，用来支持排错、测量以及安全等措施，内容很丰富。但实际上这些选项很少被使用</p></li></ul><h3 id="4-6-1-CIDR-地址"><a href="#4-6-1-CIDR-地址" class="headerlink" title="4.6.1 CIDR 地址"></a>4.6.1 CIDR 地址</h3><ul><li>CIDR地址：它的正式名字是<code>无分类域间路由选择 CIDR</code>(Classless Inter-Domain Routing)。（无分类编址）</li><li>CIDR 消除了传统的 A 类、B 类和 C 类地址及划分子网的概念，因而可以更加有效地分配 IPv4 的地址空间</li><li>CIDR使用各种长度的“<code>网络前缀</code>”(network-prefix)来代替分类地址中的网络号和子网号。</li></ul><h4 id="1-无分类的两级编址"><a href="#1-无分类的两级编址" class="headerlink" title="1).无分类的两级编址"></a>1).无分类的两级编址</h4><ul><li><blockquote><p>IP地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;}</p></blockquote></li><li><p>分类IP地址的网络号部分此时改称为<code>网络前缀</code>，仍旧用来标识连入Internet的一个网络的网络编号</p></li></ul><h4 id="2-CIDR记法："><a href="#2-CIDR记法：" class="headerlink" title="2).CIDR记法："></a>2).CIDR记法：</h4><ul><li><p>CIDR 使用“斜线记法” ，即在IP地址后面加上一个斜线“/”，然后写上网络前缀所占的比特数</p><blockquote><p>如：128.14.32.0/20</p><ul><li>/20表示该地址的前20个比特是网络号，所以128.14.32.0/20的网络号（网络前缀）是“10000000 00001110 0010”</li></ul></blockquote></li></ul><h4 id="3-CIDR地址块"><a href="#3-CIDR地址块" class="headerlink" title="3).CIDR地址块"></a>3).CIDR地址块</h4><ul><li><p>网络前缀都相同的、连续的IP地址就组成了一个“CIDR地址块”</p></li><li><p>说明：</p><ol><li><p>每个CIDR地址块中的<code>地址数</code>一定是2的整数次幂。</p></li><li><p>每个CIDR地址块的<code>起始网络地址</code>一定是2的整数次幂或2的整数次幂的倍数，与地址块个数有关</p><blockquote><p>例如，某单位需要4个C类网络地址，则CIDR地址块的起始地址可以是：*.<em>.0.0、</em>.<em>.4.0、</em>.<em>.8.0、</em>.<em>.12.0、</em>.<em>.16.0、</em>.*.20.0 等等</p></blockquote></li><li><p>全 0 和全 1 的主机号地址一般不使用</p><ul><li><code>全“0”的主机号代表网络地址</code></li><li>全“1”的主机号代表网络内广播地址</li></ul></li></ol></li></ul><h4 id="4-路由聚合"><a href="#4-路由聚合" class="headerlink" title="4).路由聚合"></a>4).路由聚合</h4><ul><li><p>路由聚合的方法：把一组路由汇聚为一个单个的路由，即用一个IP地址代表一组IP地址,</p><blockquote><p>例：计算能同时覆盖 198.1.12.0/24，198.1.13.0/24，198.1.14.0/24，198.1.15.0/24 这四条路由的聚合地址<br>解：</p><ul><li>198.1.12.0/24：11000110.00000001.00001100.00000000</li><li>198.1.13.0/24：11000110.00000001.00001101.00000000</li><li>198.1.14.0/24：11000110.00000001.00001110.00000000</li><li>198.1.15.0/24：11000110.00000001.00001111.00000000</li><li>聚合地址： 11000110.00000001.00001100.00000000/22<br>即：198.1.12.0/22</li></ul></blockquote></li><li><p>路由聚合的目的：一个 CIDR 地址块可以表示多个网络地址，路由聚合就是让路由选择协议能够用一个地址通告这多个网络地址，从而使得路由表中的一个项目可以表示多个原来传统分类地址的路由，从而<code>缩小了路由表的规模</code>，增加了网络的可扩展性。</p></li></ul><h4 id="6-超网"><a href="#6-超网" class="headerlink" title="6).超网"></a>6).超网</h4><ul><li><p>前缀长度不超过 23 位的 CIDR 地址块都包含了多个 C 类地址，这些 C 类地址合起来就构成了一个<code>超级网络</code>（超网）。<code>这个超网对外通告一个聚合路由</code>。</p><blockquote><p>例如：</p><ul><li>前缀长度为23位，包含了2(24-23)=2个C类网络（即C类地址块），构成了一个含有256×2=512个IP地址的超级网络（超网），聚合路由为*.*.*0.0/23</li></ul></blockquote></li></ul><h3 id="4-7-1-划分子网"><a href="#4-7-1-划分子网" class="headerlink" title="4.7.1 划分子网"></a>4.7.1 划分子网</h3><h4 id="1-划分子网的原因"><a href="#1-划分子网的原因" class="headerlink" title="1).划分子网的原因"></a>1).划分子网的原因</h4><ul><li>在 ARPANET 的早期，IP 地址的设计确实不够合理。</li><li>IP 地址空间的利用率有时很低。</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li><li>从1985年起在 IP地址中又增加了一个“子网号字段”，这种做法叫作<code>划分子网(subnetting)</code> 。</li><li>划分子网已成为因特网的正式标准协议。</li></ul><h4 id="2-划分子网的基本思路"><a href="#2-划分子网的基本思路" class="headerlink" title="2).划分子网的基本思路"></a>2).划分子网的基本思路</h4><ul><li><p>划分子网<code>纯属一个单位内部</code>的事情。单位对外仍然表现为没有划分子网的网络。</p></li><li><p>从“主机号字段”借用若干位作为“<code>子网号 subnet-id</code>”，而主机号 host-id 也就相应减少了若干个位。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219173101622.png" alt="划分子网的基本思路"></p></li></ul><h4 id="3-子网掩码"><a href="#3-子网掩码" class="headerlink" title="3).子网掩码"></a>3).子网掩码</h4><ol><li><p>从一个IP数据报的首部并<code>无法判断</code>源主机或目的主机所连接的网络是否进行了子网划分。</p></li><li><p>使用<code>子网掩码(subnet mask)</code>可以找出IP地址中的子网部分。</p></li><li><p>规则:</p><ul><li>子网掩码长度=32位</li><li>某位=1:：IP地址中的对应位为网络号和子网号</li><li>某位=0:：IP地址中的对应位为主机号</li></ul><blockquote><p>(IP地址)  AND  (子网掩码)  = 网络地址</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219221135092.png" alt="子网掩码"></p></blockquote></li><li><p><code>子网掩码是一个网络或一个子网的重要属性</code>。</p><ul><li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络(或子网)的子网掩码告诉相邻路由器。</li><li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li><li>若一个路由器连接在两个子网.上就拥有两个网络地址和两个子网掩码。</li></ul></li></ol><h4 id="4-定长子网的划分"><a href="#4-定长子网的划分" class="headerlink" title="4).定长子网的划分"></a>4).定长子网的划分</h4><h4 id="5-变长子网的划分"><a href="#5-变长子网的划分" class="headerlink" title="5).变长子网的划分"></a>5).变长子网的划分</h4><h3 id="4-7-2-划分子网后的分组转发"><a href="#4-7-2-划分子网后的分组转发" class="headerlink" title="4.7.2 划分子网后的分组转发"></a>4.7.2 划分子网后的分组转发</h3><p>判断子网掩码是否一致</p><p>判断网络地址是否一样</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211219173929177.png" alt="路由器分组转发算法"></p>]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】IDEA 常用快捷键</title>
      <link href="/2021/12/13/IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2021/12/13/IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-常用快捷键"><a href="#IDEA-常用快捷键" class="headerlink" title="IDEA 常用快捷键"></a>IDEA 常用快捷键</h1><p>转载自<a href="https://www.cnblogs.com/yuanfy008/">玉树临枫</a></p><h3 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件进行文本查找 <code>（必备）</code></td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换 <code>（必备）</code></td></tr><tr><td>Ctrl + Z</td><td>撤销 <code>（必备）</code></td></tr><tr><td>Ctrl + Y</td><td>删除光标所在行 或 删除选中的行 <code>（必备）</code></td></tr><tr><td>Ctrl + X</td><td>剪切光标所在行 或 剪切选择内容</td></tr><tr><td>Ctrl + C</td><td>复制光标所在行 或 复制选择内容</td></tr><tr><td>Ctrl + D</td><td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td></tr><tr><td>Ctrl + W</td><td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td></tr><tr><td>Ctrl + E</td><td>显示最近打开的文件记录列表 <code>（必备）</code></td></tr><tr><td>Ctrl + N</td><td>根据输入的 类名 查找类文件 <code>（必备）</code></td></tr><tr><td>Ctrl + G</td><td>在当前文件跳转到指定行处</td></tr><tr><td>Ctrl + J</td><td>插入自定义动态代码模板 <code>（必备）</code></td></tr><tr><td>Ctrl + P</td><td>方法参数提示显示 <code>（必备）</code></td></tr><tr><td>Ctrl + Q</td><td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td>Ctrl + U</td><td>前往当前光标所在的方法的父类的方法 / 接口定义 <code>（必备）</code></td></tr><tr><td>Ctrl + B</td><td>进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code> <code>（必备）</code></td></tr><tr><td>Ctrl + K</td><td>版本控制提交项目，需要此项目有加入到版本控制才可用<code>（必备）</code></td></tr><tr><td>Ctrl + T</td><td>版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td>Ctrl + H</td><td>显示当前类的层次结构</td></tr><tr><td>Ctrl + O</td><td>选择可重写的方法</td></tr><tr><td>Ctrl + I</td><td>选择可继承的方法</td></tr><tr><td>Ctrl + +</td><td>展开代码</td></tr><tr><td>Ctrl + -</td><td>折叠代码</td></tr><tr><td>Ctrl + /</td><td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td></tr><tr><td>Ctrl + [</td><td>移动光标到当前所在代码的花括号开始位置</td></tr><tr><td>Ctrl + ]</td><td>移动光标到当前所在代码的花括号结束位置</td></tr><tr><td>Ctrl + F1</td><td>在光标所在的错误代码处显示错误信息 <code>（必备）</code></td></tr><tr><td>Ctrl + F3</td><td>调转到所选中的词的下一个引用位置 <code>（必备）</code></td></tr><tr><td>Ctrl + F4</td><td>关闭当前编辑文件</td></tr><tr><td>Ctrl + F8</td><td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td>Ctrl + F9</td><td>执行 Make Project 操作</td></tr><tr><td>Ctrl + F11</td><td>选中文件 / 文件夹，使用助记符设定 / 取消书签 <code>（必备）</code></td></tr><tr><td>Ctrl + F12</td><td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td>Ctrl + Tab</td><td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td>Ctrl + End</td><td>跳到文件尾</td></tr><tr><td>Ctrl + Home</td><td>跳到文件头</td></tr><tr><td>Ctrl + Space</td><td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td></tr><tr><td>Ctrl + Delete</td><td>删除光标后面的单词或是中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + BackSpace</td><td>删除光标前面的单词或是中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + 1,2,3…9</td><td>定位到对应数值的书签位置 <code>（必备）</code></td></tr><tr><td>Ctrl + 左键单击</td><td>在打开的文件标题上，弹出该文件路径 <code>（必备）</code></td></tr><tr><td>Ctrl + 光标定位</td><td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td>Ctrl + 左方向键</td><td>光标跳转到当前单词 / 中文句的左侧开头位置 <code>（必备）</code></td></tr><tr><td>Ctrl + 右方向键</td><td>光标跳转到当前单词 / 中文句的右侧开头位置 <code>（必备）</code></td></tr><tr><td>Ctrl + 前方向键</td><td>等效于鼠标滚轮向前效果 <code>（必备）</code></td></tr><tr><td>Ctrl + 后方向键</td><td>等效于鼠标滚轮向后效果 <code>（必备）</code></td></tr></tbody></table><h3 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Alt + `</td><td>显示版本控制常用操作菜单弹出层 <code>（必备）</code></td></tr><tr><td>Alt + Q</td><td>弹出一个提示，显示当前类的声明 / 上下文信息</td></tr><tr><td>Alt + F1</td><td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 <code>（必备）</code></td></tr><tr><td>Alt + F2</td><td>对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td>Alt + F3</td><td>选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td>Alt + F7</td><td>查找光标所在的方法 / 变量 / 类被调用的地方</td></tr><tr><td>Alt + F8</td><td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td>Alt + Home</td><td>定位 / 显示到当前文件的 <code>Navigation Bar</code></td></tr><tr><td>Alt + Enter</td><td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td></tr><tr><td>Alt + Insert</td><td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 <code>（必备）</code></td></tr><tr><td>Alt + 左方向键</td><td>切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 <code>（必备）</code></td></tr><tr><td>Alt + 右方向键</td><td>按切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 <code>（必备）</code></td></tr><tr><td>Alt + 前方向键</td><td>当前光标跳转到当前文件的前一个方法名位置 <code>（必备）</code></td></tr><tr><td>Alt + 后方向键</td><td>当前光标跳转到当前文件的后一个方法名位置 <code>（必备）</code></td></tr><tr><td>Alt + 1,2,3…9</td><td>显示对应数值的选项卡，其中 1 是 Project 用得最多 <code>（必备）</code></td></tr></tbody></table><h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Shift + F1</td><td>如果有外部文档可以连接外部文档</td></tr><tr><td>Shift + F2</td><td>跳转到上一个高亮错误 或 警告位置</td></tr><tr><td>Shift + F3</td><td>在查找模式下，查找匹配上一个</td></tr><tr><td>Shift + F4</td><td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td>Shift + F6</td><td>对文件 / 文件夹 重命名</td></tr><tr><td>Shift + F7</td><td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td>Shift + F8</td><td>在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td></tr><tr><td>Shift + F9</td><td>等效于点击工具栏的 <code>Debug</code> 按钮</td></tr><tr><td>Shift + F10</td><td>等效于点击工具栏的 <code>Run</code> 按钮</td></tr><tr><td>Shift + F11</td><td>弹出书签显示层 <code>（必备）</code></td></tr><tr><td>Shift + Tab</td><td>取消缩进 <code>（必备）</code></td></tr><tr><td>Shift + ESC</td><td>隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td>Shift + End</td><td>选中光标到当前行尾位置</td></tr><tr><td>Shift + Home</td><td>选中光标到当前行头位置</td></tr><tr><td>Shift + Enter</td><td>开始新一行。光标所在行下空出一行，光标定位到新行位置 <code>（必备）</code></td></tr><tr><td>Shift + 左键单击</td><td>在打开的文件名上按此快捷键，可以关闭当前打开文件 <code>（必备）</code></td></tr><tr><td>Shift + 滚轮前后滚动</td><td>当前文件的横向滚动轴滚动 <code>（必备）</code></td></tr></tbody></table><h3 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Alt + L</td><td>格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + O</td><td>优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + I</td><td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td>Ctrl + Alt + T</td><td>对选中的代码弹出环绕选项弹出层 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + J</td><td>弹出模板选择窗口，将选定的代码加入动态模板中</td></tr><tr><td>Ctrl + Alt + H</td><td>调用层次</td></tr><tr><td>Ctrl + Alt + B</td><td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td>Ctrl + Alt + C</td><td>重构-快速提取常量</td></tr><tr><td>Ctrl + Alt + F</td><td>重构-快速提取成员变量</td></tr><tr><td>Ctrl + Alt + V</td><td>重构-快速提取变量</td></tr><tr><td>Ctrl + Alt + Y</td><td>同步、刷新</td></tr><tr><td>Ctrl + Alt + S</td><td>打开 IntelliJ IDEA 系统设置 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + F7</td><td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td>Ctrl + Alt + F11</td><td>切换全屏模式</td></tr><tr><td>Ctrl + Alt + Enter</td><td>光标所在行上空出一行，光标定位到新行 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + Home</td><td>弹出跟当前文件有关联的文件弹出层</td></tr><tr><td>Ctrl + Alt + Space</td><td>类名自动完成</td></tr><tr><td>Ctrl + Alt + 左方向键</td><td>退回到上一个操作的地方 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + 右方向键</td><td>前进到上一个操作的地方 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + 前方向键</td><td>在查找模式下，跳到上个查找的文件</td></tr><tr><td>Ctrl + Alt + 后方向键</td><td>在查找模式下，跳到下个查找的文件</td></tr><tr><td>Ctrl + Alt + 右括号（]）</td><td>在打开多个项目的情况下，切换下一个项目窗口</td></tr><tr><td>Ctrl + Alt + 左括号（[）</td><td>在打开多个项目的情况下，切换上一个项目窗口</td></tr></tbody></table><h3 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Shift + F</td><td>根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + R</td><td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + J</td><td>自动将下一行合并到当前行末尾 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Z</td><td>取消撤销 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + W</td><td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + N</td><td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + U</td><td>对选中的代码进行大 / 小写轮流转换 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + T</td><td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + C</td><td>复制当前文件磁盘路径到剪贴板 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + V</td><td>弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td>Ctrl + Shift + E</td><td>显示最近修改的文件列表的弹出层</td></tr><tr><td>Ctrl + Shift + H</td><td>显示方法层次结构</td></tr><tr><td>Ctrl + Shift + B</td><td>跳转到类型声明处 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + I</td><td>快速查看光标所在的方法 或 类的定义</td></tr><tr><td>Ctrl + Shift + A</td><td>查找动作 / 设置</td></tr><tr><td>Ctrl + Shift + /</td><td>代码块注释 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + [</td><td>选中从光标所在位置到它的顶部中括号位置 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + ]</td><td>选中从光标所在位置到它的底部中括号位置 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + +</td><td>展开所有代码 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + -</td><td>折叠所有代码 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + F7</td><td>高亮显示所有该选中文本，按Esc高亮消失 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + F8</td><td>在 Debug 模式下，指定断点进入条件</td></tr><tr><td>Ctrl + Shift + F9</td><td>编译选中的文件 / 包 / Module</td></tr><tr><td>Ctrl + Shift + F12</td><td>编辑器最大化 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Space</td><td>智能代码提示</td></tr><tr><td>Ctrl + Shift + Enter</td><td>自动结束代码，行末自动添加分号 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Backspace</td><td>退回到上次修改的地方 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 1,2,3…9</td><td>快速添加指定数值的书签 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 左键单击</td><td>把光标放在某个类变量上，按此快捷键可以直接定位到该类中 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 左方向键</td><td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 右方向键</td><td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 前方向键</td><td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 后方向键</td><td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 <code>（必备）</code></td></tr></tbody></table><h3 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Alt + Shift + N</td><td>选择 / 添加 task <code>（必备）</code></td></tr><tr><td>Alt + Shift + F</td><td>显示添加到收藏夹弹出层 / 添加到收藏夹</td></tr><tr><td>Alt + Shift + C</td><td>查看最近操作项目的变化情况列表</td></tr><tr><td>Alt + Shift + I</td><td>查看项目当前文件</td></tr><tr><td>Alt + Shift + F7</td><td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td>Alt + Shift + F9</td><td>弹出 <code>Debug</code> 的可选择菜单</td></tr><tr><td>Alt + Shift + F10</td><td>弹出 <code>Run</code> 的可选择菜单</td></tr><tr><td>Alt + Shift + 左键双击</td><td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 <code>（必备）</code></td></tr><tr><td>Alt + Shift + 前方向键</td><td>移动光标所在行向上移动 <code>（必备）</code></td></tr><tr><td>Alt + Shift + 后方向键</td><td>移动光标所在行向下移动 <code>（必备）</code></td></tr></tbody></table><h3 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Shift + Alt + V</td><td>无格式黏贴 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>前往指定的变量 / 方法</td></tr><tr><td>Ctrl + Shift + Alt + S</td><td>打开当前项目设置 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Alt + C</td><td>复制参考信息</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F2</td><td>跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td></tr><tr><td>F3</td><td>在查找模式下，定位到下一个匹配处</td></tr><tr><td>F4</td><td>编辑源 <code>（必备）</code></td></tr><tr><td>F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td>F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td>F11</td><td>添加书签 <code>（必备）</code></td></tr><tr><td>F12</td><td>回到前一个工具窗口 <code>（必备）</code></td></tr><tr><td>Tab</td><td>缩进 <code>（必备）</code></td></tr><tr><td>ESC</td><td>从工具窗口进入代码文件窗口 <code>（必备）</code></td></tr><tr><td>连按两次Shift</td><td>弹出 <code>Search Everywhere</code> 弹出层</td></tr></tbody></table><h2 id="官网快捷键资料"><a href="#官网快捷键资料" class="headerlink" title="官网快捷键资料"></a>官网快捷键资料</h2><blockquote><ul><li>Windows / Linux：<a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf">https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf</a></li><li>Mac OS X：<a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf">https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf</a></li></ul></blockquote><h2 id="第三方快捷键资料"><a href="#第三方快捷键资料" class="headerlink" title="第三方快捷键资料"></a>第三方快捷键资料</h2><blockquote><ul><li>来自 eta02913：<a href="http://xinyuwu.iteye.com/blog/1005454">http://xinyuwu.iteye.com/blog/1005454</a></li><li><a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-introduce.html">http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-introduce.html</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> reprint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networks (chapter 3)</title>
      <link href="/2021/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
      <url>/2021/12/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h2><h3 id="3-1-数据链路层功能概述"><a href="#3-1-数据链路层功能概述" class="headerlink" title="3.1 数据链路层功能概述"></a>3.1 数据链路层功能概述</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1).基本概念"></a>1).基本概念</h4><ol><li>结点：主机、路由器</li><li>链路：网络中两个结点之间的<code>物理通道</code>，链路的传输介质主要有双绞线、光纤和微波。分为有线链路、无线链路。</li><li>数据链路：网络中两个结点之间的<code>逻辑通道</code>，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路。</li><li>帧：链路层的协议数据单元，封装网络层数据报。</li></ol><blockquote><p>数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报。</p></blockquote><h4 id="2-功能概述"><a href="#2-功能概述" class="headerlink" title="2).功能概述"></a>2).功能概述</h4><p>​    数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据<code>可靠地传输</code>到目邻节点的目标机网络层。其主要作用是<code>加强物理层传输原始比特流的功能</code>，将物理层提供的可能出错的物理连接收造成为<code>逻辑上无差错的数据链路</code>，使之对网络层表现为一条无差错的链路。</p><ol><li>功能一：为网络层提供服务。包括无确认无连接服务，有确认无连接服务，有确认面向连接服务。(有连接一 定有确认!)</li><li>功能二：链路管理，即连接的建立、维持、释放(用于面向连接的服务)。</li><li>功能三：组帧。</li><li>功能四：流量控制。！<code>限制发送方哦~</code></li><li>功能五：差错控制(帧错/位错)。</li></ol><h3 id="3-2-封装成帧-amp-amp-透明传输"><a href="#3-2-封装成帧-amp-amp-透明传输" class="headerlink" title="3.2 封装成帧&amp;&amp;透明传输"></a>3.2 封装成帧&amp;&amp;透明传输</h3><h4 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1).封装成帧"></a>1).封装成帧</h4><ul><li>封装成帧：在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</li><li>首部和尾部包含许多的控制信息，他们的一个重要作用：<code>帧定界</code>( 确定帧的界限)。</li><li>帧同步：接收方应当能从接收到的二进制比特流中区分出帧的起始和终止。</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212223520819.png" alt="帧"></p><h4 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2).透明传输"></a>2).透明传输</h4><ul><li>透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西。</li></ul><blockquote><p>当所传数据中的比特组合恰巧与某一个控制信息完全一样时， 就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的。</p></blockquote><h4 id="6-組帧的方法"><a href="#6-組帧的方法" class="headerlink" title="6).組帧的方法"></a>6).組帧的方法</h4><ol><li><h5 id="字符计数法"><a href="#字符计数法" class="headerlink" title="字符计数法"></a>字符计数法</h5><p>实现：在帧首部使用一个计数字段（第一个字节，八位）来标明帧内字符数。</p><p>缺点：<code>容易出错</code>，一个错了就全都错了。 </p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212223907956.png" alt="字符计数法"></p></li><li><h5 id="字符（节）填充法"><a href="#字符（节）填充法" class="headerlink" title="字符（节）填充法"></a>字符（节）填充法</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212224425235.png" alt="字符（节）填充法"></p></li><li><h5 id="零比特填充法"><a href="#零比特填充法" class="headerlink" title="零比特填充法"></a>零比特填充法</h5><p>实现：</p><ul><li>在发送端，扫描整个信息字段，只要连续5个1，就立即填入1个0。</li><li>在接收端收到一个帧时，先找到标志字段确定边界，再用硬件对比特流进行扫描。发现连续5个1时，就把后面的0删除。</li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212224944798.png" alt="零比特填充法"></p><p>特点：保证了透明传输，在传送的比特流中可以<code>传送任意比特组合</code>，而不会引起对帧边界的判断错误。</p></li><li><h5 id="违规编码法"><a href="#违规编码法" class="headerlink" title="违规编码法"></a>违规编码法</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212225100510.png" alt="违规编码法"></p></li><li><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>由于字节计数法中Count字段的脆弱性(其值若有差错将导致灾难性后果)及字符填充实现上的复杂性和不兼容性，<code>目前较普遍使用的帧同步法是比特填充和违规编码法</code>。</p></li></ol><h3 id="3-3-1-差错控制"><a href="#3-3-1-差错控制" class="headerlink" title="3.3.1 差错控制"></a>3.3.1 差错控制</h3><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212234912222.png" alt="差错控制"></p><blockquote><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<code>误码率</code>BER (Bit Error Rate)。</p></blockquote><h4 id="1-差错来源-amp-解决"><a href="#1-差错来源-amp-解决" class="headerlink" title="1).差错来源 &amp; 解决"></a>1).差错来源 &amp; 解决</h4><ol><li>全局性<ul><li> 由于线路本身电气特性所产生的<code>随机噪声(热噪声)</code>，是信道固有的，随机存在的。</li><li> 解决办法：提高信噪比来减少或避免干扰。(对传感器下手)</li></ul></li><li>局部性<ul><li>外界特定的短暂原因所造成的冲击噪声，是产生差错的主要原因。</li><li>解决办法：通常利用编码技术来解决。</li></ul></li></ol><h4 id="2-差错"><a href="#2-差错" class="headerlink" title="2).差错"></a>2).差错</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212225520087.png" alt="差错"></p><h4 id="3-差错控制（比特错）"><a href="#3-差错控制（比特错）" class="headerlink" title="3).差错控制（比特错）"></a>3).差错控制（<code>比特错</code>）</h4><ol><li><h5 id="检错编码"><a href="#检错编码" class="headerlink" title="检错编码"></a>检错编码</h5><ul><li><h6 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212230456367.png" alt="奇偶校验码"></p><p>特点：<code>只能检查出奇数个比特错误，检错能力为50%</code>。</p></li><li><h6 id="循环冗余码CRC"><a href="#循环冗余码CRC" class="headerlink" title="循环冗余码CRC"></a>循环冗余码CRC</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212230806953.png" alt="循环冗余码CRC"></p><p><code>最终发送的数据：要发送的数据+帧检验序列FCS(冗余码)</code></p></li><li><p>例题：要发送的数据是1101 0110 11，采用CRC校验，生成多项式是10011，那么最终发送的数据应该是?</p><blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212232022192.png" alt="答案与解析1"></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212232124062.png" alt="答案与解析2"></p></blockquote></li><li><p>在数据链路层仅仅使用循环冗余检验CRC差错检测技术，只能做到对帧的<code>无差错接收</code>，即“凡是接收端数据链路层接受的帧，我们都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错”。接收端丢弃的帧虽然曾收到了，但是最终还是因为有差错被丢弃。“凡是接收端数据链路层接收的帧均无差错”。<code>链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输</code>。(可靠传输：不重复，不丢失，不失序)</p></li></ul></li><li><h5 id="纠错编码"><a href="#纠错编码" class="headerlink" title="纠错编码"></a>纠错编码</h5><ul><li><h6 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h6><ol><li><p>特点：<code>发现双比特错，纠正单比特错</code>。</p></li><li><p>工作原理：动一发而牵全身</p></li><li><p>工作流程：</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212232858416.png" alt="海明码工作流程"></p><ul><li><p>确认校验码位数r</p><blockquote><p>海明不等式：2<sup>r</sup> $\geq$  k + r + 1,，其中为冗余信息位，k为信息位</p></blockquote></li><li><p>确认校验码和数据的位置</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212233841320.png" alt="确认校验码和数据的位置"></p></li><li><p>求校验码的值</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212234356641.png" alt="求校验码的值"></p></li><li><p>检错并纠错</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212234745329.png" alt="检错并纠错"></p></li></ul></li></ol></li></ul></li></ol><blockquote><p><code>数据链路层编码和物理层的数据编码与调制不同</code>。物理层编码针对的是<code>单个比特</code>，解决传输过程中比特的同步等问题，如曼彻斯特编码。而数据链路层的编码针对的是<code>一组比特</code>，它通过冗余码的技术实现一组二进制比特串在传输过程是否出现了差错。</p></blockquote><h4 id="4-流量控制和可靠传输"><a href="#4-流量控制和可靠传输" class="headerlink" title="4).流量控制和可靠传输"></a>4).流量控制和可靠传输</h4><ol><li><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>较高的发送速度和较低的接收能力的不匹配，会造成传输出错。所以需要控制发送速率，使接收方有足够的缓冲空间来接收每一个帧。</p><blockquote><p><code>数据链路层</code>的流量控制是<code>点对点</code>的，而<code>传输层</code>的流量控制是<code>端到端</code>的。<br>数据链路层流量控制手段：<code>接收方收不下就不回复确认</code>。<br>传输层流量控制手段：接收端给发送端一个<code>窗口公告</code>。</p></blockquote></li><li><h5 id="流量控制的方法"><a href="#流量控制的方法" class="headerlink" title="流量控制的方法"></a>流量控制的方法</h5><table><thead><tr><th align="center">流量控制的方法</th><th>窗口大小</th></tr></thead><tbody><tr><td align="center">停止等待协议</td><td>发送窗口大小=1，接收窗口大小=1;</td></tr><tr><td align="center">后退N帧协议(GBN)</td><td>发送窗口大小&gt;1， 接收窗口大小=1:</td></tr><tr><td align="center">选择重传协议(SR)</td><td>发送窗口大小&gt;1， 接收窗口大小&gt;1;</td></tr></tbody></table><ul><li><h6 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h6><p>停止等待协议即每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧。</p><blockquote><ol><li><p>发完一个帧后，必须保留它的副本。</p></li><li><p>数据帧和确认帧必须编号。</p></li></ol></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215151144551.png" alt="停止-等待协议示意图"></p><p>​    应用情形 一：无差错情况</p><ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215160457720.png" alt="无差错情况"></li></ul><p>​     应用情形二：数据帧丢失或检测到帧出错</p><ul><li><code>超时计时器设置的重传时间应当比帧传输的平均RTT更长一些</code>。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215160801370.png" alt="image-20211215160801370"></li></ul><p>​     应用情形三：ACK丢失</p><ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215160357775.png" alt="ACK丢失示意图"></li></ul><p>​     应用情形四：ACK迟到</p><ul><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215160329541.png" alt="ACK迟到示意图"></li></ul><p>停止-等待协议的特点</p><ul><li>优点：简单</li><li>缺点：<code>信道利用率低</code></li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215161151775.png" alt="停止-等待协议的信道利用率"></li></ul></li><li><h6 id="后退N帧协议-GBN"><a href="#后退N帧协议-GBN" class="headerlink" title="后退N帧协议(GBN)"></a>后退N帧协议(GBN)</h6><p>待补充</p></li><li><h6 id="选择重传协议-SR"><a href="#选择重传协议-SR" class="headerlink" title="选择重传协议(SR)"></a>选择重传协议(SR)</h6><p>待补充</p></li></ul></li></ol><h3 id="3-4-点对点协议PPP"><a href="#3-4-点对点协议PPP" class="headerlink" title="3.4 点对点协议PPP"></a>3.4 点对点协议PPP</h3><table><thead><tr><th>链路种类</th><th>说明</th><th></th></tr></thead><tbody><tr><td>点对点链路</td><td>两个相邻节点通过一个链路相连，没有第三者。</td><td>PPP协议，常用于广域网。</td></tr><tr><td>广播式链路</td><td>所有主机共享通信介质。</td><td>早期的总线以太网、无线局域网，常用于局域网。</td></tr></tbody></table><h4 id="1-PPP协议的特点"><a href="#1-PPP协议的特点" class="headerlink" title="1).PPP协议的特点"></a>1).PPP协议的特点</h4><ul><li>对于点对点的链路，目前使用<code>最广泛的数据链路层协议是点对点协议PPP</code> (Point-to-Point Protocol)。</li><li>用户使用拨号电话线接入互联网时，用户计算机和ISP进行通信时所使用的数据链路层协议就是PPP协议。</li><li>PPP协议在1994年就已成为互联网的正式标准。</li></ul><h4 id="2-PPP协议的帧格式"><a href="#2-PPP协议的帧格式" class="headerlink" title="2).PPP协议的帧格式"></a>2).PPP协议的帧格式</h4><ul><li><p>PPP帧的首部和尾部分别为4个字段和2个字段。</p></li><li><p>标志字段F= 0x7E (符号“0x”表示后面的字符是用十六进制表示。十六进制的7E的二进制表示是01111110)。</p></li><li><p>地址字段A只置为0xFF。地址字段实际上并不起作用。</p></li><li><p>控制字段C通常置为0x03。</p><blockquote><p>PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。</p></blockquote></li></ul><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215212257933.png" alt="PPP的帧格式"></p><h4 id="3-PPP协议实现透明传输"><a href="#3-PPP协议实现透明传输" class="headerlink" title="3).PPP协议实现透明传输"></a>3).PPP协议实现透明传输</h4><ul><li><p>当PPP用在<code>同步传输</code>链路时，协议规定采用<code>硬件</code>来完成<code>比特填充</code>(和HDLC的做法一样)。</p><blockquote><p>PPP协议采用<code>零比特填充法</code>来实现透明传输。</p></blockquote></li><li><p>当PPP用在<code>异步传输</code>时，就使用一种特殊的<code>字符填充法</code>。</p><ol><li>将信息字段中出现的每一-个0x7E字节转变成为2字节序列(0x7D,0x5E)。</li><li>若信息字段中出现–个0x7D的字节，则将其转变成为2字节序列(0x7D, 0x5D)。</li><li>若信息字段中出现ASCII码的控制字符(即数值小于0x20的字符)，则在该字符前面要加入一个0x7D字节，同时将该字符的编码加以改变。</li></ol></li></ul><h4 id="4-PPP协议的工作状态（了解）"><a href="#4-PPP协议的工作状态（了解）" class="headerlink" title="4).PPP协议的工作状态（了解）"></a>4).PPP协议的工作状态（了解）</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215214554160.png" alt="PPP协议的工作状态"></p><h3 id="3-5-1-局域网的数据链路层"><a href="#3-5-1-局域网的数据链路层" class="headerlink" title="3.5.1 局域网的数据链路层"></a>3.5.1 局域网的数据链路层</h3><h4 id="1-局域网主要特点"><a href="#1-局域网主要特点" class="headerlink" title="1).局域网主要特点"></a>1).局域网主要特点</h4><ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限；</li></ul><h4 id="2-局域网的主要优点"><a href="#2-局域网的主要优点" class="headerlink" title="2).局域网的主要优点"></a>2).局域网的主要优点</h4><ul><li>具有<code>广播功能</code>，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul><h4 id="3-局域网的拓扑结构"><a href="#3-局域网的拓扑结构" class="headerlink" title="3).局域网的拓扑结构"></a>3).局域网的拓扑结构</h4><ul><li><p>现在主要是<code>星型拓扑结构</code>，总线型、树型和环型不再使用。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215215040667.png" alt="局域网的拓扑结构"></p></li></ul><table><thead><tr><th>网络拓扑结构</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>星型拓扑结构</td><td>结构简单，可扩充性强； 故障的检测和隔离方便。</td><td>需要大量电缆，因此费用较高； 中央结点产生故障，则全网不能工作。</td></tr><tr><td>总线拓扑</td><td>结构简单，实现容易； 易于安装维护</td><td>传输介质故障难以排除； 总线故障都会导致全网瘫痪</td></tr><tr><td>环形拓扑</td><td>能够较有效地避免冲突</td><td>环形结构中的网卡等通信部件比较昂贵且管理复杂</td></tr><tr><td>树形拓扑</td><td>易于扩展； 故障隔离方便。</td><td>根结点发生故障，全网瘫痪</td></tr></tbody></table><h4 id="4-数据链路层的两个子层"><a href="#4-数据链路层的两个子层" class="headerlink" title="4).数据链路层的两个子层"></a>4).数据链路层的两个子层</h4><ul><li><p><code>一般不考虑LLC子层，所以主要是MAC子层。</code></p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215215616867.png" alt="数据链路层的两个子层"></p></li></ul><h4 id="5-通信适配器的作用"><a href="#5-通信适配器的作用" class="headerlink" title="5).通信适配器的作用"></a>5).通信适配器的作用</h4><ul><li><p>网络接口板又称为通信适配器 (adapter) 或网络接口卡NIC (Network Interface Card)，或“<code>网卡</code>”。</p></li><li><p>适配器的重要功能:</p><ol><li>进行串行/并行转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装设备驱动程序。</li><li>实现以太网协议。</li></ol></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215220401552.png" alt="计算机通过适配器和局域网进行通信"></p></li></ul><h3 id="3-5-2-以太网"><a href="#3-5-2-以太网" class="headerlink" title="3.5.2 以太网"></a>3.5.2 以太网</h3><blockquote><p>以太网是一种计算机局域网技术。<code>IEEE组织的IEEE 802.3标准制定了以太网的技术标准</code>，它规定了包括物理层的连线、电子信号和介质访问层协议的内容。以太网是应用最普遍的局域网技术，取代了其他局域网技术如令牌环、FDDI和ARCNET。</p></blockquote><h4 id="1-以太网采用广播方式发送"><a href="#1-以太网采用广播方式发送" class="headerlink" title="1).以太网采用广播方式发送"></a>1).以太网采用广播方式发送</h4><ul><li>总线上的每一个工作的计算机都能检测到B发送的数据信号。</li><li>由于只有计算机D的地址与数据帧首部写入的地址一致，因此只有D才接收这个数据帧。</li><li>其他所有的计算机(A, C和E)都检测到不是发送给它们的数据帧，因此就丢弃这个数据帧而不能够收下来。</li><li>在具有广播特性的总线上实现了一对一的通信。</li></ul><h4 id="2-以太网提供的服务"><a href="#2-以太网提供的服务" class="headerlink" title="2).以太网提供的服务"></a>2).以太网提供的服务</h4><ul><li>以太网提供的服务是不可靠的交付，即尽最大努力的交付。</li><li>当目的站收到有差错的数据帧时就丢弃此帧,其他什么也不做。差错的纠正由高层来决定。</li><li>如果高层发现丢失了一 些数据而进行重传，但以太网并不知道这是一-个重传的帧，而是当作一-个新的数据帧来发送。</li></ul><h4 id="3-以太网为了简便采取的两项措施"><a href="#3-以太网为了简便采取的两项措施" class="headerlink" title="3).以太网为了简便采取的两项措施"></a>3).以太网为了简便采取的两项措施</h4><ol><li>采用较为灵活的<code>无连接的工作方式</code>。<ul><li>不必先建立连接就可以直接发送数据。</li><li>对发送的数据帧不进行编号，也不要求对方发回确认。</li><li>这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。</li></ul></li><li>以太网发送的数据都使用<code>曼彻斯特</code>(Manchester)编码。</li></ol><h3 id="3-5-3-CSMA-CD协议"><a href="#3-5-3-CSMA-CD协议" class="headerlink" title="3.5.3 CSMA/CD协议"></a>3.5.3 CSMA/CD协议</h3><blockquote><p>CSMA/CD含义：载波监听多点接入/碰撞检测 (Carrier Sense Multiple Access with Collision Detection)。</p></blockquote><h4 id="1-载波监听多点接入-碰撞检测"><a href="#1-载波监听多点接入-碰撞检测" class="headerlink" title="1).载波监听多点接入/碰撞检测"></a>1).载波监听多点接入/碰撞检测</h4><ol><li>“多点接入”表示许多计算机以多点接入的方式连接在一根总线上。</li><li>“载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。总线上并没有什么“载波”。因此，“ 载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</li><li>“碰撞检测”就是计算机一边发送数据一边检测信道上的信号电压大小。<ul><li>当几个站同时在总线上发送数据时，总线.上的信号电压摆动值将会增大(互相叠加)当一个站检测到的信号电压摆动值超过一定的门门限值时，就认为总线上至少有两个站同时在发送数据/表明产生了碰撞。<code>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</code></li></ul></li><li>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要<code>立即停止发送</code>，免得继续浪费网络资源，然后等待一段<code>随机时间</code>后再次发送。</li></ol><h4 id="2-CSMA-CD协议的特征"><a href="#2-CSMA-CD协议的特征" class="headerlink" title="2).CSMA/CD协议的特征"></a>2).CSMA/CD协议的特征</h4><ol><li>使用CSMA/CD协议的以太网<code>不能进行全双工通信，而只能进行双向交替通信(半双工通信)</code>。</li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种<code>发送的不确定性</code>使整个以太网的平均通信率远小于以太网的最高数据率。</li></ol><h4 id="3-碰撞检测的时间"><a href="#3-碰撞检测的时间" class="headerlink" title="3).碰撞检测的时间"></a>3).碰撞检测的时间</h4><ul><li><p>最先发送数据帧的站，在发送数据帧后<code>至多</code>经过时间<code>2τ (两倍的端到端往返时延)</code>就可知道发送的数据帧是否遭受了碰撞。</p></li><li><p>以太网的端到端往返时延<code>2r称为争用期</code>，或碰撞窗口。</p><blockquote><p>经过<code>争用期这段时间还没有检测到碰撞</code>，才能肯定这次发送不会发生碰撞。</p></blockquote></li><li><p>对于 10 Mb/s 以太网，取 <code>51.2</code> $\mu$s 为争用期的长度。</p></li><li><p> 对于 10 Mb/s 以太网，在争用期内可发送512 bit， 即 64 字节。 也可以说，争用期是512比特发送时间。</p></li></ul><blockquote><p>以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。</p></blockquote><ul><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211215225446478.png" alt="碰撞检测的时间"></p><blockquote><p><em><strong>最短有效帧长：</strong></em></p><ul><li>如果发生冲突，就一定是在发送的前 64 字节之内。 由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于 64 字节。 </li><li><code>以太网规定了最短有效帧长为 64 字节，凡长度小于 64 字节的帧都是由于冲突而异常中止的无效帧</code>，会被丢弃。</li></ul><p><em><strong>帧间最小间隔：</strong></em></p><ul><li>帧间最小间隔为 <code>9.6</code> $\mu$s ，相当于 96 bit 的发送时间。</li><li><code>一个站在检测到总线开始空闲后，还要等待 9.6 $\mu$s  才能 再次发送数据</code>。 这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</li></ul></blockquote></li></ul><h4 id="4-碰撞之后的处理办法"><a href="#4-碰撞之后的处理办法" class="headerlink" title="4).碰撞之后的处理办法"></a>4).碰撞之后的处理办法</h4><ol><li><p>二进制指数类型退避算法</p><p> 发生碰撞的站在停止发送数据后，要推迟(退避)一个<code>随机时间</code>才能再发送数据。</p><ul><li>基本退避时间取为争用期2$\zeta$</li><li>从整数集合[0,1,….. (2<sup>k</sup>-1)]中随机地取出一个数，记为 r<sub>0 </sub>。<code>重传所需的时延就是 r&lt;sub&gt;0&lt;/sub&gt; 倍的基本退避时间</code>。</li><li>参数k按下面的公式计算：<code>k = Min[重传次数，10]</code></li><li>当k≤10时，参数k等于重传次数。</li><li>当重传达<code>16次</code>仍不能成功时即丢弃该帧，并向高层报告。</li></ul></li></ol><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5).总结"></a>5).总结</h4><ol><li><strong>准备发送</strong>。但在发送之前，必须先检测信道。</li><li><strong>检测信道</strong>。若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在<code>96比特时间</code>（即9.6 $\mu$s ）内信道保持空闲(保证了帧间最小间隔)，就发送这个帧。</li><li><strong>检查碰撞</strong>。在发送过程中仍不停地检测信道，即网络适配器要边发送边监听。这里只有两种可能性:<br>① 发送成功：在争用期内一直未检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到1。<br>② 发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着就执行指数退避算法，等待r倍512比特时间后，返回到步骤2，继续检测信道。但若重传达<code>16次</code>仍不能成功，则<code>停止重传而向上报错</code>。</li></ol><blockquote><p><em><strong>先听后发，边听边发，冲突停止，延迟重发</strong></em></p></blockquote><h3 id="3-5-4-以太网的信道利用率"><a href="#3-5-4-以太网的信道利用率" class="headerlink" title="3.5.4 以太网的信道利用率"></a>3.5.4 以太网的信道利用率</h3><blockquote><p>假设：</p><ul><li>争用期长度为 2  $\zeta$ ，即端到端传播时延的两倍</li><li>检测到碰撞后不发送干扰信号</li><li>帧长为 L (bit)，数据发送速率为 C (b/s)</li><li>帧的发送时间为T<sub>0</sub>= L/C (s)</li></ul></blockquote><h4 id="1-发送一帧所需的平均时间"><a href="#1-发送一帧所需的平均时间" class="headerlink" title="1).发送一帧所需的平均时间"></a>1).发送一帧所需的平均时间</h4><ul><li><p>一个帧从开始发送，经可能发生的碰撞后，将再重传数次（N个争用期），到发送成功且信道转为空闲（即再经过时间  $\zeta$ 使得信道上无信号在传播）时的平均时间。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216155744847.png" alt="发送一帧所需的平均时间"></p><blockquote><p>信道（平均）利用率 = ${T_0\over N*2\zeta+\zeta+T}$</p></blockquote></li></ul><h4 id="2-以太网的参数α"><a href="#2-以太网的参数α" class="headerlink" title="2).以太网的参数α"></a>2).以太网的参数α</h4><ul><li><p>在以太网中定义了参数 α ，它是<code>以太网单程端到端时延</code> $\zeta$与<code>帧的发送时间</code> T<sub>0</sub>之比：</p><blockquote><p>α=${\zeta\over T_0}$=${\zeta\over L/C}$=${\zeta*C\over L}$</p></blockquote></li><li><p>α→0 表示一发生碰撞就立即可以检测出来，并立即停止发送，因而<code>信道利用率很高</code>。</p></li><li><p><code>α越大</code>，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得<code>信道利用率明显降低</code>.</p></li><li><p><strong>结论</strong>：要提高以太网的信道利用率，就必须减小 $\zeta$ 与 T<sub>0</sub>之比，即α。</p></li><li><p><strong>要求</strong>：</p><ol><li>当信号速率V一定时，以太网连线的长度S受到限制，否则 $\zeta$的数值会太大。</li><li> 当数据发送速率C一定时，以太网的帧长L不能太短，否则T<sub>0</sub>的值会太小，使α 值太大。</li></ol></li></ul><h4 id="2-信道利用率的最大值-Smax"><a href="#2-信道利用率的最大值-Smax" class="headerlink" title="2).信道利用率的最大值 Smax"></a>2).信道利用率的最大值 S<sub>max</sub></h4><ul><li><p>在理想化的情况下，以太网上的各站发送数据都不会产生碰撞（这显然已经不是 CSMA/CD，而是需要使用一种特殊的调度方法），即总线一旦空闲就有某一个站立即发送数据。</p></li><li><p>发送一帧占用线路的时间是 T<sub>0</sub>+ $\zeta$，而帧本身的发送时间是 T<sub>0</sub>。于是可计算出理想情况下的极限信道利用率 S<sub>max</sub>为：</p><blockquote><p>S<sub>max</sub>=${T_0\over T_0+\zeta}$ = ${1\over 1+α}$</p><ul><li>只有当参数a远小于1才能得到尽可能高的极限信道利用率。</li><li>据统计，当以太网的利用率达到30%时就已经处于重载的情况。很多的网络容量被网上的碰撞消耗掉了</li></ul></blockquote></li></ul><h3 id="3-5-5-以太网的-MAC-层"><a href="#3-5-5-以太网的-MAC-层" class="headerlink" title="3.5.5 以太网的 MAC 层"></a>3.5.5 以太网的 MAC 层</h3><h4 id="1-MAC-层的硬件地址"><a href="#1-MAC-层的硬件地址" class="headerlink" title="1).MAC 层的硬件地址"></a>1).MAC 层的硬件地址</h4><ul><li>MAC 层的<code>硬件地址</code>是识别LAN节点的标识（一种编码），网络根据硬件地址地址来区分不同的设备。</li><li><code>以太网的MAC地址长48位，以十六进制表示</code>。这种 48 位地址称为 MAC-48，它的通用名称是EUI-48。</li><li>IEEE注册管理机构RA 负责向厂家分配地址字段的<code>前三个字节(即高位 24 位)</code>，称为机构唯一标志符 OUI。</li><li>对于厂家生产的每一块网卡来说，这个地址是唯一的、全局的地址字段中的后三个字节(即低位 24 位)由厂家自行指派，称为扩展标识符EUI，厂家必须保证生产出的<code>网络适配器没有重复地址</code>。</li></ul><h4 id="2-网络设备的硬件地址"><a href="#2-网络设备的硬件地址" class="headerlink" title="2).网络设备的硬件地址"></a>2).网络设备的硬件地址</h4><blockquote><p><code>每个发送数据的主机、接收数据的主机、路由器的每个端口</code>都需要硬件地址，且<code>一个网卡对应一个硬件地址</code>；</p><p><code>集线器、网桥、交换机不需要硬件地址</code>；</p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216162540838.png" alt="网络设备的硬件地址"></p><h4 id="3-适配器检查-MAC-地址"><a href="#3-适配器检查-MAC-地址" class="headerlink" title="3).适配器检查 MAC 地址"></a>3).适配器检查 MAC 地址</h4><ul><li><p>适配器从网络上每收到一个 MAC 帧就首先用<code>硬件检查</code>MAC 帧中的 MAC 地址.</p><ul><li>如果是发往<code>本站的帧则收下</code>，然后再进行其他的处理。</li><li><code>否则就将此帧丢弃</code>，不再进行其他的处理。</li></ul></li><li><p>“发往本站的帧”包括以下三种帧：</p><ul><li>单播(unicast)帧（一对一）</li><li>多播(multicast)帧（一对多）</li><li>广播(broadcast)帧（一对全体）</li></ul></li></ul><h4 id="4-MAC-帧的格式"><a href="#4-MAC-帧的格式" class="headerlink" title="4).MAC 帧的格式"></a>4).MAC 帧的格式</h4><ul><li><p>常用的以太网MAC帧格式有两种标准：</p><blockquote><p>DIX Ethernet V2 标准  (<code>最常用</code>)<br>IEEE 的 802.3 标准</p></blockquote></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216163516456.png" alt="MAC 帧的格式"></p></li></ul><h4 id="5-无效的-MAC-帧"><a href="#5-无效的-MAC-帧" class="headerlink" title="5).无效的 MAC 帧"></a>5).无效的 MAC 帧</h4><ul><li>数据字段的长度与长度字段（802.3 MAC帧）的值不一致 ；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li><code>数据字段的长度不在 46 ~ 1500 字节之间</code>。</li><li><code>有效的 MAC 帧长度为 64 ~ 1518 字节之间</code>。</li></ul><blockquote><p><strong>无效的 MAC 帧的处理</strong>：</p><ul><li>对于检查出的无效 MAC 帧就简单地<code>丢弃</code>。<code>以太网不负责重传丢弃的帧</code>。</li></ul></blockquote><h3 id="3-6-1-以太网的扩展"><a href="#3-6-1-以太网的扩展" class="headerlink" title="3.6.1 以太网的扩展"></a>3.6.1 以太网的扩展</h3><h4 id="1-以太网互连的必要性及要解决的问题"><a href="#1-以太网互连的必要性及要解决的问题" class="headerlink" title="1).以太网互连的必要性及要解决的问题"></a>1).以太网互连的必要性及要解决的问题</h4><ul><li>LAN互连的必要性：地域限制、负载问题、互通问题、安全问题</li><li>LAN互连的困难：帧格式不同、传输速率不同、最大帧长不同</li><li>LAN互连的实现：<ul><li>中继器/集线器(HUB) － 在物理层上实现互联；</li><li>网桥 － 在数据链路层上实现互联；</li><li>交换机 － 在数据链路层上实现互联；</li><li>路由器 － 在网络层上实现互联；</li><li>网关 －在运输层及以上层实现互联；</li></ul></li></ul><h4 id="2-在物理层扩展以太网"><a href="#2-在物理层扩展以太网" class="headerlink" title="2).在物理层扩展以太网"></a>2).在物理层扩展以太网</h4><ol><li><h5 id="集线器的特点"><a href="#集线器的特点" class="headerlink" title="集线器的特点"></a>集线器的特点</h5><ul><li>集线器是使用电子器件来<code>模拟实际电缆线</code>的工作，因此整个系统仍然像一个传统的以太网那样运行。即，<code>使用集线器的以太网在逻辑上仍是一个总线网</code>，各工作站使用的还是 CSMA/CD 协议，并共享逻辑上的总线。</li><li>集线器的同一时刻每一个端口（的设备）只能进行一个方向的数据通信。</li><li>集线器很像一个<code>多接口的转发器，工作在物理层</code>。它发送数据时都是没有针对性的，而是采用广播方式发送</li><li>集线器的端口<code>共享带宽</code>（如果两个设备共享10M的集线器，那么每个设备就只有5M的平均带宽）</li><li>依据IEEE 802.3协议，集线器功能是随机选出某一端口的设备，并让它独占全部带宽，与集线器的上联设备(交换机、路由器或服务器等)进行通信。</li><li>集线器（Hub）设备不能识别MAC地址和IP地址，对接收到的数据以广播的形式发送，<code>它的所有端口为一个碰撞域，同时也为一个广播域</code>。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216170557340.png" alt="碰撞域"></li></ul></li><li><h5 id="广播域与冲突域"><a href="#广播域与冲突域" class="headerlink" title="广播域与冲突域"></a>广播域与冲突域</h5></li></ol><ul><li>广播域<ul><li>广播是一种信息的传播方式，网络中的某一设备同时向网络中所有的其它设备发送数据，这个数据所能广播到的范围即为广播域(Broadcast Domain)。简单来说，广播域就是指网络中所有能接收到同样广播消息的设备的集合。</li></ul></li><li>冲突域（碰撞域）<ul><li>在以太网中，如果某个网络上的两台计算机在同时通信时会发生冲突，那么这个网络就是一个冲突域（碰撞域）（Collision Domain)。。所有的共享介质环境都是冲突域。</li><li>所有的共享介质环境都是冲突域。</li></ul></li></ul><ol start="3"><li><h5 id="用集线器扩展以太网的优缺点"><a href="#用集线器扩展以太网的优缺点" class="headerlink" title="用集线器扩展以太网的优缺点"></a>用集线器扩展以太网的优缺点</h5><ul><li>优点<ul><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ul></li><li>缺点<ul><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ul></li></ul></li></ol><h4 id="3-在数据链路层扩展以太网"><a href="#3-在数据链路层扩展以太网" class="headerlink" title="3).在数据链路层扩展以太网"></a>3).在数据链路层扩展以太网</h4><ol><li><h5 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h5><ul><li>1990 年问世的交换式集线器(switching hub)，可明显地提高以太网的性能。</li><li>交换式集线器常称为以太网交换机(switch)或第二层交换机（表明此交换机工作在数据链路层）。</li></ul></li><li><h5 id="以太网交换机的特点"><a href="#以太网交换机的特点" class="headerlink" title="以太网交换机的特点"></a>以太网交换机的特点</h5><ul><li>以太网交换机通常都有<code>十几个接口，每个接口都直接与主机相连</code>，并且一般都工作在<code>全双工方式</code>。</li><li>交换机能同时连通许多对的接口，使<code>每一对相互通信的主机都能像独占通信媒体那样，无碰撞地传输数据</code>。</li><li>以太网交换机<code>具有并行性</code>。能同时连通多对接口，<code>使多对主机能同时通信</code>。</li><li>以太网交换机的直通交换方式。接收数据帧的同时就<code>立即按数据帧的目的MAC地址决定该帧的转发接口</code>，因而提高了帧的转发速度。但是<code>它不检查差错就直接将帧转发出去</code>，因此有可能也将–些无效帧转发给其他的站。</li><li>以太网交换机是一种<code>存储转发设备</code>，接口含有存储器，对收到的帧进行缓存。</li><li>以太网交换机是一种<code>即插即用设备</code>，其内部的<code>帧交换表</code>(又称为地址表)是通过<code>自学习算法</code>自动地逐渐建立起来的。</li></ul></li><li><h5 id="以太网交换机的优点"><a href="#以太网交换机的优点" class="headerlink" title="以太网交换机的优点"></a>以太网交换机的优点</h5><ul><li><code>用户独享带宽，增加了总容量</code>。<ul><li>对于普通10 Mbit/s的共享式以太网，若共有N个用户，则每个用户占有的平均带宽只有`总带宽(10Mbit/s)的N分之一。</li><li>使用以太网交换机时，虽然在每个接口到主机的带宽还是10Mbit/s，但由于一个用户在通信时是独占而不是和其他网络用户共享传输媒体的带宽，因此对于拥有N个接口的交换机的总容量为<code>Nx10Mbit/</code>s。</li></ul></li><li>从共享总线以太网转到交换式以太网时，所有接入设备的软件和硬件、适配器等都不需要做任何改动。</li><li>以太网交换机一般都具有多种速率的接口，方便了各种不同情况的用户。</li></ul></li><li><h5 id="以太网交换机的转发过程"><a href="#以太网交换机的转发过程" class="headerlink" title="以太网交换机的转发过程 **"></a>以太网交换机的转发过程 **</h5><ul><li>交换机根据数据帧中封装的目的地MAC地址做出转发数据的决定</li><li>当交换机从某个接口收到数据帧后，读取数据帧中封装的目的MAC地址，然后查阅<code>MAC地址表</code>，匹配MAC地址：<ul><li><strong>若有匹配的MAC地址</strong>，则<ol><li>找出和目的地址相对应的接口，从该接口把数据转发出去，其他接口不受影响</li><li>若转发表中给出的接口就是该帧进入交换机的接口，则丢弃这个帧（因为这时不需要经过交换机进行转发）</li></ol></li><li><strong>若没有匹配的MAC地址</strong>，则<ol><li>采取<code>广播方式</code>向除了数据帧来的端口外的其他所有端口转发该数据帧</li><li><code>自学习</code>——将该数据帧中的源MAC地址与收到该帧的接口作为新记录添加到MAC地址表</li></ol></li></ul></li></ul></li><li><h5 id="交换机自学习功能"><a href="#交换机自学习功能" class="headerlink" title="交换机自学习功能"></a>交换机自学习功能</h5><ol><li><strong>地址表的形成</strong></li></ol><ul><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216190539431.png" alt="自学习过程例图"></p></li><li><p>T1时间：A→D发送帧，交换机的MAC地址表记下如下记录：</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216193449044.png" alt="T1时间的地址表"></p></li><li><p>T2时间：B→C发送帧，交换机的MAC地址表记下如下记录：</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216193538064.png" alt="T2时间的地址表"></p></li><li><p>假设经过一段时间，ABCD四个站都发送了帧，则交换机得到了这四个站点的MAC地址</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216193713708.png" alt="T3时间的地址表"></p><blockquote><p>交换表表项中有一项是有效时间</p><ul><li>主要是考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<code>有效时间</code>。<code>过期的项目就自动被删除</code>。</li></ul></blockquote></li></ul></li><li><h5 id="交换机的生成树协议"><a href="#交换机的生成树协议" class="headerlink" title="交换机的生成树协议"></a>交换机的生成树协议</h5><ul><li>IEEE 802.1D标准制定了一个<code>生成树协议STP</code>(Spanning Tree Protocol)。</li><li>其要点是：<code>不改变网络的实际拓扑，但在逻辑上则切断某些链路</code>，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而消除了兜圈子现象。</li></ul></li></ol><h3 id="3-6-2-虚拟局域网（VLAN）"><a href="#3-6-2-虚拟局域网（VLAN）" class="headerlink" title="3.6.2 虚拟局域网（VLAN）"></a>3.6.2 虚拟局域网（VLAN）</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1).概念"></a>1).概念</h4><ul><li><p>虚拟局域网VLAN（Virtual Local Area Network）是由一些局域网网段构成的与物理位置无关的逻辑组。</p><ul><li>这些网段具有某些共同的需求。</li><li>每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。</li></ul></li><li><p>虚拟局域网其实只是局域网给用户提供的一种服务，而并<code>不是一种新型局域网</code>，通过在<code>MAC帧的首部添加一些内容</code>进行不同虚拟局域网的区分。</p></li><li><p>虚拟局域网通过配置交换机来实现。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211216200255845.png" alt="虚拟局域网"></p></li></ul><h4 id="2-划分VLAN方法"><a href="#2-划分VLAN方法" class="headerlink" title="2).划分VLAN方法"></a>2).划分VLAN方法</h4><ul><li><strong>基于端口划分VLAN</strong>——按交换机端口定义VLAN成员，每个端口只能属于一个VLAN。</li><li><strong>基于 MAC地址划分VLAN</strong>——按每个连接到交换机设备的MAC地址（物理地址）定义VLAN成员。一个交换机端口有可能属于多个VLAN。</li><li><strong>基于第三层协议类型或地址划分VLAN</strong>——允许按照网络层协议类型（TCP/IP、IPX、DECNET等）组成VLAN，也可以按网络地址（如TCP/IP 的子网地址）定义VLAN成员。这种方法的优点是有利于组成基于应用的VLAN。</li></ul><h4 id="3-划分VLAN的益处"><a href="#3-划分VLAN的益处" class="headerlink" title="3).划分VLAN的益处"></a>3).划分VLAN的益处</h4><ul><li><strong>控制广播风暴</strong>。一个VLAN就是一个逻辑广播域，通过对VLAN的创建，隔离了广播，缩小了广播范围，可以控制广播风暴的产生。</li><li><strong>提高网络整体安全性</strong>。通过路由访问列表和MAC地址分配等VLAN划分原则，可以控制用户访问权限和逻辑网段大小，将不同用户群划分在不同VLAN，从而提高交换式网络的整体性能和安全性。</li><li><strong>网络管理简单直观</strong>。一个VLAN可以根据部门职能、对象组或者应用将不同地理位置的网络用户划分为一个逻辑网段。在不改动网络物理连接的情况下可以任意地将工作站在工作组或子网之间移动。利用虚拟网络技术，大大减轻了网络管理和维护工作的负担，降低了网络维护费用。</li></ul><h3 id="3-7-高速以太网"><a href="#3-7-高速以太网" class="headerlink" title="3.7 高速以太网"></a>3.7 高速以太网</h3><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1).概念"></a>1).概念</h4><ul><li>速率达到或超过 100 Mb/s 的以太网称为高速以太网。</li><li>在双绞线上传送 100 Mb/s 基带信号的星型拓扑以太网，仍使用 IEEE 802.3 的CSMA/CD 协议。</li><li>100BASE-T 以太网又称为快速以太网(Fast Ethernet)。</li></ul><h4 id="2-100BASE-T-以太网的特点"><a href="#2-100BASE-T-以太网的特点" class="headerlink" title="2).100BASE-T 以太网的特点"></a>2).100BASE-T 以太网的特点</h4><ul><li><p>可在全双工方式下工作而无冲突发生，此事，CSMA/CD 协议<br>不起作用。</p></li><li><p>MAC 帧格式遵循 802.3 标准。</p></li><li><p>基于公式：</p><blockquote><p>α=${\zeta\over T_0}$=${\zeta\over L/C}$=${\zeta*C\over L}$</p></blockquote><ul><li><p>由于C从原来的10Mb/s提高到100Mb/s，所以</p><ul><li><p>保持最短帧长（ 64KB，512bit ）不变</p></li><li><p>一个网段的最大电缆长度从原来的1000m减小到 100 m。</p></li><li><p>帧间时间间隔从原来的 9.6  减小到0.96 s。</p></li><li><p>争用期从原来的 51.2 s 减小到5.12 s。</p></li></ul></li></ul></li></ul><h4 id="3-吉比特以太网特点"><a href="#3-吉比特以太网特点" class="headerlink" title="3).吉比特以太网特点"></a>3).吉比特以太网特点</h4><ul><li>允许在 1 Gb/s 下全双工和半双工两种方式工作。</li><li>使用 802.3 协议规定的帧格式。</li><li>在半双工方式下使用 CSMA/CD 协议（全双工方式不需要使用CSMA/CD 协议）。</li><li>与 10BASE-T 和 100BASE-T 技术向后兼容。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息法基础</title>
      <link href="/2021/12/13/%E4%BF%A1%E6%81%AF%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/13/%E4%BF%A1%E6%81%AF%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、专利法"><a href="#一、专利法" class="headerlink" title="一、专利法"></a>一、专利法</h3><h4 id="1-专利的特点"><a href="#1-专利的特点" class="headerlink" title="1.专利的特点"></a>1.专利的特点</h4><ol><li><p>独占性、垄断性</p></li><li><p>公开性（国防专利不适用普通意义上的专利）</p></li><li><p>法定授权性</p></li><li><p>地域限制性</p></li><li><p>时间限制性</p></li></ol><h4 id="2-专利权的特征"><a href="#2-专利权的特征" class="headerlink" title="2.专利权的特征"></a>2.专利权的特征</h4><table><thead><tr><th>特征</th><th align="left">说明</th></tr></thead><tbody><tr><td>专利权的保护对象</td><td align="left">专利权的保护对象是发明创造即发明，实用新型和外观设计</td></tr><tr><td>依法定程序授予</td><td align="left">在著作权法当中，著作权是自作品完成之时自动产生，无须履行任何程序，而专利权则不同。</td></tr><tr><td>专利权具有期限及地域限制</td><td align="left">专利权人仅在法律规定的期限内享有法律赋予的专有权，超过期限发明创造即自动进入公有领域，任何单位或个人都可以免费使用。</td></tr><tr><td>专利保护对象的公开性</td><td align="left">就私与公的关系而言，任何发明创造都并</td></tr><tr><td>特殊的专有性</td><td align="left">非凭空产生，它都是从社会公共资源库中所有的知识产权，无论著作权专利权还是商标权，都是支配权和对世权，都具有专有性。但专利权的专有性更强。相同的发明创造，只能产生一项专利权。</td></tr><tr><td>受到更多的限制性</td><td align="left">专利权由于更多地影响到技术进步与社会福利等公共利益，其专有性往往会受到法律更多的限制。</td></tr></tbody></table><h4 id="3-专利权的保护对象"><a href="#3-专利权的保护对象" class="headerlink" title="3.专利权的保护对象"></a>3.专利权的保护对象</h4><table><thead><tr><th align="left">对&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;象</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">技术方案</td><td align="left"><code>运用自然规律解决特定的生产生活问题</code>。但营销技术、立法技术等由于利用的并非自然规律，并不属于专利法的保护范围。<code>不要求已实际应用</code>，但一定具体可行。</td></tr><tr><td align="left">设计方案</td><td align="left">我国专利法还对工业产品的设计方案提供保护，即对产品的形状、图案、色彩等的结合所作出的富有美感的设计构思。</td></tr></tbody></table><h4 id="4-专利权客体"><a href="#4-专利权客体" class="headerlink" title="4.专利权客体"></a>4.专利权客体</h4><ul><li><p>专利权的客体是指能取得专利权，可以受专利法保护的发明创造。</p><blockquote><p>发明是指对产品方法或者其改进，所提出的新的技术方案。</p><p>发明可以分为产品发明和方法发明。</p></blockquote></li><li><p>授予发明、实用新型专利的实质条件</p><blockquote><p>根据我国专利法的规定，授予专利权的发明和实用新型应当具备新颖性、创造性和实用性。</p></blockquote></li></ul><h4 id="5-专利权主体"><a href="#5-专利权主体" class="headerlink" title="5.专利权主体"></a>5.专利权主体</h4><p>主体即专利权人</p><ol><li><p>职务发明创造——权利主体即为单位</p><ul><li>执行本单位的任务</li><li>主要利用本单位的物质条件</li></ul></li><li><p>非职务发明</p><ul><li>权利主体即为发明人或设计人</li></ul></li><li><p>合作发明</p><ul><li>两人以上合作完成的发明，权利主体即为共同完成的单位或个人</li></ul></li><li><p>委托完成的发明</p><ul><li>权利主体即为完成方</li></ul></li><li><p>发明创造的受让人、继承人、受赠人</p></li></ol><h4 id="6-不授予专利权的对象"><a href="#6-不授予专利权的对象" class="headerlink" title="6.不授予专利权的对象"></a>6.不授予专利权的对象</h4><ol><li><p>违反国家法律、社会公德或妨害公共利益的发明创造；</p></li><li><p>科学发现</p><ul><li>专利法保护根据科学发现提出的技术方案，但并不保护发现本身。</li></ul></li><li><p>智力活动的规则与方法</p><ul><li>这些规则和方法并没有在自然规律的基础上提出具体的技术解决方案，因此不是专利法意义上的发明创造。</li></ul></li><li><p>疾病的诊断和治疗方法</p></li><li><p>动物和植物品种</p></li><li><p>原子核变换方法获得的物质</p></li><li><p>对平面印刷品的图案、色彩或二者结合作出的主要起标识作用的设计</p></li></ol><h4 id="7-专利权的内容"><a href="#7-专利权的内容" class="headerlink" title="7.专利权的内容"></a>7.专利权的内容</h4><ol><li>独占权：发明和实用新型专利权被授予后，除专利法另有规定的以外，任何单位或者个人未经专利权人许可，都不得实施其专利，即不得为生产经营目的制造、使用、许诺销售、销售、进口其专利产品，或者使用其专利方法以及使用、许诺销售、销售、进口依照该专利方法直接获得的产品。</li><li>转让权：包括专利申请权的转让和专利权的转让。有两种形式：合同转让、继承转让。</li><li>标示权：指专利权人享有在其专利产品或者该产品的包装上标明专利标记和专利号的权利，起到宣传作用，有助于扩大产品的销售，同时也可起到警示作用，使其他人了解这种产品是受到专利保护而不能随意仿造。</li><li>请求保护权：当专利权人认为其专利权受到侵害时，享有向人民法院起诉或请求专利管理部门处理以保护其专利权的权利。</li><li>放弃权：专利权人有权在专利有效期前，以书面形式声明或通过未按时交纳年费的方式自愿放弃专利。</li></ol><h4 id="8-专利权的限制——强制许可"><a href="#8-专利权的限制——强制许可" class="headerlink" title="8.专利权的限制——强制许可"></a>8.专利权的限制——强制许可</h4><ul><li>强制许可又称为非自愿许可，是指国务院专利行政部门依照法律规定，不经专利权人的同意直接许可具备实施条件的申请者实施发明或实用新型专利的一种行政措施。</li></ul><h4 id="9-不构成专利侵权的行为"><a href="#9-不构成专利侵权的行为" class="headerlink" title="9.不构成专利侵权的行为"></a>9.不构成专利侵权的行为</h4><ol><li><p>专利产品或者依照专利方法直接获得的产品，由专利权人或者经其许可的单位、个人售出后，使用、许诺销售、销售、进口该产品的；</p></li><li><p>在专利申请日前已经制造相同产品、使用相同方法或者已经作好制造、使用的必要准备，并且仅在原有范围内继续制造、使用的；</p></li><li><p>临时通过中国领陆、领水、领空的外国运输工具，依照其所属国同中国签订的协议或者共同参加的国际条约，或者依照互惠原则，为运输工具自身需要而在其装置和设备中使用有关专利的；</p></li><li><p>专为科学研究和实验而使用有关专利的；</p></li><li><p>为提供行政审批所需要的信息，制造、使用、进口专利药品或者专利医疗器械的，以及专门为其制造、进口专利药品或者专利医疗器械的。</p></li></ol><h3 id="二、商标法"><a href="#二、商标法" class="headerlink" title="二、商标法"></a>二、商标法</h3><h5 id="1-商标权的定义"><a href="#1-商标权的定义" class="headerlink" title="1.商标权的定义"></a>1.商标权的定义</h5><ul><li>商标所有人依法对其注册商标所享有的专有使用权。我国商标权是指注册商标专有权。</li></ul><h5 id="2-我国商标法的特点"><a href="#2-我国商标法的特点" class="headerlink" title="2.我国商标法的特点"></a>2.我国商标法的特点</h5><p>(1)保护商标的原则：不仅是对注册商标权的保护，也包括对未注册商标的保护；</p><p>(2)保护消费者利益的原则</p><p>(3)采用注册原则：包括申请在先和使用在先互补原则，自愿注册与强制注册并用的原则</p><p>(4)采用审查原则：商标审查由国家及地方的市场监督管理局负责。</p><h5 id="3-商标的禁用问题"><a href="#3-商标的禁用问题" class="headerlink" title="3.商标的禁用问题"></a>3.商标的禁用问题</h5><ol><li>同中华人民共和国的国家名称、国旗、国徽、国歌、军旗、军徽、军歌、勋章等相同或者近似的，以及同中央国家机关的名称、标志、所在地特定地点的名称或者标志性建筑物的名称、图形相同的；</li><li>同外国的国家名称、国旗、国徽、军旗等相同或者近似的，但经该国政府同意的除外；</li><li>同政府间国际组织的名称、旗帜、徽记等相同或者近似的，但经该组织同意或者不易误导公众的除外；</li><li>与表明实施控制、予以保证的官方标志、检验印记相同或者近似的，但经授权的除外；</li><li>同“红十字”、“红新月”的名称、标志相同或者近似的；</li><li>带有民族歧视性的；</li><li>带有欺骗性，容易使公众对商品的质量等特点或者产地产生误认的；</li><li>有害于社会主义道德风尚或者有其他不良影响的。</li><li>县级以上行政区划的地名或者公众知晓的外国地名，不得作为商标。但是，地名具有其他含义或者作为集体商标、证明商标组成部分的除外；已经注册的使用地名的商标继续有效。</li></ol><h5 id="4-商标的种类"><a href="#4-商标的种类" class="headerlink" title="4.商标的种类"></a>4.商标的种类</h5><ol><li>商品商标：生产经营在生产、制造、加工、或经销的商品上所使用的商标；</li><li>服务商标：服务性行业所使用的区别标志，即提供服务的人在其向社会公众提供的服务项目上所使用的标志；</li><li>按构成商标图案的形态分类：文字商标、图形商标、字母商标、数字商标、三维商标、颜色商标及组合商标；</li><li>按使用者的不同进行分类：制造商标销售商标与集体商标；</li><li>按其特殊性质分类：联合商标、防御商标与证明商标；</li></ol><h5 id="5-商标权保护范围和期限"><a href="#5-商标权保护范围和期限" class="headerlink" title="5.商标权保护范围和期限"></a>5.商标权保护范围和期限</h5><h6 id="1-注册商标专用权"><a href="#1-注册商标专用权" class="headerlink" title="1)注册商标专用权"></a>1)注册商标专用权</h6><p>​        注册商标专用权的保护及于相同或类似商标与相同或类似商品上。即：不得在相同或相类似的商品上使用与他人已经注册商标相同或相类似的标志。</p><h6 id="2-注册商标转让权"><a href="#2-注册商标转让权" class="headerlink" title="2)注册商标转让权"></a>2)注册商标转让权</h6><p>​        《商标法》第四十二条　转让注册商标的，转让人和受让人应当签订转让协议，并共同向商标局提出申请。受让人应当保证使用该注册商标的商品质量。</p><h6 id="3-商标许可使用权"><a href="#3-商标许可使用权" class="headerlink" title="3)商标许可使用权"></a>3)商标许可使用权</h6><p>​        商标注册人可以通过签订商标使用许可合同，许可他人使用其注册商标。许可人应当监督被许可人使用其注册商标的商品质量。被许可人应当保证使用该注册商标的商品质量。（《商标法》第四十三条）</p><h5 id="6-商标权保护期限"><a href="#6-商标权保护期限" class="headerlink" title="6.商标权保护期限"></a>6.商标权保护期限</h5><blockquote><p>注册商标的有效期为<code>十年，自核准注册之日起计算</code>。</p></blockquote><p>​        《商标法》第四十条　注册商标有效期满，需要继续使用的，商标注册人应当在期满前十二个月内按照规定办理续展手续；在此期间未能办理的，可以给予六个月的宽展期。每次<code>续展注册的有效期为十年</code>，自该商标上一届有效期满次日起计算。</p><h5 id="7-驰名商标的认定"><a href="#7-驰名商标的认定" class="headerlink" title="7.驰名商标的认定"></a>7.驰名商标的认定</h5><ol><li><p>相关公众对该商标的<code>知晓程度</code>；</p></li><li><p>该商标使用的持续<code>时间</code>；</p></li><li><p>该商标的任何宣传工作的持续时间、程度和地理范围；</p></li><li><p>该商标<code>作为驰名商标受保护的记录</code>；</p></li><li><p>该商标驰名的其他因素。</p></li></ol><h5 id="8-对驰名商标的保护"><a href="#8-对驰名商标的保护" class="headerlink" title="8.对驰名商标的保护"></a>8.对驰名商标的保护</h5><p>就不相同或者不相类似商品申请注册的商标是复制、摹仿或者翻译他人已经在中国注册的驰名商标，<code>误导公众，致使该驰名商标注册人的利益可能受到损害的</code>，不予注册并禁止使用。（即跨类超保护）</p><p>具体包括：</p><ol><li><p>对抗商标恶意抢注；</p></li><li><p>对抗不同商品的相同（似）商标影响；</p></li><li><p>对于近似商标的认定更容易；</p></li><li><p>在立案调查假冒商标犯罪案件时，不受立案金额的限制；</p></li><li><p>防止其它公司以驰名商标为公司名称注册；</p></li><li><p>在电子商务中避免域名注册；</p></li><li><p>保护驰名，不以注册为限。</p></li></ol><h5 id="9-地理标志与商标"><a href="#9-地理标志与商标" class="headerlink" title="9.地理标志与商标"></a>9.地理标志与商标</h5><ol><li><p>二者联系</p><ul><li>地理标志是一种特殊的商标，商标法是其上位法。地理标志可以注册为证明商标或集体商标，可以分为地理标志证明商标和地理标志集体商标。</li></ul></li><li><p>二者区别</p><ul><li><p>在构成要件上：地理标志只能使用特定的地理名称，商标除了地理名称之外，还可以使用图形、色彩等组合；</p></li><li><p>在使用者上：地理标志使用者人数众多，特定的地理范围内，符合要求的特定类型产品提供者都可以使用，而商标的使用者只能商标所有人或者许可的第三人。</p></li><li><p>在功能上：地理标志只能表明商品来源，不能标明具体的生产者，商标可以表明商品的具体生产者；</p></li><li><p>在权利存续时间上：地理标志没有时间限制；商标有时间限制，期满后继续使用的需要续展商标；</p></li><li><p>申请原则上：地理标志是自愿注册申请原则，商标是是自愿注册为主、强制注册为辅的原则。</p></li></ul></li></ol><h5 id="10-商标侵权认定的难点"><a href="#10-商标侵权认定的难点" class="headerlink" title="10.商标侵权认定的难点"></a>10.商标侵权认定的难点</h5><h6 id="1-对侵犯注册商标权行为认定的步骤："><a href="#1-对侵犯注册商标权行为认定的步骤：" class="headerlink" title="1)对侵犯注册商标权行为认定的步骤："></a>1)对侵犯注册商标权行为认定的步骤：</h6><ol><li>确定注册商标专用权的权利范围。确定两要素：核准注册的商标+该注册商标所核定使用的商品。</li><li>确定被控侵权的具体对象。被控侵权的商标+被控侵权的商标所使用的商品。</li><li>商标是否相同或者近似+商品是否属于同一种类或者相类似。</li></ol><h6 id="2-近似商标的认定"><a href="#2-近似商标的认定" class="headerlink" title="2)近似商标的认定"></a>2)近似商标的认定</h6><ol><li>商标外观。即对两个商标的文字、图形或其组合的视觉形象，从普通消费者的角度进行观察，看是否能引起误认或混淆。</li><li>商标读音。从人们的听觉出发，判断两商标是否因读音近似而导致混淆。</li><li>商标含义。分析两个商标是否含义相同或近似并导致消费者对商品来源产生混淆</li></ol><p>3)类似商品的判断</p><ol><li>《类似商品和服务区分表》和《商标注册用商品和服务国际分类表》并不是划分类似商品的依据，只能作为认定类似商品或者服务的参考。</li><li>从商品在功能、用途、生产部门、销售渠道、消费对象等方面是否相同，或者相关公众是否一般认为其存在特定联系、容易造成混淆来判断类似商品；</li><li>不以商品质量的优劣作为判定类似商品的标准。</li></ol><h3 id="三、-著作权"><a href="#三、-著作权" class="headerlink" title="三、  著作权"></a><strong>三、</strong>  <strong>著作权</strong></h3><h4 id="1-著作权的客体与主体"><a href="#1-著作权的客体与主体" class="headerlink" title="1. 著作权的客体与主体"></a><strong>1.</strong> <strong>著作权的客体与主体</strong></h4><h5 id="1-客体"><a href="#1-客体" class="headerlink" title="1) 客体"></a><strong>1)</strong> <strong>客体</strong></h5><p>成为客体的条件：</p><ol><li>作品必须具有<code>独创性</code></li><li>作品必须具有表达性</li><li>作品必须具有可复制性</li><li>作品必须具有合法性</li><li><code>作品必须是著作权法意义上的作品</code></li></ol><p>作品的识别与分类：</p><blockquote><p>①　分类：主要有文字作品、口述作品、音乐作品、戏剧作品、曲艺作品、杂技艺术作品、美术作品等</p><p>②　识别：接触+实质性相似-合法来源=侵权成立</p></blockquote><p>认定实质性相似的主要方法为<strong>整体观感法</strong>和<strong>抽象过滤法</strong>。</p><h5 id="2-主体"><a href="#2-主体" class="headerlink" title="2) 主体"></a><strong>2)</strong> <strong>主体</strong></h5><table><thead><tr><th>分类</th><th>说明</th></tr></thead><tbody><tr><td>原始主体</td><td>原始主体中最常见的是作者。</td></tr><tr><td>继受主体</td><td>通过继承、遗赠、赠与、转让等继受方式取得著作权的主体，称著作权继受主体。</td></tr></tbody></table><p>特殊作品的著作权主体</p><table><thead><tr><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>演绎作品</td><td>演绎作品的作者仅对演绎部分享有部分著作权，对被演绎的作品不享有著作权。</td></tr><tr><td>合作作品</td><td>合作作品可分割使用，作者对各自创作的部分可以单独享有著作权，但行使著作权时不得侵犯合作作品整体的著作权。</td></tr><tr><td>汇编作品</td><td>其著作权由汇编人享有，但行使著作权时，不得侵犯原作品的著作权。</td></tr><tr><td>职务作品</td><td>由作者享有署名权，著作权的其他权利由法人或者非法人组织享有，法人或者非法人组织可以给予作者奖励。</td></tr><tr><td>委托作品</td><td>受委托创作的作品，委托人可以通过与受托人协商，在合同中约定自己成为著作权人或者共有著作权人。</td></tr></tbody></table><h4 id="2-著作权内容"><a href="#2-著作权内容" class="headerlink" title="2. 著作权内容"></a><strong>2.</strong> <strong>著作权内容</strong></h4><h5 id="1-著作人身权"><a href="#1-著作人身权" class="headerlink" title="1)著作人身权"></a>1)著作人身权</h5><ul><li>发表权：即决定作品是否公之于众的权利；</li><li>署名权：即表明作者身份，在作品上署名的权利；</li><li>修改权：即修改或者授权他人修改作品的权利；</li><li>保护作品完整权：及保护作品不受歪曲、篡改的权利；</li></ul><h5 id="2-著作财产权"><a href="#2-著作财产权" class="headerlink" title="2)著作财产权"></a>2)著作财产权</h5><ul><li>复制权：即以印刷、复印、拓印、录音、录像、翻录、数字化等方式将作品制作一份或者多份的权利；</li><li>发行权：即以出售或者赠与方式向公众提供作品的原件或者复制件的权利；</li><li>出租权：即有偿许可他人临时使用视听作品、计算机软件的原件或者复制件的权利，计算机软件不是出租的主要标的除外；</li><li>展览权：即公开陈列美术作品、摄影作品的原件或者复制件的权利；</li><li>表演权：即公开表演作品，以及用各种手段公开播送作品的表演的权利；</li><li>还有放映权、广播权、信息网络传播权、摄制权、改编权、翻译权、汇编权、应当由著作权人享有的其他权利；</li></ul><h4 id="3-著作权的限制与保护"><a href="#3-著作权的限制与保护" class="headerlink" title="3. 著作权的限制与保护"></a><strong>3.</strong> <strong>著作权的限制与保护</strong></h4><blockquote><p>著作权限制制度是著作权法出于公共利益之目的所规定的约束著作权与有关财产权的行使范围，使范围外的特定行为不构成著作权侵权行为且不必承担侵权责任后果的豁免规范体系。</p></blockquote><h5 id="1-时间限制"><a href="#1-时间限制" class="headerlink" title="1)时间限制"></a>1)时间限制</h5><ul><li><code>作者终身及其死后50年</code></li></ul><h5 id="2-内容行使的限制"><a href="#2-内容行使的限制" class="headerlink" title="2)内容行使的限制"></a>2)内容行使的限制</h5><ul><li><p>合理使用：合理使用是指在法律规定的条件下，不必征得著作权人的同意，也不必向其支付报酬，基于正当目的而使用他人著作权作品的合法行为。</p><p>一般有：为<code>个人学习、研究或者欣赏</code>，使用他人已发表的作品；为介绍、评论某一作品或者说明某问题，在作品中适当引用他人以经发表的作品；为报道新闻，在报纸、期刊、广播电台、电视台等媒体中不可避免地再现或者引用已经发表的作品；国家机关为执行公务在合理范围内使用已经发表的作品；免费表演已经发表的作品，该表演未向公众收取费用，也未向表演者支付报酬，且不以营利为目的；图书馆、档案馆、纪念馆、博物馆、美术馆、文化馆等为陈列或者保存版本的需要，复制本馆收藏的作品；为学校课堂教学或者科学研究，翻译、改编、汇编、播放或者少量复制已经发表的作品，供教学或者科研人员使用，但不得出版发行等。</p></li><li><p>法定许可：法定许可是指使用人在法律明确规定的情形下，不经著作权人同意，有偿使用他人已发表作品的行为。其特点为：必须向著作权人支付报酬，而合理使用则是无偿使用；主体是著作权作品的传播者，而合理使用则没有这种限制；法定许可使用赋予了著作权人以声明方式排除法定许可使用的权利，而合理使用则无此规定。</p></li><li><p>技术措施的保护：著作权法所称的<code>技术措施</code>，是指用于防止、限制未经权利人许可浏览、欣赏作品、表演、录音录像制品或者通过信息网络向公众提供作品、表演、录音录像制品的有效技术、装置或者部件。</p><p>下列情形可以避开技术措施，但不得向他人提供避开技术措施的技术、装置或者部件，不得侵犯权利人依法享有的其他权利：为学校课堂教学或者科学研究，提供<code>少量</code>已经发表的作品，供教学或者科研人员使用，而该作品无法通过正常途径获取；不以营利为目的，以阅读障碍者能够感知的无障碍方式向其提供已经发表的作品，而该作品无法通过正常途径获取；国家机关依照行政、监察、司法程序执行公务；对计算机及其系统或者网络的安全性能进行测试；进行加密研究或者计算机软件反向工程研究。</p></li></ul><h4 id="4-著作权侵权保护"><a href="#4-著作权侵权保护" class="headerlink" title="4.著作权侵权保护"></a>4.著作权侵权保护</h4><h5 id="1-构成要件"><a href="#1-构成要件" class="headerlink" title="1)构成要件"></a>1)构成要件</h5><ol><li><p>确定权利的有效性，包括：<code>属于著作权法保护的作品范围；具备独创性；能以某种有形形式复制</code>。</p></li><li><p>确认侵权的事实</p></li><li><p>行为具有违法性</p></li><li><p>行为人主观有过错：故意或者过失</p></li></ol><h5 id="2-救济措施"><a href="#2-救济措施" class="headerlink" title="2)救济措施"></a>2)救济措施</h5><ul><li>民事救济措施：</li></ul><ol><li>停止侵害请求权：直接侵权行为的构成上采用无过错责任原则；</li><li>损害赔偿请求权：适用过错责任原则；</li><li>名誉恢复请求权；</li></ol><ul><li><p> 通过行政诉讼进行救济；</p></li><li><p>提起刑事诉讼；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转载】基于Hexo的matery主题搭建博客并深度优化</title>
      <link href="/2021/12/11/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%9F%BA%E4%BA%8EHexo%E7%9A%84matery%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
      <url>/2021/12/11/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%9F%BA%E4%BA%8EHexo%E7%9A%84matery%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Hexo的matery主题搭建博客并深度优化"><a href="#基于Hexo的matery主题搭建博客并深度优化" class="headerlink" title="基于Hexo的matery主题搭建博客并深度优化"></a>基于Hexo的matery主题搭建博客并深度优化</h2><p><a href="https://www.jianshu.com/u/738be5d6545a">悟尘80</a></p><p>对于有一定技术背景的同学，自己动手搭建博客网站是一个很不错的选择。选择喜欢的主题，按需进行个性化配置，随时在本地用自己喜欢的工具写文章，一键发布到多个博客托管平台，使用自己喜欢的图床/CDN来加速…</p><blockquote><p><a href="https://links.jianshu.com/go?to=http://lixl.cn">演示站点（悟尘记）</a> 基于 Hexo 的 hexo-theme-matery 主题构建，部署在腾讯云COS中并使用CDN进行内容加速，通过 PicGo + 阿里云OSS 作为图床进行静态资源加速。</p></blockquote><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo</code></p></li><li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo</code>：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'PATH="<span class="token variable">$PATH</span>:./node_modules/.bin"'</span> <span class="token operator">>></span> ~/.profile</code></pre></li></ol><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml├── package.json├── scaffolds├── <span class="token function">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>此时，通过 <code>hexo s</code> 命令即可在本地启动您的博客站点了。</p><pre class=" language-bash"><code class="language-bash">~ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token keyword">.</span> Press Ctrl+C to stop.</code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新CDN缓存。</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://links.jianshu.com/go?to=https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://www.lixl.cn/">这里</a> 可以查看示例效果。点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到 Hexo 的 <code>themes</code> 文件夹中即可。</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"悟尘记"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.lixl.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去参观"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fabric"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"BootCDN"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.bootcdn.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去加速"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://links.jianshu.com/go?to=https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://links.jianshu.com/go?to=https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h3><p>通过 <a href="https://links.jianshu.com/go?to=https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件中的如下内容:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxl80/lxl80.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><blockquote><p>也可以如本站一样，采用 <a href="https://links.jianshu.com/go?to=https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a> 插件将静态内容部署到腾讯云对象存储服务中，在DNS配置中将境内线路解析到腾讯云CDN地址，实现加速。部署完成后会自动刷新被更新文件的CDN缓存。</p></blockquote><p>安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-cos-enhanced --save</code></pre><p><code>_config.yml</code> 配置如下:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> lxl80<span class="token punctuation">-</span>130****    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing    <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9***<span class="token important">*F8FvL</span>    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur***<span class="token important">*QZR3PgjXmlVg</span>    <span class="token key atrule">cdnConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">cdnUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//static.lixl.cn      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> static<span class="token punctuation">-</span>130****      <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing      <span class="token key atrule">folder</span><span class="token punctuation">:</span> static      <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9***<span class="token important">*F8FvL</span>      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur***<span class="token important">*QZR3PgjXmlVg</span></code></pre><p>然后通过 <code>hexo g -d</code> 即可实现一键发布，并更新CDN缓存。</p><h3 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://links.jianshu.com/go?to=https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://links.jianshu.com/go?to=https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 生成静态文章链接。以下结合hexo-abbrlink生成类似 <code>/yyyy/mmdd+随机数.html</code> 的文章链接地址。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，修改 <code>permalink:</code> ，并在文件末尾新增 <code>abbrlink:</code>配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>   <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment" spellcheck="true">#算法选项：crc16丨crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec <span class="token comment" spellcheck="true">#输出进制：dec为十进制，hex为十六进制</span></code></pre><h3 id="CND加速（建议启用）"><a href="#CND加速（建议启用）" class="headerlink" title="CND加速（建议启用）"></a>CND加速（建议启用）</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://links.jianshu.com/go?to=https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。也可以选择主流云服务商提供的对象存储+CDN来获得更快速及稳定的访问效果，费用低到几乎可忽略。</p><p><strong>用法：</strong></p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre><p><strong>例如：</strong></p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/lxl80/blog@gh-pages/medias/banner/1.jpg</code></pre><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。</p><blockquote><p>还可以配合 <a href="https://links.jianshu.com/go?to=https://github.com/Molunerfinn/PicGo">PicGo</a>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。具体使用方法可参见我的另一篇文章: <a href="https://www.jianshu.com/2019/120114500.html">使用Typora+iPic/PicGo图床+CDN实现高效Markdown创作</a></p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://links.jianshu.com/go?to=https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://links.jianshu.com/go?to=https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明已经安装成功了。</p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="https://links.jianshu.com/go?to=http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token number">.</span>bg-color &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>可以直接在 <code>/source/medias/banner</code> 文件夹中更换喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果会 <code>JavaScript</code> 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图</td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td>表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="https://links.jianshu.com/go?to=http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="https://links.jianshu.com/go?to=http://encode.chahuo.com/">chahuo</a>、<a href="https://links.jianshu.com/go?to=http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 悟尘<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> 工具<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> blog  <span class="token punctuation">-</span> hexo<span class="token punctuation">---</span></code></pre><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p>搜索引擎优化，又称为SEO，即Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google自动收录效果还不错，百度就差得远了（<code>GitHub</code>不允许百度的<code>Spider</code>爬取<code>GitHub</code>上的内容）。</p><h3 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h3><p>登录<a href="https://links.jianshu.com/go?to=https://ziyuan.baidu.com/">百度搜索资源平台</a>， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击<a href="https://links.jianshu.com/go?to=https://ziyuan.baidu.com/site/siteadd">添加网站</a>，按提示操作。</p><p><img src="https://upload-images.jianshu.io/upload_images/10845339-9a905267913cf447.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>提示：由于百度的spider是爬取不到GitHub的内容的，所以在第三步验证网站的时候，建议选择<code>CNAME验证</code>的方式。</p></blockquote><p>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。<code>hexo-theme-matery</code>主题已经内置了 <code>自动推送</code> 的方式， 检查 <code>themes/hexo-theme-matery/_config.yml</code> 文件中如下配置:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 百度搜索资源平台提交链接</span><span class="token key atrule">baiduPush</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>自动推送的JS代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h3 id="谷歌优化"><a href="#谷歌优化" class="headerlink" title="谷歌优化"></a>谷歌优化</h3><p>登录 <a href="https://links.jianshu.com/go?to=https://search.google.com/search-console?hl=zh-CN">Google Search Console</a>，点击添加资源，输入自己的域名，按提示操作。</p><p><img src="/2021/12/11/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E5%9F%BA%E4%BA%8EHexo%E7%9A%84matery%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%8C%96/10845339-aaecf82aae71ee28.png" alt="10845339-aaecf82aae71ee28"></p><blockquote><p>提示：需要进行DNS验证，进入DNS域名解析设置页面，按提示增加TXT记录，如下图:</p><p><img src="https://upload-images.jianshu.io/upload_images/10845339-a24a9f2a55cc1ffd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p></blockquote><p>验证成功后，需要提交站点地图。通过安装sitemap插件生成站点地图文件:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save  <span class="token comment" spellcheck="true">#百度专用，可选</span></code></pre><p>安装后直接执行 <code>hexo cl&amp;&amp;hexo g -d</code> 命令，就会在网站根目录生成 <code>sitemap.xml</code> 文件。参照下图提交，等待收录。</p><p><img src="https://upload-images.jianshu.io/upload_images/10845339-93d3fb9db5647478.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><blockquote><p>注意：hexo配置文件中的url一定要输入正确的域名，插件是根据url生成站点地图的。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p><p><code>hexo server -s</code> #以静态模式启动</p><p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为4000，’ctrl + c’关闭server)</p><p><code>hexo server -i IP地址</code> #自定义 IP</p><p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</p><p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</p><p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)</p><p><code>hexo init</code> 文件夹名称 #初始化XX文件夹名称</p><p><code>npm update hexo -g</code>#升级</p><p><code>npm install hexo -g</code> #安装</p><p><code>node-v</code> #查看node.js版本号</p><p><code>npm -v</code> #查看npm版本号</p><p><code>git --version</code> #查看git版本号</p><p><code>hexo -v</code> #查看hexo版本号</p><h3 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h3><pre><code>hexo n &quot;我的第一篇文章&quot;` 等价于 `hexo new &quot;我的第一篇文章&quot;` 还等价于 `hexo new post &quot;我的第一篇文章&quot;hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy</code></pre><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><strong>通过<code>hexo g -d</code>部署时报<code>Error: Spawn failed</code>错误:</strong></li></ol><blockquote><p>这是由于git本地记录的提交版本号与github上不一致导致的，通过<code>git reset --hard commitCode</code>即可解决。</p></blockquote><ul><li><p>检查本地最近提交记录，获取最后一次提交记录的更新时间及标识，如</p><pre><code>280a7fdd46fcfd7d34e652aec15523dcd247fac8</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> .deploy_git<span class="token function">cat</span> .git/logs/HEAD  </code></pre></li><li><p>获取github pages服务所关联分支的最近一次提交记录，获取更新时间及标识。地址一般为：<code>https://github.com/用户名/仓库名/commits/分支名</code>，如<code>https://github.com/lxl80/blog/commits/gh-pages</code></p></li><li><p>如果发现提交最新的提交时间/标识不一致，通过以下命令即可解决:</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> reset --hard f085038efdf79546c09641d37b2a2429c1ae8e60 <span class="token comment" spellcheck="true">#github上最新的提交标识</span></code></pre></li></ul><p>1.设置模板，blog根目录 <code>scaffolds/post.md</code><br>加入categories,tags等，这样以后通过 <code>hexo new</code> 生成的模板就不用写这两个单词了。<br>当然，你也可以写入任何你每个文章中都会有的部分。</p><pre><code>---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:---yaml复制代码</code></pre><h2 id="Linux平台下的技巧"><a href="#Linux平台下的技巧" class="headerlink" title="Linux平台下的技巧"></a>Linux平台下的技巧</h2><h3 id="快捷命令"><a href="#快捷命令" class="headerlink" title="快捷命令"></a>快捷命令</h3><p>其实就通过alias，触发一些命令的集合<br>在 <code>~/.bashrc</code> 文件中添加</p><pre><code>alias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39;  #启动本地服务alias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#39;  #部署博客bash复制代码</code></pre><p>甚至你也可以加入备份文章的命令，可以自由发挥。</p><h3 id="博客备份（快捷命令升级版）"><a href="#博客备份（快捷命令升级版）" class="headerlink" title="博客备份（快捷命令升级版）"></a>博客备份（快捷命令升级版）</h3><p>为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的blog。</p><ol><li><p>博客根目录，执行 <code>git init</code> 创建 git 仓库。</p></li><li><p>在 github（或其他托管平台、自建远程仓库等） 创建仓库并和本地仓库建立联系。</p></li><li><p>在<code>~/.bashrc</code>文件中添加</p><pre><code>alias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39;alias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#39;bash复制代码</code></pre></li></ol><p>这样，我们在执行 <code>hd</code> 进行部署时，就一同将博客进行备份了</p><h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><ul><li><a href="https://links.jianshu.com/go?to=https://hexo.io/zh-cn/docs/">hexo官方文档</a></li><li><a href="https://links.jianshu.com/go?to=https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">闪烁之狐</a></li><li><a href="https://links.jianshu.com/go?to=https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery</a></li><li><a href="https://links.jianshu.com/go?to=https://blog.sky03.cn/posts/42790.html%23toc-heading-1">Hexo进阶之各种优化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> reprint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networks (chapter 2)</title>
      <link href="/2021/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2021/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212170914037.png" alt="物理层思维导图"></p><h5 id="2-1-1-基本概念和任务"><a href="#2-1-1-基本概念和任务" class="headerlink" title="2.1.1 基本概念和任务"></a>2.1.1 基本概念和任务</h5><h6 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1).基本概念"></a>1).基本概念</h6><p>物理层解决如何连接各种计算机的传输媒体上<code>传输数据比特流</code>，而不是指具体的传输媒体。</p><h6 id="2-主要任务"><a href="#2-主要任务" class="headerlink" title="2).主要任务"></a>2).主要任务</h6><p>物理层主要任务：确定与传输媒体<code>接口</code>有关的一些特征。这些特征主要包括：</p><ol><li>机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况；</li><li>电气特性：规定传输二进制位时，线路上信号的<code>电压范围</code>、阻抗匹配、<code>传输速率和距离限制</code>等。</li><li>功能特性：指明某条线上出现的<code>某一电平表示何种意义</code>，接口部件的信号线的用途。</li><li>规程特性/过程特性：定义各条物理线路的<code>工作规程和时序</code>关系。</li></ol><h5 id="2-1-2-数据通信基础知识"><a href="#2-1-2-数据通信基础知识" class="headerlink" title="2.1.2 数据通信基础知识"></a>2.1.2 数据通信基础知识</h5><h6 id="1-典型的数据通信模型"><a href="#1-典型的数据通信模型" class="headerlink" title="1).典型的数据通信模型"></a>1).典型的数据通信模型</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211220324669.png" alt="典型的数据通信模型"></p><h6 id="2-数据通信相关术语"><a href="#2-数据通信相关术语" class="headerlink" title="2).数据通信相关术语"></a>2).数据通信相关术语</h6><p>通信的目的是<code>传送消息</code>。</p><p>数据：传送信息的实体，通常是有意义的符号序列。</p><p>信号：数据的电气/电磁的表现，是数据在传输过程中的<code>存在形式</code>，分为数字信号和模拟信号。</p><blockquote><p>数字信号：代表消息的参数取值是离散的。</p><p>模拟信号：代表消息的参数取值是连续的。</p></blockquote><p>信源：产生和发送数据的源头。</p><p>信宿：接收数据的终点。</p><p>信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一 条接收信道。</p><blockquote><p>信道按传输的信号种类来分可以分为：模拟信道(传送模拟信号)和数字信道(传送数字信号)；<br>信道按传输介质的种类来分可以分为：无线信道和有线信道；</p></blockquote><h6 id="3-三种通信方式"><a href="#3-三种通信方式" class="headerlink" title="3).三种通信方式"></a>3).三种通信方式</h6><table><thead><tr><th align="center">通信方式</th><th>说明</th></tr></thead><tbody><tr><td align="center">单工通信</td><td>只有一个方向的通信而没有反方向的交互，<code>仅需要一条</code>信道。</td></tr><tr><td align="center">半双工通信</td><td>通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，要<code>两条</code>信道。</td></tr><tr><td align="center">全双工通信</td><td>通信双方可以同时发送和接受信息，也需要<code>两条</code>信道。</td></tr></tbody></table><h6 id="3-两种数据传输方式"><a href="#3-两种数据传输方式" class="headerlink" title="3).两种数据传输方式"></a>3).两种数据传输方式</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211224735900.png" alt="两种数据传输方式"></p><table><thead><tr><th align="center">传输方式</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">串行传输</td><td align="center">速度慢，费用低，适合远距离</td></tr><tr><td align="center">并行传输</td><td align="center">速度快，费用高，适合近距离</td></tr></tbody></table><h5 id="2-1-3-码元、波特、数据、带宽"><a href="#2-1-3-码元、波特、数据、带宽" class="headerlink" title="2.1.3 码元、波特、数据、带宽*"></a>2.1.3 码元、波特、数据、带宽*</h5><h6 id="1-码元"><a href="#1-码元" class="headerlink" title="1).码元"></a>1).码元</h6><p>码元是指用一个<code>固定时长的信号波形</code>( 数字脉冲)，代表<code>不同离散数值的基本波形</code>，是数字通信中数字信号的计量单位，这个时长内的信号称为k进制码元，而该时长称为码元宽度。</p><p><code>！！当码元的离散状态有M个时(M大于2)，此时码元为M进制码元。</code></p><p><code>1 码元可以携带多个比特的信息量</code>。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代<br>表1状态。</p><h6 id="2-波特"><a href="#2-波特" class="headerlink" title="2).波特"></a>2).波特</h6><p>速率也叫数据率，是指<code>数据的传输速率</code>，表示单位时间内传输的数据量。可以用<code>码元传输速率和信息传输速率</code>表示。</p><ol><li><p>码元传输速率：别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数(也可称为<code>脉冲个数或信号变化的次数</code>)，单位是<code>波特(Baud)</code> 。1波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，但<code>码元速率与进制数无关</code>。<br>简单来说，码元传输速率就是 1s 传输多少个码元，码元传输速率单位的<code>1 Baud =  1码元/秒</code>。</p></li><li><p>信息传输速率：别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数(即比特数),单位是比特/秒(b/s) 。<br>简单来说，信息传输速率就是1s传输多少个比特</p><blockquote><p>关系：若一个码元携带n bit的信息量，则M Baud的码元传输速率所对应的信息传输速率为M * n bit/s。</p></blockquote></li></ol><h6 id="3-练习题"><a href="#3-练习题" class="headerlink" title="3).练习题"></a>3).练习题</h6><p>某一数字通信系统传输的是四进制码元,4s传输了8000个码元,求系统的码元传输速率是多少?信息传输速率是多少?若另一通信系统传输的是十六进制码元,6s传输了7200个码元,求他的码元传输速率是多少?信息传输速率是多少?并指出哪个系统传输速率快?</p><blockquote><p>答案：    2000Baud，4000b/s;     1200Baud， 4800b/s;    十六进制更快</p><p>解析：    四进制码元系统：码元传输速率就是8000/4=200Baud，信息传输速率就是2000*log<sub>2</sub>4=4000b/s；<br>十六进制码元系统：码元传输速率就是7200/6=1200Baud，信息传输速率就是1200 log<sub>2</sub>16=4800bit/s；<br>系统传输的是比特流，通常比较的是信息传输速率，所以传输十六进制码元的通信系统传输速率较<br>快，如果用该系统去传输四进制码元会有更高的码元传输速率。</p></blockquote><h5 id="2-1-4-奈氏准则、香农定理"><a href="#2-1-4-奈氏准则、香农定理" class="headerlink" title="2.1.4  奈氏准则、香农定理*"></a>2.1.4  奈氏准则、香农定理*</h5><h6 id="1-失真"><a href="#1-失真" class="headerlink" title="1).失真"></a>1).失真</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211234650796.png" alt="失真"></p><p> 影响失真程度的因素：1.码元传输速率；2.信号传输距离；3.噪声干扰；4.传输媒体质量。</p><p>​        （前三种因素与失真程度<code>正相关</code>，最后一种因素与失真程度是<code>负相关</code>，即质量越好，失真程度越低）</p><p><code>信道带宽：信道带宽是信道能通过的最高频率和最低频率之差。</code></p><blockquote><p>码间串扰是失真的一种现象，是指接收端收到的信号波形<code>失去了码元之间清晰界限的现象</code>。</p><p>一般指码元传输速率过快，导致失去了码元之间界限的现象。</p></blockquote><h6 id="2-奈氏准则-奈奎斯特定理"><a href="#2-奈氏准则-奈奎斯特定理" class="headerlink" title="2).奈氏准则 (奈奎斯特定理)"></a>2).奈氏准则 (奈奎斯特定理)</h6><p>奈氏准则：在<code>理想低通(无噪声，带宽受限)条件</code>下，为了避免码间串扰，极限码元传输速率为2W Baud, <code>W是信道带宽，单位是Hz</code>。</p><p>极限数据率：</p><blockquote><p>理想低通信道下的极限数据传输率 = 2W * log<sub>2</sub>V (b/s)<br>                            V 是指有几种码元/码元的离散电平数目<br>                            W 是指信道带宽(Hz)</p></blockquote><p>通过奈氏准则的结论：</p><ol><li>在任何信道中，<code>码元传输的速率是有上限的</code>。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能。</li><li>信道的<code>频带越宽</code>(即能通过的信号高频分量越多)，就可以用更高的速率进行码元的有效传输。</li><li>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制。</li><li>由于码元的传输速率受奈氏准则的制约，所以<code>要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量</code>，这就需要采用多元制的调制方法。</li></ol><h6 id="3-香农定理"><a href="#3-香农定理" class="headerlink" title="3).香农定理"></a>3).香农定理</h6><p>信噪比 = 信号的平均功率/噪声的平均功率，常记为S/N，并用分贝(dB) 作为度量单位，即:</p><blockquote><p>信噪比 (1 dB) =10 log<sub>10</sub>[S/N] </p></blockquote><p>香农定理：在<code>带宽受限且有噪声</code>的信道中，为了不产生误差，信息的数据传输速率有上限值。</p><blockquote><p>信道的极限数据传输速率=W log<sub>2</sub>[1+S/N] (b/s)</p></blockquote><p>通过香农定理的结论：</p><ol><li><code>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高</code>。</li><li>对一定的传输带宽和一.定的信噪比，信息传输速率的上限就确定了。</li><li>只要信息的传输速率低于信道的极限传输速率，就<code>一定能找到某种方法来实现无差错的传输</code>。</li><li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少。</li><li>从香农定理可以看出，若信道带宽W或信噪比S/N没有上限 （不可能），那么信道的极限信息传输速率也就没有上<br>限。</li></ol><h6 id="4-奈氏准则和香农定理比较"><a href="#4-奈氏准则和香农定理比较" class="headerlink" title="4).奈氏准则和香农定理比较"></a>4).奈氏准则和香农定理比较</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212002045027.png" alt="奈氏准则和香农定理比较"></p><h6 id="5-练习题"><a href="#5-练习题" class="headerlink" title="5).练习题"></a>5).练习题</h6><p>1.在无噪声的情况下,若某通信链路的带宽为3kHz ,采用4个相位,每个相位具有4种振幅的QAM调制技术,则该通信链路的最大数据传输率是多少?</p><blockquote><p>答案：信号有4 x 4=16种变化；最大数据传输率=2 x 3k x4=24kb/s</p></blockquote><p>2.电话系统的典型参数是信道带宽为3000Hz ,信噪比为30dB ,则该系统最大数据传输速率是多少?</p><blockquote><p>答案：30dB=10 log<sub>10</sub>(S/N)    则S/N=1000<br>            所以信道的极限数据传输速率=W log<sub>2</sub>(1+S/N)=3000 x log<sub>2</sub>(1+1000)，约等于30 kb/s</p></blockquote><p>3.二进制信号在信噪比为127 : 1的4kHz信道上传输,最大的数据速率可达到多少?</p><blockquote><p>答案：奈氏准则： 2* 4000* log<sub>2</sub>2=8000b/s    </p><p>​             香农定理：4000 X* log<sub>2</sub>(1+127)=28000b/s，两者中取<code>较小的一个</code>。</p></blockquote><h5 id="2-1-5-编码与调制"><a href="#2-1-5-编码与调制" class="headerlink" title="2.1.5 编码与调制*"></a>2.1.5 编码与调制*</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212162335925.png" alt="编码与调制思维导图"></p><h6 id="1-基带信号和宽带信号"><a href="#1-基带信号和宽带信号" class="headerlink" title="1).基带信号和宽带信号"></a>1).基带信号和宽带信号</h6><p>基带信号：将数字信号1和0直接用两种不同的电压表示，再送到<code>数字信道</code>上去传输<code>(基带传输)</code>。来自信源的信                        号，<code>像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号</code>。基带信号就是发出的直接表                        达了要传输的信息的信号，比如我们说话的声波就是基带信号。</p><p>宽带信号：将基带信号进行调制后形成的频分复用模拟信号，再传送到<code>模拟信道</code>上去传输<code>(宽带传输)</code>。把基带信                        号经过<code>载波调制</code>后，把<code>信号的频率范围搬移到较高的频段</code>以便在信道中传输(即仅在一段频率范围内                        能够通过信道)。</p><blockquote><p>在传输距离较近时，计算机网络采用基带传输方式 (近距离衰减小，从而信号内容不易发生变化)<br>在传输距离较远时，计算机网络采用宽带传输方式 (远距离衰减大，即使信号变化大也能最后过滤出来基带信号)</p></blockquote><h6 id="2-编码与调制"><a href="#2-编码与调制" class="headerlink" title="2).编码与调制"></a>2).编码与调制</h6><blockquote><p>数据→数字信号            编码</p><p>数据→模拟信号            调制</p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212110208530.png" alt="编码与调制"></p><h6 id="3-数字数据编码为数字信号"><a href="#3-数字数据编码为数字信号" class="headerlink" title="3).数字数据编码为数字信号"></a>3).数字数据编码为数字信号</h6><ol><li><p>非归零编码[NRZ] *：<code>高1低0</code>；编码容易实现，但没有检错功能，且无法判断一个码元的开始和结束，以至于收发双方难以保持同步。</p></li><li><p>归零编码[RZ] ：信号电平在一个码元之内都要恢复到零的这种编码的编码方式。            </p></li><li><p>曼彻斯特编码 *：将一个码元分成两个相等的间隔，前一个间隔为低电平后一个间隔为高电平表示码元1；码元0则正好相反。也可以采用相反的规定。</p><ul><li><p>该编码的特点是在每-一个码元的中间出现电平跳变，位中间的跳变既作时钟信号(可用于同步)，又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。</p></li><li><p><code>每一个码元都被调成两个电平，所以数据传输速率只有调制速率的1/2</code>。（二进制编码条件下两个码元但只有一个比特）</p></li></ul></li><li><p>反向不归零编码[NRZI]：信号电平翻转表示0，信号电平不变表示1。                    </p></li><li><p>差分曼彻斯特编码 *：同1异0；常用于局域网传输，其规则是：若码元为1，则前半个码元的电平与.上一个码元的后半个码元的电平相同，若为0，则相反。</p><ul><li>该编码的特点是，在每个码元的中间，都有一次电平的跳转，可以实现自同步，且抗干扰性强于曼彻斯特编码。                                 </li></ul></li><li><p>4B/5B编码：比特流中插入额外的比特以打破一连串的0或1，就是用5个比特来编码4个比特的数据，之后再传给         接收方，因此称为4B/5B。编码效率为80%。</p><ul><li>五个比特对应32种状态，只采用16种对应16种不同的4位码，其他的16种作为控制码(帧的开始和结束，线路的状态信息等)或保留。                                            </li></ul></li></ol><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212110435749.png" alt="数字数据编码为数字信号"></p><h6 id="4-数字数据调制为模拟信号"><a href="#4-数字数据调制为模拟信号" class="headerlink" title="4).数字数据调制为模拟信号"></a>4).数字数据调制为模拟信号</h6><p>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制，解调器的调制和解调过程。</p><p><code>调幅+调相 (QAM)</code></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212160345840.png" alt="数字数据调制为模拟信号"></p><h6 id="5-模拟数据编码为数字信号"><a href="#5-模拟数据编码为数字信号" class="headerlink" title="5).模拟数据编码为数字信号"></a>5).模拟数据编码为数字信号</h6><p>计算机内部处理的是二进制数据，处理的都是数字音频，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列(即实现音频数字化)。</p><p>最典型的例子就是对音频信号进行编码的<code>脉码调制(PCM)</code>，在计算机应用中，能够达到最高保真水平的就是PCN编码，被广泛用于素材保存及音乐欣赏，CD、DVD以及常见的WAV文件中均有应用。<code>它主要包括三步:抽样、量化、编码</code>。</p><ol><li><p>抽样：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。</p><blockquote><p>为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样:<code> f采样频率≥2f信号最高频率</code></p></blockquote></li><li><p>量化：把抽样取得的 电平幅值按照-定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的数字量。</p></li><li><p>编码：把量化的结果转换为与之对应的二进制编码。</p></li></ol><h6 id="6-模拟数据调制为模拟信号"><a href="#6-模拟数据调制为模拟信号" class="headerlink" title="6).模拟数据调制为模拟信号"></a>6).模拟数据调制为模拟信号</h6><p>为了实现传输的有效性，可能需要较高的频率。这种调制方式还可以使用<code>频分复用技术</code>，充分利用带宽资源。在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式;模拟的声音数据是加载到模拟的载波信号中传输的。</p><h6 id="7-练习题"><a href="#7-练习题" class="headerlink" title="7).练习题"></a>7).练习题</h6><p>某通信链路的波特率是1200Baud，采用4个相位，每个相位有4种振幅的QAM调制技术，则该链路的信息传输速率是多少?</p><blockquote><p>答案：log<sub>2</sub>(4*4) * 1200 = 4800 b/s</p></blockquote><h5 id="2-2物理层传输介质"><a href="#2-2物理层传输介质" class="headerlink" title="2.2物理层传输介质"></a>2.2物理层传输介质</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212165528095.png" alt="物理层传输介质"></p><h6 id="1-传输介质和分类"><a href="#1-传输介质和分类" class="headerlink" title="1).传输介质和分类"></a>1).传输介质和分类</h6><p>传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的<code>物理通路</code>。</p><blockquote><p>传输媒体并不是物理层。<code>传输媒体在物理层的下面，因为物理层是体系结构的第一层</code>，因此有时称传输媒体为0层。在传输媒体中传输的是信号，恒传输媒体并不知道所传输的信号代表什么意思。但物理层规定了<code>电气特性</code>，因此能够识别所传送的比特流。</p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212163037211.png" alt="物理层传输介质的分类"></p><h6 id="2-导向性传输介质"><a href="#2-导向性传输介质" class="headerlink" title="2).导向性传输介质"></a>2).导向性传输介质</h6><ol><li><p>导向性传输介质——双绞线</p><ul><li>双绞线是古老、又最常用的传输介质，它由两根采用一定规则并排绞合的、相互绝缘的铜导线组成。两根线绞合可以减少对彼此的电磁干扰。（产生的电磁波大小相等相互抵消）</li><li>为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由<code>金属丝编织成的屏蔽层</code>，这就是屏蔽双绞线(STP)，无屏蔽层的双绞线就称为非屏蔽双绞线(UTP)。</li><li>特点：双绞线价格便宜，是最常用的传输介质之一，在局域网和传统电话网中普遍使用。模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里。距离太远时，对于<code>模拟传输</code>，要用<code>放大器放大衰减的信号</code>;对于<code>数字传输</code>，要用<code>中继器将失真的信号整形</code>。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212163610553.png" alt="导向性传输介质——双绞线"></li></ul></li><li><p>导向性传输介质——同轴电缆</p><ul><li><p>同轴电缆由    <code>导体铜质芯线、绝缘层、网状编织屏蔽层和塑料外层</code>构成。按特性阻抗数值的不同，通常将同轴电缆分为两类: 509同轴 电缆和750同轴电缆。其中，509同轴电缆主要用于传送基带数字信号，又称为基带同轴电缆，它在局域网中得到广泛应用; 75Q同轴电缆主要用于传送宽带信号，又称为宽带同轴电缆，它主要用于有线电视系统。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212163804020.png" alt="导向性传输介质——同轴电缆"></p></li></ul><blockquote><p>同轴电缆    VS    双绞线</p><p>​     由于外导体屏蔽层的作用，<code>同轴电缆抗干扰特性比双绞线好</code>，被广泛用于传输较高速率的数据，其<code>传输距离更远</code>，但<code>价格较双绞线贵</code>。</p></blockquote></li><li><p>导向性传输介质——光纤</p><ul><li><p>光纤通信就是利用光导纤维(简称光纤)传递光脉冲来进行通信。有光脉冲表示1，无光脉冲表示0。而可见光的频率大约是108MHz，因此光纤通信系统的带宽远远大于目前其他各种传输媒体的带宽。</p></li><li><p>光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲;在接收端用光电二极管做成光检测器，在检测到光脉冲时可还原出电脉冲。</p></li><li><p>光纤主要由纤芯<code>(实心的! )</code>和包层构成，光波通过纤芯进行传导，包层较纤芯有较低的折射率。当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角。因此，<code>如果入射角足够大，就会出现全反射</code>，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212164500338.png" alt="导向性传输介质——光纤"></p></li><li><p>光纤的分类</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212164722902.png" alt="光纤的分类"></p></li><li><p>光纤的特点</p><ol><li>传输损耗小，中继距离长，对远距离传输特别经济。</li><li>抗雷电和电磁干扰性能好。</li><li>无串音干扰，保密性好，也不易被窃听或截取数据。</li><li>体积小，重量轻。</li></ol></li></ul></li></ol><h6 id="3-非导向性传输介质"><a href="#3-非导向性传输介质" class="headerlink" title="3).非导向性传输介质"></a>3).非导向性传输介质</h6><table><thead><tr><th align="center">类型</th><th>传播方向</th><th>特点及应用</th></tr></thead><tbody><tr><td align="center">无线电波</td><td>信号向所有方向传播</td><td>较强穿透能力，可传远距离，广泛用于通信领域(如手机通信)。</td></tr><tr><td align="center">微波</td><td>信号向固定方向传播</td><td>微波通信频率较高、频段范围宽，因此数据率很高。</td></tr><tr><td align="center">红外线、激光</td><td>信号向固定方向传播</td><td>把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号,再在空间中传播。</td></tr></tbody></table><h5 id="2-3物理层设备"><a href="#2-3物理层设备" class="headerlink" title="2.3物理层设备"></a>2.3物理层设备</h5><h6 id="1-中继器"><a href="#1-中继器" class="headerlink" title="1).中继器"></a>1).中继器</h6><ol><li>诞生原因：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一-定 程度时将造成信号失真，因此会导致接收错误。</li><li>中继器的功能：<code>对信号进行再生和还原，对衰减的信号进行放大</code>，保持与原数据相同，以增加信号传输的距离，延长网络的长度。</li><li>中继器的两端：两端的网络部分是网段，而不是子网，适用于完全相同的两类网络的互连，且两个网段速率要相同；两端可连相同媒体，也可连不同媒体；中继器两端的网段一定要是同一个协议。</li><li>特点：中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是<br>否有错误数据或不适于网段的数据。</li></ol><blockquote><p>5-4-3规则：</p><p>​        网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障。</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211212170328413.png" alt="5-4-3规则"></p></blockquote><h6 id="2-集线器"><a href="#2-集线器" class="headerlink" title="2).集线器"></a>2).集线器</h6><ol><li>集线器的功能：对信号进行<code>再生放大和转发</code>，对衰减的信号进行放大，接着转发到<code>其他所有(除输入端口外)</code>处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。<code>不具备信号的定向传送能力，是一个共享式设备</code>。 </li></ol><blockquote><p>集线器不能分割冲突域；连在集线器上的工作主机平分带宽。</p></blockquote><h5 id="2-4信道复用技术"><a href="#2-4信道复用技术" class="headerlink" title="2.4信道复用技术"></a>2.4信道复用技术</h5><h6 id="1-频分复用（FDM）"><a href="#1-频分复用（FDM）" class="headerlink" title="1).频分复用（FDM）"></a>1).频分复用（FDM）</h6><ul><li><p>频分复用就是将用于传输信道的总带宽划分成若干个子频带（或称子信道），每一个子信道传输一路信号。用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li><li><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214223141488.png" alt="频分复用FDM"></p></li><li><p>频分复用 FDM示意图</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214223744359.png" alt="频分复用 FDM示意图"></p></li></ul><h6 id="2-时分复用TDM"><a href="#2-时分复用TDM" class="headerlink" title="2).时分复用TDM"></a>2).时分复用TDM</h6><ul><li><p>时分复用：将时间划分为一段段等长的时分复用帧（TDM 帧），每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。 每一个用户所占用的时隙是周期性地出现（其周期就是 TDM 帧的长度）。 TDM 信号也称为等时(isochronous)信号。 时分复用的所有用户在不同的时间占用同样的频带宽度。</p></li><li><p>时分复用 TDM示意图</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214223344222.png" alt="时分复用示意图"></p></li><li><p>特点：</p><ol><li><p>帧的位置不变</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214223445578.png" alt="特点1"></p></li><li><p>时分复用可能会造成线路资源的浪费</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214223521972.png" alt="特点2"></p></li></ol></li></ul><h6 id="3-波分复用WDM"><a href="#3-波分复用WDM" class="headerlink" title="3).波分复用WDM"></a>3).波分复用WDM</h6><ul><li>波分复用(Wavelength Division Multiplexing)就是光的频分复用。 </li><li>原理：整个波长频带被划分为若干个波长范围，每个用户占用一个波长范围来进行传输。</li><li><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214223640819.png" alt="波分复用示意图"></li></ul><h6 id="4-码分复用-CDM"><a href="#4-码分复用-CDM" class="headerlink" title="4).码分复用 CDM"></a>4).码分复用 CDM</h6><ul><li><p>常用的名词是<code>码分多址 CDMA</code> (Code Division Multiple Access)。 </p></li><li><p>特点：</p><ol><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li></ol></li><li><p>码分序列</p><ol><li><p><code>每一个比特时间划分为 m 个短的间隔，称为码片(chip)</code>， 每个码片分配一个“1”或“0”就构成了一个码片序列。</p><blockquote><p>例如，设m=8，某站S的码片序列如下所示：</p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211214224144115.png" alt="码片序列"></p></blockquote></li><li><p><code>每个站被指派一个唯一的 m bit 码片序列。 应用中，码片序列中的“1”用“+1”表示，“0”用“-1” 表示</code>。</p></li><li><p>每个站数据的发送：</p><ul><li><p><code>若发送比特 1，则发送自己的 m bit 码片序列。 若发送比特 0，则发送该码片序列的二进制反码。</code></p><blockquote><p>例如，设S 站的码片序列(–1 –1 –1 +1 +1 –1 +1 +1)</p><p>​             S站发送比特 1 时，就发送序列 ( –1 –1 –1 +1 +1 –1 +1 +1 ) </p><p>​             S站发送比特 0 时，就发送序列 ( +1 +1 +1 -1 -1 +1 -1 -1 )</p></blockquote></li></ul></li><li><p>码片序列的正交关系 </p><ul><li><p>令向量S表示站S的码片向量，令T表示其他任何站的码片向量。 <code>两个不同站的码片序列正交，就是向量 S 和T 的规格化内积(inner product)都是 0</code>；</p></li><li><p>任何一个码片向量和该码片向量自己的规格化内积都是1；</p></li><li><p>一个码片向量和该码片反码的向量的规格化内积值是 –1 ；</p><blockquote><p>规格化内 积公式：S x T =${1\over m}\sum_1^nS_iT_i$</p></blockquote></li></ul></li></ol></li></ul><h6 id="5-练习题-1"><a href="#5-练习题-1" class="headerlink" title="5).练习题"></a>5).练习题</h6><ul><li><p>假定A、B和C站使用CDMA系统，它们的码片序列如下： </p><p>A：（–1 –1 –1 +1 +1 –1 +1 +1）|   B：（–1 –1 +1 –1 +1 +1 +1 –1）|   C：（–1 +1 –1 +1 +1 +1 –1 –1）</p><p> 问：（1）若A、B两站同时发送比特0，C站发送比特1，则各路信号合成的发送码片序列是什么？</p><p>​          （2）若接收站收到的码片序列为 T=（0 0 -2 +2 0 -2 0 2），则各站分别发送了什么数据？</p><blockquote><p>答：（1）根据题意，A、B两站分别发送其码片序列的反码， C站发送其码片序列的原码，即各站分别发送的码片序列为：</p><p>​         A：（ +1 +1 +1 –1 –1 +1 –1–1 ） </p><p>​        B：（ +1 +1 –1 +1 –1 –1 –1 +1 ） </p><p>​        C：（–1 +1 –1 +1 +1 +1 –1–1 ）</p><p>​        所以，各路信号合成的发送码片序列是 T=A + B + C=（+1 +3 -1 +1 -1 +1 –3 –1 ）</p><p>（2）接收站分别计算下列规格化内积：</p><p>​         A·T= (–1–1–1 +1 +1–1 +1 +1) x (0 0 -2 +2 0 -2 0 2) =${1\over 8}\sum_1^8A_iT_i$ = +1</p><p>​         B·T= (–1–1 +1 -1 +1 +1 +1 -1) x (0 0 -2 +2 0 -2 0 2) =${1\over 8}\sum_1^8B_iT_i$ = -1</p><p>​         C·T= (–1 +1 -1 +1 +1 +1 -1 -1) x (0 0 -2 +2 0 -2 0 2) =${1\over 8}\sum_1^8C_iT_i$ =0</p><p>​        所以，A发送的是1，B发送是0，C没有发送数据</p></blockquote></li></ul><h5 id="第二章课后习题"><a href="#第二章课后习题" class="headerlink" title="第二章课后习题"></a>第二章课后习题</h5>]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Networks (chapter 1)</title>
      <link href="/2021/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2021/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><h4 id="第一章-概论"><a href="#第一章-概论" class="headerlink" title="第一章 概论"></a>第一章 概论</h4><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211214408118.png" alt="第一章思维导图"></p><h5 id="1-1-1-概念、组成、功能和分类"><a href="#1-1-1-概念、组成、功能和分类" class="headerlink" title="1.1.1 概念、组成、功能和分类"></a>1.1.1 概念、组成、功能和分类</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211210223821444.png" alt="思维导图"></p><h5 id="1-什么是计算机网络？"><a href="#1-什么是计算机网络？" class="headerlink" title="1).什么是计算机网络？"></a>1).什么是计算机网络？</h5><blockquote><p> 计算机网络是一个将分散的、具有独立功能的<code>计算机系统</code>，通过<code>通信设备</code>与<code>线路</code>链接起来，由功能完善的软件实现<code>资源共享</code>和<code>信息传递</code>的系统。</p></blockquote><p><code>计算机网络是一个互联的、自治的计算机集合。</code></p><h5 id="2-计算机网络的功能"><a href="#2-计算机网络的功能" class="headerlink" title="2).计算机网络的功能"></a>2).计算机网络的功能</h5><ol><li><p>数据通信 * （连通性）</p></li><li><p>资源共享 * ：软件资源共享、硬件资源共享、数据资源共享；</p></li><li><p>分布式处理：多台计算器各自承担同一工作的不同部分；</p></li><li><p>提高可靠性：如果有一台主机宕机，仍可以实现通信；</p></li><li><p>负载均衡</p></li><li><p>…………</p></li></ol><h5 id="3-计算机网络的组成"><a href="#3-计算机网络的组成" class="headerlink" title="3).计算机网络的组成"></a>3).计算机网络的组成</h5><ol><li>组成部分：软件、硬件、协议</li><li>工作方式 * ：分为用户直接使用的<code>边缘部分</code>和为边缘部分提供服务的<code>核心部分</code>；</li><li>功能组成 * ：资源子网实现<code>资源共享/数据处理</code>；通信子网实现<code>数据通信</code>；</li></ol><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211210222727005.png" alt="计算机网络的组成"></p><h5 id="4-计算机网络的分类"><a href="#4-计算机网络的分类" class="headerlink" title="4).计算机网络的分类"></a>4).计算机网络的分类</h5><ol><li><p>按分布的范围分：分为广域网(WAN)、城域网(WAN)、局域网(LAN)和个人区域网(PAN)；</p></li><li><p>按使用者分：公用网 (大众使用) 和专用网 （特殊人员才可以使用)；</p></li><li><p>按交换技术分：电路交换、报文交换、分组交换；</p><ul><li><p>电路交换的特点</p><p>a. <code>电路交换必定是面向连接的</code>；</p><p>b. 电路交换的用户<code>始终占用端到端的通信资源</code></p><p>b. 电路交换分为三个阶段:</p><table><thead><tr><th>三个阶段</th><th>说明</th></tr></thead><tbody><tr><td>建立连接</td><td>建立一条专用的物理通路，以保证双方通话时所需的通信资源在通信时不会被其他用户占用;</td></tr><tr><td>通信</td><td>主叫和被叫双方就能互相通电话；释放连接:</td></tr><tr><td>释放连接</td><td>释放刚才使用的这条专用的物珥（释放刚才占用的所有通信资源)。</td></tr></tbody></table></li><li><p>分组交换的特点</p><p>a. 分组交换采用<code>存储转发</code>技术。在发送端，先把较长的报文划分成较短的、固定长度的数据段。</p><p>b. 分组交换网以‘<code>分组</code>’作为数据传输单元。依次把各分组发送到接收端。</p><p>c. 每个分组在互联网中<code>独立地选择传输路径</code>。</p></li><li><p>分组交换的问题</p><ol><li>分组在各结点存储转发时需要<code>排队</code>，这就会<code>造成一定的时延</code>。</li><li>分组<code>必须携带的首部</code>（里面有必不可少的控制信息)也造成了一定的开销。</li></ol></li><li><p>分组交换与电路交换相比较的优点</p><table><thead><tr><th>优点</th><th>所采用的手段</th></tr></thead><tbody><tr><td>高效</td><td>在分组传输的过程中<code>动态分配传输带宽</code>，对通信链路是<code>逐段占用</code>。</td></tr><tr><td>灵活</td><td>为每一个分组<code>独立地</code>选择最合适的转发路由。</td></tr><tr><td>迅速</td><td>以分组作为传送单位，可以<code>不先建立连接</code>就能向其他主机发送分组。</td></tr><tr><td>可靠</td><td>保证可靠性的网络协议；分布式多路由的交换网，使网络有很好的生存性。</td></tr></tbody></table></li></ul></li><li><p>按拓扑结构分：总线型、星型、环形、网状型（常用于广域网）；</p></li><li><p>按传输技术分：广播室网络（共享公共通信信道）、点对点网络（利用分组存储转发和路由选择机制）；</p></li></ol><h5 id="5-互联网边缘部分端系统之间的两种通信方式"><a href="#5-互联网边缘部分端系统之间的两种通信方式" class="headerlink" title="5.)互联网边缘部分端系统之间的两种通信方式"></a>5.)互联网边缘部分端系统之间的两种通信方式</h5><h6 id="1-客户-服务器方式（C-S方式）"><a href="#1-客户-服务器方式（C-S方式）" class="headerlink" title="1).客户/服务器方式（C/S方式）"></a>1).客户/服务器方式（C/S方式）</h6><ul><li><p>即Client/Server方式，简称为C/S方式。客户-服务器方式所描述的是进程之间服务和被服务的关系。</p></li><li><p>客户（client)和服务器（server)都是指<code>通信中所涉及的两个应用进程</code>。<code>客户</code>是服务的<code>请求方</code>，<code>服务器</code>是服务的<code>提供方</code>。服务请求方和服务提供方都要使用网络所提供的服务。        </p></li><li><p>客户软件的特点：</p><ol><li>被用户调用后运行，在打算通信时生动向远地服务器发起通信（请求服务)。因此，客户程序必须知道服务器程序的地址。</li><li>不需要特殊的硬件和很复杂的操作系统。</li></ol></li><li><p>服务器软件的特点</p><ol><li>一种专门用来提供某种服务的程序，可<code>同时处理多个远地或本地客户的请求</code>。</li><li>系统启动后即<code>自动调用并一直不断地运行着</code>，<code>被动地等待</code>并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。</li></ol></li></ul><blockquote><p>客户与服务器的通信关系建立后，通信是<code>双向</code>的，客户和服务器都可发送和接收数据。</p></blockquote><h6 id="2-对等连接方式（P2P方式）"><a href="#2-对等连接方式（P2P方式）" class="headerlink" title="2).对等连接方式（P2P方式）"></a>2).对等连接方式（P2P方式）</h6><ul><li>即Peer-to-Peer方式，简称为P2P方式。对等连接是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件（P2P软件)，它们就可以进行<code>平等的、对等连接通信</code>。</li><li>双方都可以下载对方已经存储在硬盘上的文档。</li><li>对等连接的特点<ol><li>对等连接方式从本质.上看仍然是使用客户服务器方式，只是对等连接中的每-一个主机既是客户又是服务器。</li><li>对等连接工作方式可支持大量对等用用户（百万个)同时工作。</li></ol></li></ul><h5 id="6-互联网核心部分"><a href="#6-互联网核心部分" class="headerlink" title="6.)互联网核心部分"></a>6.)互联网核心部分</h5><h6 id="1-概念"><a href="#1-概念" class="headerlink" title="1).概念"></a>1).概念</h6><ul><li><p>网络核心部分是互联网中最复杂的部分。<code>网络中的核心部分要向网络边缘中的大量主机提供连通性</code>，使边缘部分中的任何一个主机都能够向其他主机通信（ 即传送或接收各种形式的数据)<code>在网络核心部分起特殊作用的是路由器</code></p><blockquote><p>路由器是实现分组交换（packet switching)的关键构件,其任务是转发收到的分组，这是网络核心部分最重要的功能。</p><p>■在路由器中的输入和输出端口之间没有直接连线。<br>■路由器处理分组的过程是:</p><ol><li>把收到的分组先放入<code>缓存</code>（暂时存储) ;</li><li><code>查找转发表</code>，找出到某个目的地址应从哪个端口转发;</li><li>把分组送到<code>适当的端口转发</code>出去。.</li></ol></blockquote></li></ul><h5 id="1-1-2-计算机网络速率相关的性能指标"><a href="#1-1-2-计算机网络速率相关的性能指标" class="headerlink" title="1.1.2 计算机网络速率相关的性能指标"></a>1.1.2 计算机网络速率相关的性能指标</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211111253400.png" alt="计算机网络性能指标"></p><h6 id="1-速率"><a href="#1-速率" class="headerlink" title="1).速率"></a>1).速率</h6><p>即数据率或称数据传输率或比特率，是指连接在计算机网络上的主机在数字信道上传送数据位数的速率。</p><p><code>1bps = 1bit/s</code></p><table><thead><tr><th align="center"></th><th>速率单位换算</th><th>存储单位换算</th></tr></thead><tbody><tr><td align="center">千</td><td>1 kb/s = 10<sup>3 </sup> b/s</td><td>1 KB = 2<sup>10 </sup>B=1024 B=2<sup>10</sup> * 8 b</td></tr><tr><td align="center">兆</td><td>1 Mb/s = 10<sup>3 </sup> kb/s</td><td>1 MB = 2<sup>10 </sup>KB=1024 KB</td></tr><tr><td align="center">吉</td><td>1 Gb/s = 10<sup>3</sup> Mb/s</td><td>1 GB = 2<sup>10 </sup>MB=1024 MB</td></tr><tr><td align="center">太</td><td>1 Tb/s = 10<sup>3</sup> Gb/s</td><td>1 TB = 2<sup>10 </sup>GB=1024 GB</td></tr></tbody></table><h6 id="2-带宽"><a href="#2-带宽" class="headerlink" title="2).带宽"></a>2).带宽</h6><p>带宽原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（HZ）。</p><p>在计算机网络中，<code>带宽用来表示网路的通信线路传送数据的能力</code>，通常是指单位时间内从网络中的某一点到另一点所能通过的<code>“最高数据率”</code>，单位是<code>“比特每秒”</code>。（b/s、kb/s、Mb/s、Gb/s)</p><p><code>也可理解为网络设备所支持的最高速度</code></p><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211210231034813.png" alt="理解链路带宽"></p><h6 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3).吞吐量"></a>3).吞吐量</h6><p>表示在<code>单位时间</code>内通过<code>某个网络（或信道、接口）</code>的数据量。单位可以使b/s、kb/s、Mb/s、Gb/s等。</p><p>吞吐量受网络的带宽或网络的额定的频率的限制。</p><blockquote><p><code>信道吞吐量 = 传输的信息总量/总时延</code></p><p><code>信道吞吐量 = 信道的利用率 * 发送方的发送速率</code></p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211210232054557.png" alt="理解吞吐量"></p><h5 id="1-1-3-时延、时延带宽积、RTT和利用率"><a href="#1-1-3-时延、时延带宽积、RTT和利用率" class="headerlink" title="1.1.3 时延、时延带宽积、RTT和利用率"></a>1.1.3 时延、时延带宽积、RTT和利用率</h5><h6 id="1-时延"><a href="#1-时延" class="headerlink" title="1).时延"></a>1).时延</h6><p>时延指的是数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需要的时间。也叫延迟或迟延，单位是秒（s）。</p><table><thead><tr><th align="left">时延类型</th><th>说明</th><th align="center">公式</th></tr></thead><tbody><tr><td align="left">发送/传输时延</td><td>从发送分组的最后一个比特算起，到该分组最后一个比特发送完毕所需的时间</td><td align="center">${数据长度\over 信道带宽/发送速率}$</td></tr><tr><td align="left">传播时延</td><td>取决于电磁波的传播速度和链路长度</td><td align="center">${信道长度\over 传播速率}$</td></tr><tr><td align="left">排队时延</td><td>等待输出/输入链路可用的等待时间</td><td align="center"></td></tr><tr><td align="left">处理时延</td><td>检查是否有错/寻找出口</td><td align="center"></td></tr></tbody></table><h6 id="2-时延带宽积"><a href="#2-时延带宽积" class="headerlink" title="2).时延带宽积"></a>2).时延带宽积</h6><p>时延带宽积又称为<code>以比特为单位的链路长度</code>，即某条链路上有多少比特。</p><blockquote><p>时延带宽积（b) = 传播时延（s) * 带宽（b/s)</p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211110104537.png" alt="理解延时带宽积"></p><h6 id="3-往返时延-RTT"><a href="#3-往返时延-RTT" class="headerlink" title="3).往返时延 RTT"></a>3).往返时延 RTT</h6><p>发送周期：从发送方<code>发送数据开始</code>，到发送方<code>收到接受方的确认</code>（接收方收到数据后立即发送确认）总经历的时延。<code>一般情况下，一个发送周期的总时延 = 发送时延+RTT</code> 。</p><p>RTT越大，收到确认前可以发送的数据越多。</p><blockquote><p>RTT包括往返传播时延<code>（2 * 传播时延）</code>和<code>末端处理时延</code>。</p></blockquote><h6 id="4-利用率"><a href="#4-利用率" class="headerlink" title="4).利用率"></a>4).利用率</h6><table><thead><tr><th>利用率</th><th>公式</th></tr></thead><tbody><tr><td>信道利用率 *</td><td>${有数据通过时间\over 总时间}$  或   ${发送时延\over 总时延}$</td></tr><tr><td>网络利用率</td><td>信道利用率的加权平均值</td></tr></tbody></table><p>令 D<sub>0</sub> 表示网络空闲时的时延，D 表示网络当前的时延， U 是网络的利用率，数值在 0 到 1 之间，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D<sub>0</sub>之间的关系</p><blockquote><p>D =   ${D_0\over 1-U}$  或    U =   ${D-D_0\over D}$ </p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211111131497.png" alt="利用率和时延的关系"></p><h5 id="1-1-4-分层结构、协议、接口、服务"><a href="#1-1-4-分层结构、协议、接口、服务" class="headerlink" title="1.1.4 分层结构、协议、接口、服务"></a>1.1.4 分层结构、协议、接口、服务</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211114139208.png" alt="思维导图"></p><p>分层的基本原则</p><ol><li>各层之间相互独立，每层只实现一-种相对独立的功能。</li><li>每层之间界面自然清晰，易于理解，相互交流尽可能少。</li><li>结构上可分割开。每层都采用最合适的技术来实现。</li><li>保持下层对上层的独立性，上层单向使用下层提供的服务。</li><li>整个分层结构应该能促进标准化工作。</li></ol><h6 id="1-实体"><a href="#1-实体" class="headerlink" title="1).实体"></a>1).实体</h6><p>是指分层结构中第n层中的活动元素称为<code>n层实体</code>。同一层的实体叫做<code>对等实体</code>。</p><h6 id="2-协议"><a href="#2-协议" class="headerlink" title="2).协议"></a>2).协议</h6><p>协议是为进行网络中的<code>对等实体数据交换</code>而建立的规则、标准或约定，称为网络协议。【水平】</p><blockquote><p>协议包括三个部分：语法、语义和同步。</p><p>语法：规定了数据传输的格式；</p><p>语义：规定了所要完成的功能；</p><p>同步：规定各种操作的顺序；</p></blockquote><h6 id="3-接口"><a href="#3-接口" class="headerlink" title="3).接口"></a>3).接口</h6><p>接口又叫访问服务点SAP，是上层使用下层服务的入口。</p><h6 id="4-服务"><a href="#4-服务" class="headerlink" title="4).服务"></a>4).服务</h6><p>服务是下层为上层提供的功能调用。【垂直】</p><h6 id="5-附："><a href="#5-附：" class="headerlink" title="5).附："></a>5).附：</h6><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211113716910.png" alt="各层之间"></p><p>SDU，即服务数据单元，是指为完成用户所要求的功能而应传送的数据。</p><p>PCI，即协议控制信息，是指控制协议操作的信息。</p><p>PDU，即协议数据单元，是指对等层次之间传送的数据单位。</p><h6 id="6-概念总结"><a href="#6-概念总结" class="headerlink" title="6).概念总结"></a>6).概念总结</h6><ol><li>网络体系结构是<code>从功能上描述</code>计算机网络结构。</li><li>计算机网络体系结构简称网络体系结构是分层结构。</li><li>每层遵循某个/些网络协议以完成本层功能。</li><li>计算机网络体系结构是计算机网络的各层及其协议的集合。</li><li>第n层在向n+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能。</li><li>仅仅在相邻层间有接口，且所提供服务的<code>具体实现细节对上一层完全屏蔽</code>。</li><li>体系结构是抽象的，而<code>实现是指能运行的一些软件和硬件</code>。</li></ol><h5 id="1-1-5-计算机网络分层结构"><a href="#1-1-5-计算机网络分层结构" class="headerlink" title="1.1.5 计算机网络分层结构"></a>1.1.5 计算机网络分层结构</h5><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/image-20211211112715900.png" alt="计算机网络体系结构"></p><blockquote><p>7层 开放系统互连（OSI)参考模型（法定标准）</p><p>4层 TCP/IP 参考模型（事实标准）</p><p>5层的计网体系结构（学习使用）</p></blockquote><h6 id="1-开放系统互连（OSI-参考模型"><a href="#1-开放系统互连（OSI-参考模型" class="headerlink" title="1).开放系统互连（OSI)参考模型"></a>1).开放系统互连（OSI)参考模型</h6><h6 id="2-TCP-IP-参考模型"><a href="#2-TCP-IP-参考模型" class="headerlink" title="2).TCP/IP 参考模型"></a>2).TCP/IP 参考模型</h6><h6 id="3-五层参考模型"><a href="#3-五层参考模型" class="headerlink" title="3).五层参考模型"></a>3).五层参考模型</h6><table><thead><tr><th align="center">层次</th><th>任务</th><th>协议</th></tr></thead><tbody><tr><td align="center">应用层</td><td>支持各种网络应用</td><td>FTP、SMTP、HTTP</td></tr><tr><td align="center">传输层</td><td>进程-进程之间的数据传输</td><td>TCP、UDP</td></tr><tr><td align="center">网络层</td><td>源主机到目的主机的数据分组路由与转发</td><td>IP、ICMP、OSPF</td></tr><tr><td align="center">数据链路层</td><td>把网络层传下来的数据报组装成帧</td><td>Ethernet、PPP</td></tr><tr><td align="center">物理层</td><td>比特传输</td><td>略</td></tr></tbody></table><h4 id><a href="#" class="headerlink" title></a><img src="https://gitee.com/mr_tolie/pics/raw/master/images/QQ%E5%9B%BE%E7%89%8720211211214153.png" alt="5层计算机网络结构通信过程"></h4><h4 id="第一章课后习题"><a href="#第一章课后习题" class="headerlink" title="第一章课后习题"></a>第一章课后习题</h4><ol><li><p>计算机网络可以向用户提供哪些服务？</p><blockquote><p>(1)连通服务：指计算机网络使上网用户之间可以交换信息，好像这些用户的计算机可以彼此直接连通一样。<br>(2)资源共享：用户可以共享计算机网络上的信息资源、软件资源和硬件资源。  </p></blockquote></li><li><p>试简述分组交换的要点。</p><blockquote><p>答：分组交换实质上是在“存储——转发”基础上发展起来的。它兼有电路交换和报文交换的优点。分组交换在线路上采用动态复用技术传送按一定长度分割为许多小段的数据——分组。每个分组标识后，在一条物理线路上采用动态复用的技术，同时传送多个数据分组。把来自用户发端的数据暂存在交换机的存储器内，接着在网内转发。到达接收端，再去掉分组头将各数据字段按顺序重新装配成完整的报文。分组交换比电路交换的电路利用率高，比报文交换的传输时延小，交互性好。     </p></blockquote></li><li><p>试从多个方面比较电路交换、报文交换和分组交换的主要优缺点。</p><blockquote><p>答：</p><ol><li>电路交换就是计算机终端之间通信时，一方发起呼叫，独占一条物理线路。当交换机完成接线，对方收到发起端的信号，双方即可进行通信。在整个通信过程中双方一直占用该电路。它的特点是实时性强，时延小，交换设备成本较低。但同时也带来线路利用率低，电路接续时间长，通信效率低，不同类型终端用户之间不能通信等缺点。电路交换比较适用于信息量大、长报文，经常使用的固定用户之间的通信。</li><li>报文交换 ，将用户的报文存储在交换机的存储器中。当所需要的输出电路空闲时，再将该报文发向接收交换机或终端，它以“存储——转发”方式在网内传输数据。报文交换的优点是中继电路利用率高，可以多个用户同时在一条线路上传送，可实现不同速率、不同规程（规则流程）的终端间互通。但它的缺点也是显而易见的。以报文为单位进行存储转发，网络传输时延大，且占用大量的交换机内存和外存，不能满足对实时性要求高的用户。报文交换适用于传输的报文较短、实时性要求较低的网络用户之间的通信，如公用电报网。</li><li>分组交换，分组交换实质上是在“存储——转发”基础上发展起来的。它兼有电路交换和报文交换的优点。分组交换在线路上采用动态复用技术传送按一定长度分割为许多小段的数据——分组。每个分组标识后，在一条物理线路上采用动态复用的技术，同时传送多个数据分组。把来自用户发端的数据暂存在交换机的存储器内，接着在网内转发。到达接收端，再去掉分组头将各数据字段按顺序重新装配成完整的报文。分组交换比电路交换的电路利用率高，比报文交换的传输时延小，交互性好。</li></ol></blockquote></li><li><p>为什么说因特网是自印刷术以来人类通信方面最大的变革？</p><blockquote><p>答：因为因特网正在改变着我们工作和生活的各个方面，它已经给很多国家（尤其是因特网的发源地美国）带来了巨大的好处，并加速了全球信息革命的进程。</p></blockquote></li><li><p>因特网的发展大致分为哪几个阶段？请指出这几个阶段最主要的特点。</p><blockquote><p>答：因特网的发展大致经历了三个阶段。</p><ul><li>第一阶段是从单个网络ARPANET向互联网发展的过程。第一个分组交换网AR PANET最初是一个单个的分组交换网，1983年TCP/IP协议成为了ARPANET上的标准协议，使得所有用TCP/IP协议的计算机都能利用互连网相互通信。因特网诞生了。</li><li>第二阶段的特点是建成了三级结构的因特网。1985年开始，因特网过渡到以美国国家科学基金会网络NSFNET为主要组成部分。该网络分为主干网、地区网和校园网三级，覆盖全美主要大学和研究所。</li><li> 第三阶段的特点是逐渐形成了多层次的ISP结构的因特网。1993年开始，NSFNET逐渐被若干个商用因特网主干网替代。用户可通过不同层次的ISP接入因特网。</li></ul></blockquote></li><li><p>简述因特网标准制定的几个阶段。</p><blockquote><p>答：因特网的正式标准要经过以下四个阶段<br>（1）因特网草案。因特网草案的有效期是六个月，在这阶段还不是RFC文档<br>（2）建议标准。从这阶段开始就成为RFC文档。<br>（3）草案标准。<br>（4）因特网标准。</p></blockquote></li><li><p>小写和大写开头的英文名字 internet和Internet在意思上有何重要的区别？</p><blockquote><p>答：</p><ul><li>以小写字母i开始的internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。在这些网络之间的通信协议（即通信规则）可以是任意的。</li><li>以大写字母I开始的Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用TCP/IP协议作为通信的规则，且其前身是美国的ARPANET。（Internet是internet中的一个）</li></ul></blockquote></li><li><p>计算机网络都有哪些类别？各种类别的网络都有哪些特点？</p><blockquote><p>答：1、不同作用范围的网络：<br>（1）广域网WAN（wide)：广域网的作用范围通常为几十到几千公里。<br>（2）城域网MAN(metropolitan)：城域网的作用范围一般是一个城市，可跨越几个街区甚至整个城市，其作用距离约为5~50km。<br>（3）局域网LAN(local)：局域网一般用微型计算机或工作站通过高速通信线路相连，但地理上则局限在较小的范围（如1km左右）。<br>（4）个人区域网PAN(personal)：个人区域网就是在个人工作地方把属于个人使用的电子设备用无线技术连接起来的网络，其范围大约在10m左右。<br>2、不同使用者的网络：<br>（1）公用网：这是指电信公司出资建造的大型网络。<br>（2）专用网：这是某个部门为本单位的特殊业务工作的需要而建造的网络。<br>3、用来把用户接入到因特网的网络<br>接入网是用户与因特网连接的“桥梁”。</p></blockquote></li><li><p>计算机网络中的主干网和本地接入网的主要区别是什么？</p><blockquote><p>答：主干网络一般是分布式的，具有分布式网络的特点：其中任何一个结点都至少和其它两个结点直接相连；而本地接入网一般是集中式的，具有集中式网络的特点：所有的信息流必须经过中央处理设备（交换结点），链路从中央交换结点向外辐射。</p></blockquote></li><li><p>试在下列条件下比较电路交换和分组交换。要传送的报文共x（bit），从源站到目的站共经过k段链路，每段链路的传播时延为d（s），数据率为b（bit/s）。在电路交换时电路的建立时间为s（s）。在分组交换时分组长度为p（bit），且各结点的排队等待时间可忽略不计。问在怎样的条件下，分组交换的时延比电路交换的要小？</p><blockquote><p>电路交换：总时延 = s+x/b+k<em>d<br>分组交换：总时延 = x/b+(k-1)p/b+k</em>d。[ (k-1)p/b 表示k段传输中，有(k-1)次的储存转发延迟]<br>要使分组交换的时延小于电路交换时延，即 s+x/b+k<em>d &gt; x/b+(k-1)p/b+k</em>d，所以当 s&gt;(k-1)*p/b时分组交换的时延比电路交换的要小</p></blockquote></li><li><p>在上题的分组交换网中，设报文长度和分组长度分别为x和(p+h)(bit)，其中p为分组的数据部分的长度，而h为每个分组所带的控制信息固定长度，与p的大小无关。通信的两端共经过k段链路。链路的数据率为b（bit/s），但传播时延和结点的排队时间均可忽略不计。若打算使总的时延为最小，问分组的数据部分长度p应取为多大？</p><blockquote><p>分组个数 = x/p<br>传输的总比特数 = 分组长度<em>分组数 = (p+h)</em>(x/p)<br>源发送时延 = 传输的总比特数/数据率 =  [ (p+h)<em>(x/p) ]/b<br>存储转发时延 = (k-1) * [(p+h)/b]<br>总时延 = 源发送时延 + 存储转发时延 =[ (p+h)</em>(x/p) ]/b  +  (k-1) * [(p+h)/b] </p><p>对总时延表达式的p求导，并令导数为零，求得使总时延最小的p值</p></blockquote></li><li><p>因特网的两大组成部分（边缘部分与核心部分）的特点是什么？它们的工作方式各有什么特点？</p><blockquote><p>答: (1) 边缘部分：由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。在网络边缘的端系统中运行的程序之间的通信方式为客户服务器方式和对等方式。<br>   (2) 核心部分：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。核心部分主要通过路由器实现分组交换。</p></blockquote></li><li><p>客户服务器方式与对等通信方式的主要区别是什么？有没有相同的地方？</p><blockquote><p>答：</p><ol><li>主要区别：客户服务器描述的是进程之间的服务与被服务的关系，客户是服务请求方，服务器是服务；而对等通信方式并不区分哪一个是服务请求方还是服务提供方，只要两个主机都运行了对等连接软件，就可以进行平等的、对等连接通信。</li><li>相同的地方：客户服务器方式和对等通信方式都是端系统运行的程序之间的通信方式。对等连接方式从本质上看仍然是使客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。</li></ol></blockquote></li><li><p>计算机网络有哪些常用的性能指标?</p><blockquote><p>答：速率，带宽，吞吐量，时延，时延带宽积，往返时间RTT，利用率</p></blockquote></li><li><p>假定网络的利用率到达了90%。试估算一下现在的网络时延是它的最小值的多少倍？</p><blockquote><p>答：</p><ul><li>D=D0/(1-U) = D0/ (1-90%) =D0/0.1。</li><li> D/D0=10。</li><li> 所以现在的网络时延是它的最小值的10倍。</li></ul></blockquote></li><li><p>计算机通信网有哪些非性能特征？非性能特征与性能指标有什么区别？</p><blockquote><p>答：计算机通信网的非性能特征有：费用，质量，标准化，可靠性，可扩展性和可升级性，易于管理和维护。<br> 区别：</p><ul><li>性能指标是从不同的方面来直接度量计算机网络的性能，而非性能特征虽然与性能指标有很大的关系，对计算机网络的性能也有很大的影响，但不是直接用来度量网络性能的。</li></ul></blockquote></li><li><p>收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×10^8m/s。试计算以下两种情况的发送时延和传播时延：<br>   （1） 数据长度为10^7bit,数据发送速率为100kbit/s。<br>   （2） 数据长度为10^3bit,数据发送速率为1Gbit/s。</p><p> 从上面的计算中可以得到什么样的结论？</p><blockquote><p>答：(1) 发送时延 = 10^7bit/100kbit/s = 100s</p><pre><code>     传播时延 = 1000km/(2*10^8m/s) = 0.005s = 5ms</code></pre><p>(2)  发送时延 = 10^3bit/1Gbit/s =1um</p><pre><code>     传播时延 = 1000km/2*10^8m/s=5ms</code></pre><p>结论：发送时延与传输信道的长度没有任何关系，传播时延与信号的发送速率无关</p></blockquote></li><li><p>假设信号在媒体上的传播速率为2.3×10^8m/s。媒体长度l分别为：</p><pre><code>(1) 10cm（网卡）(2) 100m（局域网）(3) 100km（城域网）(4) 5000km（广域网）</code></pre><p>  试计算当带宽为1Mbit/s和10Gbit/s时在以上媒体中正在传输的比特数。</p><blockquote><p>答： 带宽为1Mbit/s时在以上媒体中正在传输的比特数 （时延带宽积）</p><ol><li>10cm：时延带宽积 = 10cm/ (2.3×10^8m/s) *1Mbit/s ≈ 0.00043bit</li><li>100m：时延带宽积 = 100m/ (2.3×10^8m/s) *1Mbit/s ≈ 0.43bit</li><li>100km：时延带宽积 = 100km/ (2.3×10^8m/s) *1Mbit/s ≈ 0.43x10^3bit</li><li>5000km：时延带宽积 = 5000km/ (2.3×10^8m/s) *1Mbit/s ≈ 2.17x10^4bit</li></ol><p>带宽为10Gbit/s时在以上媒体中正在传输的比特数 （时延带宽积）</p><ol><li>10cm：时延带宽积 = 10cm/ (2.3×10^8m/s) *10Gbit/s ≈ 0.43bit</li><li>100m：时延带宽积 = 100m/ (2.3×10^8m/s) *10Gbit/s ≈ 0.43x10^3bit</li><li>100km：时延带宽积 = 100km/ (2.3×10^8m/s) *10Gbit/s ≈ 0.43x10^6v</li><li>5000km：时延带宽积 = 5000km/ (2.3×10^8m/s) *10Gbit/s ≈ 2.17x10^7 bit</li></ol></blockquote></li><li><p>长度为100字节的应用层数据交给运输层传送，需加上20字节的TCP首部。再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部18字节。试求数据的传输效率。数据的传输效率是指发送的应用层数据除以所发送的总数（即应用数据加上各种首部和尾部的额外开销）。若应用层数据长度为1000字节，数据的传输效率是多少？</p><blockquote><p>答：</p><ol><li>长度为100字节时，传输效率=100/（100+20+20+18）= 63.3%</li><li>长度为1000字节时，传输效率=1000/（1000+20+20+18）= 94.5%</li></ol></blockquote></li><li><p>网络体系结构为什么要采用分层次的结构？试举出一些与分层体系结构的思想相似的日常生活。</p><blockquote><p>答：①各层之间是独立的。某一层可以使用其下一层提供的服务而不需要知道服务是如何实现的。②灵活性好。当某一层发生变化时，只要其接口关系不变，则这层以上或以下的各层均不受影响。③结构上可分割开。各层可以采用最合适的技术来实现④易于实现和维护。⑤能促进标准化工作。</p><p>与分层体系结构的思想相似的日常生活有邮政系统，物流系统。</p></blockquote></li><li><p>协议与服务有何区别？有何关系？</p><blockquote><p>答：网络协议：为进行网络中的数据交换而建立的规则、标准或约定。由以下三个要素组成：<br>（1）语法：即数据与控制信息的结构或格式。<br>（2）语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。<br>（3）同步：即事件实现顺序的详细说明。协议是控制两个对等实体进行通信的规则的集合。在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务，而要实现本层协议，还需要使用下面一层提供服务。<br>协议和服务的概念的区分：</p><ol><li>协议的实现保证了能够向上一层提供服务。本层的服务用户只能看见服务而无法看见下面的协议。下面的协议对上面的服务用户是透明的。</li><li>协议是“水平的”，即协议是控制两个对等实体进行通信的规则。但服务是“垂直的”，即服务是由下层通过层间接口向上层提供的。上层使用所提供的服务必须与下层交换一些命令，这些命令在OSI中称为服务原语。</li></ol></blockquote></li><li><p>网络协议的三个要素是什么？各有什么含义？</p><blockquote><p>答：网络协议：为进行网络中的数据交换而建立的规则、标准或约定。由以下三个要素组成：<br>（1）语法：即数据与控制信息的结构或格式。<br>（2）语义：即需要发出何种控制信息，完成何种动作以及做出何种响应。<br>（3）同步：即事件实现顺序的详细说明。</p></blockquote></li><li><p>为什么一个网络协议必须把各种不利的情况都考虑到？</p><blockquote><p>答：因为网络协议如果不全面考虑不利情况，当情况发生变化时，协议就会保持理想状况，一直等下去！就如同两个朋友在电话中约会好，下午3点在公园见面，并且约定不见不散。这个协议就是很不科学的，因为任何一方如果有耽搁了而来不了，就无法通知对方，而另一方就必须一直等下去！所以看一个计算机网络是否正确，不能只看在正常情况下是否正确，而且还必须非常仔细的检查协议能否应付各种异常情况。</p></blockquote></li><li><p>论述具有五层协议的网络体系结构的要点，包括各层的主要功能。</p><blockquote><p>答：综合OSI 和TCP/IP 的优点，采用一种原理体系结构。各层的主要功能：<br>  ①  物理层 物理层的任务就是透明地传送比特流。（注意：传递信息的物理媒体，如双绞线、同轴电缆、光缆等，是在物理层的下面，当做第0 层。） 物           理层还要确定连接电缆插头的定义及连接法。<br>  ②  数据链路层 数据链路层的任务是在两个相邻结点间的线路上无差错地传送以帧（frame）为单位的数据。每一帧包括数据和必要的控制信息。<br>  ③  网络层 网络层的任务就是要选择合适的路由，使 发送站的运输层所传下来的分组能够正确无误地按照地址找到目的站，并交付给目的站的运输层。<br>  ④  运输层 运输层的任务是向上一层的进行通信的两个进程之间提供一个可靠的端到端服务，使它们看不见运输层以下的数据通信的细节。<br>  ⑤  应用层 应用层直接为用户的应用进程提供服务。</p></blockquote></li><li><p>试举出日常生活中有关“透明”这种名词的例子。</p><blockquote><p>答：电视，计算机视窗操作系统、工农业产品</p></blockquote></li><li><p>试解释以下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式。</p><blockquote><p>答：协议数据单元:对等层实体进行信息交换的数据单位.服务访问点:在同一系统中相邻两层的实体进行交互（即交换信息）的地方.</p><ul><li>实体(entity) 表示任何可发送或接收信息的硬件或软件进程。<br> 协议是控制两个对等实体进行通信的规则的集合。</li><li> 客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。客户是服务的请求方，服务器是服务的提供方。</li><li> 客户服务器方式所描述的是进程之间服务和被服务的关系。</li><li>协议栈:指计算机网络体系结构采用分层模型后,每层的主要功能由对等层协议的运行来实现,因而每层可用一些主要协议来表征,几个层次画在一起很像一个栈的结构.</li><li> 对等层:在网络体系结构中,通信双方实现同样功能的层.</li><li>服务访问点:在同一系统中相邻两层的实体进行交互（即交换信息）的地方.服务访问点SAP是一个抽象的概念,它实体上就是一个逻辑接口.</li></ul></blockquote></li><li><p>试解释everything over IP 和IP over everthing 的含义。</p><blockquote><p>答：</p><ul><li>everything over IP指IP协议可以为各式各样的应用提供服务。</li><li> IP over everything指允许IP协议在各式各样的网络构成的互联网上运行。</li></ul></blockquote></li><li><p>假定要在网络上传送1.5MB的文件。设分组长度为1KB，往返时间RTT=80ms。传送数据之前还需要有建立TCP连接的时间，这需要2<em>RTT = 160ms。试计算在以下几种情况下接收方收到该文件的最后一个比特所需的时间。<br> （1）数据发送速率为10Mbit/s，数据分组可以连续发送。<br> （2）数据发送速率为10Mbit/s，但每发送完一个分组后要等待一个RTT时间才能在发送下一个分组。<br> （3）数据发送率极快，可以不考虑发送数据 所需要的时间。但规定每一个RTT往返时间内只能发送20个分组。<br> （4）数据发送速率极快，可以不考虑发送数据所需的时间。但在第一个RTT往返时间内只能发送一个分组，在第二个RTT内可发送两个分组，在三个RTT内可发送4个分组（即2^(3-1)=2^2 = 4个分组）。</em></p><blockquote><p>答: </p><ol><li>发送时间 = 1.5MB/10Mbit/s = (1.5<em>1024</em>1024*8)bit / 10Mbit/s = 12582912bit/10Mbps =1.258s<ul><li>最后一个分组的传播时间 = 0.5RTT=40ms</li><li>总时间 = 2RTT+1.258s+40ms = 1.458s </li></ul></li><li>需要划分的分组数 = 1.5MB/1KB = 1536 等待时间 = 1535RTT = 122.8s<ul><li>总时间 = 1.458s + 122.8s = 124.258s</li></ul></li><li> 每一个RTT时间内只能发送20个分组。1536个分组，需要76个RTT，76X20=1520，最后剩下16个分组，一次发送完。最后发送分组到达对方需要0.5RTT</li></ol><ul><li>总时间 = 76.5RTT + 2RTT = 6.12 + 0.16 = 6.28s</li></ul><ol start="4"><li> 经过n个RTT后发送分组为：1+2+4+…+2^n=2^(n+1)-1个分组， n=9，发送分组=2^10-1=1023，可见9个RTT不够。 </li></ol><ul><li>n=10，发送分组=2^11-1=2047     总时间 = （2+10+0.5）RTT = 1s</li></ul></blockquote></li><li><p>考虑一条长度为50Km 的点到点链路，对一个100 字节的分组，带宽为多大时其传播延迟（速度为2*10^8m/s）等于发送延迟？对于512 字节的分组，情况又如何？</p><blockquote><p>解：传播时延：50<em>10^3m/（2</em>10^8m/s）=25<em>10^(-5)s=250us<br>100字节时带宽=100bit</em>8/250us=3.2Mb/s<br>512字节时带宽=512bit*8/250us=16384Kb/s</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML about Forms</title>
      <link href="/2021/12/05/HTML%20%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/12/05/HTML%20%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5表单验证"><a href="#HTML5表单验证" class="headerlink" title="HTML5表单验证"></a>HTML5表单验证</h1><h2 id="第一章-基本表单验证特征"><a href="#第一章-基本表单验证特征" class="headerlink" title="第一章 基本表单验证特征"></a>第一章 基本表单验证特征</h2><h3 id="一、HTML5中有那些类型"><a href="#一、HTML5中有那些类型" class="headerlink" title="一、HTML5中有那些类型"></a>一、HTML5中有那些类型</h3><p><a href="https://www.cnblogs.com/dadayang/p/5749068.html">HTML5的表单所有type类型 </a></p><h3 id="二、需要特殊记忆的特性"><a href="#二、需要特殊记忆的特性" class="headerlink" title="二、需要特殊记忆的特性"></a>二、需要特殊记忆的特性</h3><p>1、autocomplete：文本框中，输入一次下一次会自动提示；</p><p>2、autofocus：初始化页面之后，让input自动获得焦点；</p><p>3、list和datalist：</p><p>​    datalist与select类似，标签定义选项列表，通常与input元素配合使用该元素，datalist元素的内容不会直接显示在网页上，只是会在用户输入时作为候选项。</p><pre class=" language-html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>capital<span class="token punctuation">'</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>address<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beijing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shanghai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shenzhen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span></code></pre><p>​    datalist与select的区别：</p><table><thead><tr><th align="center">异同点</th><th align="center">select</th><th align="center">datalist</th></tr></thead><tbody><tr><td align="center">多选</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center">缺失值</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center">查找</td><td align="center">不可以</td><td align="center">可以</td></tr><tr><td align="center">增添选项</td><td align="center">不可以</td><td align="center">可以</td></tr></tbody></table><p>4、required：设置表单元素为必填项；</p><p>5、pattern：表单验证使用正则表达式；比如要求邮箱的格式，==不符合规范不会提交==，并提示用户所输内容不符合规范</p><p>6、novalidate 和 formnovalidate：在设置表单元素必填的情况下，提交表单但不验证；</p><p>​    区别：novalidate 应用于表单，并防止验证；</p><p>​               formnovalidate 应用于提交按钮，并覆盖 novalidate 选项（如果存在）；</p><p>​               这意味着 ‘提交此表单而不验证，无论一般表单设置如何’。</p><p>代码展示：</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- &lt;form action="post" novalidate> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>邮箱:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入注册邮箱！<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名！<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码！<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^\d&amp;#123;5&amp;#125;[abcd]$<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>capital<span class="token punctuation">'</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>address<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beijing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shanghai<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shenzhen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;input type="submit" formnovalidate>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>最终效果：</p><p>![image-20211128232845753](HTML 表单验证/image-20211128232845753.png)</p><h3 id="三、HTML约束验证的API"><a href="#三、HTML约束验证的API" class="headerlink" title="三、HTML约束验证的API"></a>三、HTML约束验证的API</h3><p><code>H5中document.getElementById(&quot; &quot;) === id ，但这是H5的新特性，不推荐这样写</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>validity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">===</span> username<span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--此页面，控制台输出结果为true；证明H5中 document.getElementById(" ") === id是正确的--></span></code></pre><h4 id="主要的HTML约束验证的API"><a href="#主要的HTML约束验证的API" class="headerlink" title="主要的HTML约束验证的API"></a>主要的HTML约束验证的API</h4><ol><li>willValidate属性：代表元素约束有没有被符合，没有被符合则返回false；</li><li>validity属性 *：表示元素当前所处的验证状态，表示验证是否成功；</li><li>validationMessage属性：用于描述与元素相关约束的失败信息；</li><li>checkValidity()方法 *：用的也很多，主要是看元素有没有满足他的任意约束，不满足返回false，满足返回true；</li><li>setCustomValidity()方法 *：设置自定义的验证信息。当表项设置成了required时候，可以用此方法设置/预定义弹出的提示信息；</li></ol><h4 id="validity属性的介绍及演示"><a href="#validity属性的介绍及演示" class="headerlink" title="validity属性的介绍及演示"></a>validity属性的介绍及演示</h4><ul><li>属性介绍：</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>validity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>validity<span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>在此页面控制台上可以得到如下图所示的属性</li></ul><p>![image-20211129193340142](HTML 表单验证/image-20211129193340142-16391563406043.png)</p><ul><li>代码演示：</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- valueMissing属性值改成true--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- patternMismatch属性值改成true--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adfafea<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^\d[5]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- typeMismatch属性值改成true，以type为email为例--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>adfafea<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- rangeOverflow属性值改成true--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- rangeUnderflow属性值改成true--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- tooShort和tooLong 与 minlength和maxlength是对应的，但即使设置了这两个属性·，tooShort和tooLong依然会是false--></span></code></pre><h4 id="checkValidity-方法的介绍及演示"><a href="#checkValidity-方法的介绍及演示" class="headerlink" title="checkValidity()方法的介绍及演示"></a>checkValidity()方法的介绍及演示</h4><ul><li>方法介绍</li></ul><p>checkValidity()方法 *：主要是看元素有没有满足他的任意约束，不满足返回false，满足返回true；</p><ul><li>代码演示</li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12345<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^\d&amp;#123;5&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kfajihfioua@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>        if (username.checkValidity()) <span class="token entity" title="&#123;">&amp;#123;</span>            alert("符合正则表达式")        <span class="token entity" title="&#125;">&amp;#125;</span> else <span class="token entity" title="&#123;">&amp;#123;</span>            alert("不符合")        <span class="token entity" title="&#125;">&amp;#125;</span>        if (email.checkValidity()) <span class="token entity" title="&#123;">&amp;#123;</span>            alert("符合")        <span class="token entity" title="&#125;">&amp;#125;</span> else <span class="token entity" title="&#123;">&amp;#123;</span>            alert("不符合")        <span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h4 id="setCust0mValidity-方法的介绍及演示"><a href="#setCust0mValidity-方法的介绍及演示" class="headerlink" title="setCust0mValidity()方法的介绍及演示"></a>setCust0mValidity()方法的介绍及演示</h4><ul><li>方法介绍</li></ul><p>设置自定义的验证信息。当表项设置成了required时候，可以用此方法设置/预定义弹出的提示信息；</p><ul><li>代码演示</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密 码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码！<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">oninput</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkPaw(this)<span class="token punctuation">"</span></span> <span class="token attr-name">required</span>                        <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^\d&amp;#123;5&amp;#125;$<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">function</span> <span class="token function">checkPaw</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> password <span class="token operator">=</span> obj<span class="token punctuation">.</span>validity<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">===</span> password<span class="token punctuation">.</span>valueMissing<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span><span class="token string">"密码不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">===</span> password<span class="token punctuation">.</span>patternMismatch<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span><span class="token string">"密码必须是5位数字！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="四、HTML自带验证美化"><a href="#四、HTML自带验证美化" class="headerlink" title="四、HTML自带验证美化"></a>四、HTML自带验证美化</h3><p>要做出不一样的表单验证，需要==了解一些伪类和css选择器==</p><ol><li>:required 和 :optional：前者必填，后者是选填</li><li>:in-range 和 :out-of-range：前者在范围之内，后者在范围之外</li><li>:valid 和 :invalid：前者不符合验证，后者符合验证</li><li>:read-only 和 :read-write： 前者为只读不能写，后者为可以写（在input或者div中匹配）</li></ol><ul><li>代码演示</li></ul><p>==学完css回来补充==</p><p>(1). 默认气泡修改</p><ul><li><p>思路：阻止默认气泡，后创建新的气泡</p></li><li><p>代码实现</p></li></ul><p>==学完js再看一遍==</p>]]></content>
      
      
      <categories>
          
          <category> Frond End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deploy project</title>
      <link href="/2021/12/04/web%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/12/04/web%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="部署说明"><a href="#部署说明" class="headerlink" title="部署说明"></a>部署说明</h2><h3 id="一、部署本地服务器"><a href="#一、部署本地服务器" class="headerlink" title="一、部署本地服务器"></a>一、部署本地服务器</h3><blockquote><ol><li>现将users.sql导入MySQL数据库，数据库名为users</li><li>数据库root用户的用户名设置为root，密码为666666</li><li>将fight.war导入eclipse或者idea，选用编码集UTF-8</li><li>为项目部署tomcat</li><li>访问<a href="http://localhost:8080/+%E9%A1%B9%E7%9B%AE%E5%90%8D">http://localhost:8080/+项目名</a></li></ol></blockquote><h3 id="二、部署网络服务器"><a href="#二、部署网络服务器" class="headerlink" title="二、部署网络服务器"></a>二、部署网络服务器</h3><ol><li>阿里云服务器</li></ol><blockquote><p>操作系统：CentOS 7.45  X64,</p><p>服务器：apache-tomcat-8</p><p>JDK：oracle jdk 12.0.1</p><p>工具：SecureCRT 8.3和SecureFX 8.3</p><p>未使用宝塔面板辅助部署</p></blockquote><ol start="2"><li><p>部署步骤</p><blockquote><ol><li><p>上传sql文件并设置大小写不敏感</p><p>vi /etc/my.cnf<br>在[mysqld]后添加<br>lower_case_table_names=1<br>重启mysql<br>systemctl restart mysqld.service</p></li><li><p>创建数据库并导入数据</p><p>mysql -uroot -p+密码</p></li></ol><p>CREATE DATABASE 数据库名 DEFAULT CHARACTER SET utf8;</p><p>ctrl+c退出数据库</p><p>mysql -u root -p+密码 –default-character-set=utf8 数据库名 &lt; sql文件路径</p><ol start="3"><li><p>部署到tomcat</p><ul><li>修改server.xml</li><li>在&lt;host 添加<br>&lt;Context path=”/名称” docBase=”web文件路径” debug=”0” reloadable=”false” </li><li>重启tomcat</li></ul></li></ol></blockquote></li><li><p>已上传的web项目信息</p></li></ol><blockquote><p>个人服务器地址：<a href="http://47.95.194.205:8080/fight/%EF%BC%88%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B7%B2%E8%BF%87%E6%9C%9F%EF%BC%89">http://47.95.194.205:8080/fight/（服务器已过期）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> project-manage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS for beginner (part 1)</title>
      <link href="/2021/12/03/CSS%20for%20beginner/"/>
      <url>/2021/12/03/CSS%20for%20beginner/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h1><ul><li>好看的颜色</li></ul><table><thead><tr><th align="center">颜色</th><th></th></tr></thead><tbody><tr><td align="center">波尔多红</td><td><strong>rgb(76,0,9)</strong></td></tr><tr><td align="center">勃艮第红</td><td><strong>rgb(128,0,32)</strong></td></tr><tr><td align="center">提香红</td><td><strong>rgb(176,89,35)</strong></td></tr><tr><td align="center">苋菜紫</td><td><strong>rgb(142,41,97)</strong></td></tr><tr><td align="center">木乃伊棕</td><td><strong>rgb(143,75,40)</strong></td></tr><tr><td align="center">普鲁士蓝</td><td><strong>rgb(0,49,83)</strong></td></tr><tr><td align="center">邦迪蓝</td><td><strong>rgb(0,149,182)</strong></td></tr><tr><td align="center">卡布里蓝</td><td><strong>rgb(26,85,153)</strong></td></tr><tr><td align="center">蒂芙尼蓝</td><td><strong>rgb(129,216,208)</strong></td></tr></tbody></table><h3 id="一、CSS初识"><a href="#一、CSS初识" class="headerlink" title="一、CSS初识"></a>一、CSS初识</h3><p>CSS也称为层叠样式表，主要用于设置HTML页面的各种外观显示样式；</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制等，而且还可以根据不同的浏览器设置不同的样式；</p><p>CSS效果优先于HTML效果，即CSS效果可以覆盖HTML效果。</p><h3 id="二、CSS的样式规则"><a href="#二、CSS的样式规则" class="headerlink" title="二、CSS的样式规则"></a>二、CSS的样式规则</h3><blockquote><p>选择器 + { 属性:值;属性:值;属性:值 }</p></blockquote><ol><li>选择器用于指定CSS样式作用的HTML标签，花括号内是对该对象设置的具体样式；</li><li>属性和属性值以“键值对”的形式出现；</li><li>属性是对指定对象设置样式的属性，例如字体大小，文本颜色等；</li><li>属性和属性值之间用英文的冒号“ : ”连接；</li><li>多个键值对之间用英文的分号“ ; ”分割；</li></ol><h3 id="三、CSS的字体样式属性"><a href="#三、CSS的字体样式属性" class="headerlink" title="三、CSS的字体样式属性"></a>三、CSS的字体样式属性</h3><h4 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size    字号大小"></a>font-size    字号大小</h4><p>（相对长度单位使用较多，故没写绝对长度单位</p><table><thead><tr><th align="center">相对长度单位</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">em</td><td align="center">相对于当前对象内文本的字体尺寸</td></tr><tr><td align="center">px **</td><td align="center">像素，最为常用</td></tr></tbody></table><h4 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family   字体"></a>font-family   字体</h4><ul><li>注意： </li></ul><p>可以指定多个字体，中间用英文逗号隔开；</p><p>表示如果浏览器不支持第一个字体，会自动尝试下一个，直到找到合适的字体。</p><ul><li>小技巧：</li></ul><ol><li>现今网页中普遍使用的字号为14px，普遍使用的字体为宋体和微软雅黑；</li><li>尽量使用偶数的字号，一些老浏览器支持奇数会出现bug；</li><li>各种字体之间必须用英文逗号隔开；</li><li>==中文字体需要加英文状态下的引号==，比如 font-family:”宋体”；英文字体一般不需要加引号。</li><li>==当需要设置英文字体时，英文字体名必须位于中文字体名之前==；</li><li>如果字体名中包含空格，#，$等符号，则该字体必须加上英文状态下的单引号或双引号，如font-family:”Times New Roman”;</li><li>尽量使用系统字体，保证任何用户的浏览器都可以正常显示；</li></ol><h4 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h4><p>在CSS中设置字体名称，直接写中文是可以的，但在文件编码不匹配的时候会产生乱码的错误，比如xp系统就不支持微软雅黑的中文字体</p><ul><li>解决方案：</li></ul><p>一、使用英文字体来代替，比如font-family:”Microsoft Yahei”;</p><p>二、在CSS中直接使用Unicode编码来写字体名称。使用Unicode编码写中文字体名称，浏览器是可以正确解析的，比如font-family:”\5FAE\8F6F\96C5\9ED1”;表示设置字体为微软雅黑；</p><h4 id="font-weight-字号加粗"><a href="#font-weight-字号加粗" class="headerlink" title="font-weight   字号加粗"></a>font-weight   字号加粗</h4><p>提倡使用数字来表示字体粗细；</p><table><thead><tr><th align="center">属性值</th><th>说明</th></tr></thead><tbody><tr><td align="center">normal</td><td>正常的字体，==相当于数字的400==</td></tr><tr><td align="center">bold</td><td>粗体，==相当于数字的700==</td></tr><tr><td align="center">bolder</td><td>定义比继承值更重的值</td></tr><tr><td align="center">lighter</td><td>定义比继承值更轻的值</td></tr><tr><td align="center">&lt;integer&gt;</td><td>用数字表示文本字体的粗细，取值范围：100|200|300|……|800|900</td></tr></tbody></table><h4 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style    字体风格"></a>font-style    字体风格</h4><p>可以使用HTML中的&lt; i &gt;和&lt; em &gt;标签，CSS中使用font-style；</p><table><thead><tr><th align="center">属性值</th><th>说明</th></tr></thead><tbody><tr><td align="center">normal</td><td>正常的字体</td></tr><tr><td align="center">italic</td><td>设置为倾斜的字体</td></tr><tr><td align="center">oblique</td><td>==不经常使用==</td></tr></tbody></table><h4 id="font-综合设置字体样式"><a href="#font-综合设置字体样式" class="headerlink" title="font  综合设置字体样式 *"></a>font  综合设置字体样式 *</h4><ul><li>基本语法格式</li></ul><blockquote><p>选择器 + { font: font-style font-weight font-size/line-weight font-family; }</p></blockquote><p>==使用font属性时，必须按照上面的语法格式中的顺序书写，不能更换顺序，各属性之间用空格隔开；==</p><ul><li>注意：</li></ul><p>其中不需要设置的属性可以忽略（取默认值），但必须保留font-size和font-family属性，否则font属性不起作用。</p><h3 id="四、类选择器"><a href="#四、类选择器" class="headerlink" title="四、类选择器 **"></a>四、类选择器 **</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>可以快速为页面中的同一标签设置样式，但也是他的缺点，即不能设计差异化的样式。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*格式：标签名  +  &amp;#123;属性:属性值;属性:属性值;属性:属性值;&amp;#125;*/</span>p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">600</span> <span class="token number">20</span>px <span class="token string">"宋体"</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- a标签 + ”# + id“实现页面内跳转--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#wushi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>武师时期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#jiahe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>嘉禾时期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#luowei<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>罗威时期<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li>类命名小技巧</li></ul><ol><li>长名称或词组可以使用短横线来为选择器命名；</li><li>不建议使用下划线“_”来命名css选择器；（避免兼容性问题，输入更加方便</li><li>不要使用纯数字或者中文命名，最好使用英文字母表示；</li></ol><pre class=" language-css"><code class="language-css">&lt;!-- 格式：<span class="token number">.</span>类名  +  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> -->span &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>blue &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>orange &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>yellow &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>green &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h4><p>一个对象可以有多个类名，中间用空格隔开，使得类名选择器使用更加灵活；</p><ul><li>注意</li></ul><p>如果上下样式显示效果有冲突，此时的显示效果跟HTML中元素的类名先后顺序没有关系，</p><p>受CSS样式的书写的上下顺序影响。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">     <span class="token number">.</span>G &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token number">.</span>blue &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue G<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>G<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><pre class=" language-css"><code class="language-css">&lt;!-- 格式：#id名  +  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> -->#font-s &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><ul><li>id选择器和类选择器的区别</li></ul><ol><li>在一个文件中id名称不可以重复，类似于身份证号；</li><li>在一个文件中类名可以重复，类似于姓名，比如张伟；</li><li>id选择器前面是“#”，类选择器前面是“.”</li></ol><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>“ * ”代表页面中的所有元素</p><pre class=" language-css"><code class="language-css">&lt;!-- 格式：*  +  &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>属性<span class="token punctuation">:</span>属性值<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span> -->* &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    color：red；    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器 *"></a>伪类选择器 *</h4><h5 id="1-链接伪类选择器"><a href="#1-链接伪类选择器" class="headerlink" title="1. 链接伪类选择器"></a>1. 链接伪类选择器</h5><table><thead><tr><th align="left">链接伪类选择器（主要针对a标签）</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">:link</td><td align="left">未访问的链接</td></tr><tr><td align="left">:visited</td><td align="left">已访问的链接</td></tr><tr><td align="left">:hover</td><td align="left">鼠标移动到链接上</td></tr><tr><td align="left">:active</td><td align="left">选定的链接，即点击但还没有松开的状态</td></tr></tbody></table><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*未访问的链接*/</span><span class="token property">a</span><span class="token punctuation">:</span>link &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*已访问的链接*/</span><span class="token property">a</span><span class="token punctuation">:</span>visited &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*鼠标放在链接上*/</span><span class="token property">a</span><span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*点击了链接还没有松开*/</span><span class="token property">a</span><span class="token punctuation">:</span>active &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><code>顺序不能随便调整，必须按照如上的顺序，简记为LV好（LV hao），所以顺序是l-v-h-a</code></p><ul><li>简写链接伪类选择器</li></ul><pre class=" language-css"><code class="language-css">a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*未访问的链接*/</span><span class="token property">a</span><span class="token punctuation">:</span>link &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*已访问的链接*/</span><span class="token property">a</span><span class="token punctuation">:</span>visited &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*鼠标放在链接上*/</span><span class="token property">a</span><span class="token punctuation">:</span>hover &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*点击了链接还没有松开*/</span><span class="token property">a</span><span class="token punctuation">:</span>active &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h5 id="2-结构-位置-伪类选择器-CSS-3的新特性"><a href="#2-结构-位置-伪类选择器-CSS-3的新特性" class="headerlink" title="2. 结构(位置)伪类选择器(CSS 3的新特性)"></a>2. 结构(位置)伪类选择器(CSS 3的新特性)</h5><table><thead><tr><th>结构(位置)伪类选择器</th><th>含义</th></tr></thead><tbody><tr><td>:first-child</td><td>选取属于父元素的首个子元素的指定选择器</td></tr><tr><td>:last-child</td><td>选取属于父元素的最后一个子元素的指定选择器</td></tr><tr><td>:nth-child(n)</td><td>选取属于父元素的第n个子元素，不论元素的类型</td></tr><tr><td>:nth-last-child(n)</td><td>选取属于父元素的<code>倒数</code>第n个子元素，不论元素的类型</td></tr></tbody></table><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 选择第一个孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span>first-child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">76</span>, <span class="token number">0</span>, <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 选择最后一个孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span>last-child &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">129</span>, <span class="token number">216</span>, <span class="token number">208</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 选择偶数孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>even<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">49</span>, <span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span>n<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">143</span>, <span class="token number">75</span>, <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 选择奇数孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">143</span>, <span class="token number">75</span>, <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span>n-<span class="token number">1</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">143</span>, <span class="token number">75</span>, <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 选择3的倍数孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">3</span>n<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">143</span>, <span class="token number">75</span>, <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 选择倒数第3个孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-last-child</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">49</span>, <span class="token number">83</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 选择倒数的奇数孩子，即正数的偶数孩子 */</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-last-child</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*其他同理*/</span></code></pre><h5 id="3-目标伪类选择器"><a href="#3-目标伪类选择器" class="headerlink" title="3. 目标伪类选择器"></a>3. 目标伪类选择器</h5><p>:target 目标伪类选择器：用于选取当前活动的目标元素；</p><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>target &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Courier New'</span>, Courier, monospace<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="五、CSS外观属性"><a href="#五、CSS外观属性" class="headerlink" title="五、CSS外观属性"></a>五、CSS外观属性</h3><h4 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color     文本颜色"></a>color     文本颜色</h4><p>color属性用于定义文本颜色，取值方式主要有三种：</p><ol><li>预定义颜色值，如red，green等；</li><li>十六进制，如#FF0000，#29D794等；<code>十六进制是最常用的定义颜色方式</code></li><li>RGB代码，如rgb(143, 75, 40)，等。</li></ol><ul><li>注意：</li></ul><p>若是使用RGB代码的百分比颜色，取值为0时也不能省略百分号，必须写为0%。</p><h4 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height     行间距"></a>line-height     行间距</h4><p>line-height属性用于设置行间距，即行与行之间的距离，即字符的垂直距离；</p><p>常用的属性单位有三种，分别是像素px，相对值em和百分比%，使用最多的是像素；</p><p>一般情况下，行距比字号大7-8像素即可；</p><h4 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align     水平对齐方式"></a>text-align     水平对齐方式</h4><p>text-align用于设置文本的水平对齐方式，相当于html中的align属性</p><p>可用属性有三种：</p><ol><li>left：左对齐，即默认对齐方式；</li><li>right：右对齐；</li><li>center：居中对齐；</li></ol><h4 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent      首行缩进"></a>text-indent      首行缩进</h4><p>text-indent属性用于设置文本的首行缩进，允许使用负值，<code>建议使用em作为单位</code>；</p><p>1 em就是一个字的宽度，如果是汉字则1 em就是一个汉字的宽度；</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*设置本页面中所有段落首行缩进两个字符*/</span>p&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    text-indent：<span class="token number">2</span>em；&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing     字间距"></a>letter-spacing     字间距</h4><p>letter-spacing用于设置字符与字符之间的距离，其属性值可以为不同单位的数值，<code>允许使用负值</code>，默认值为normal；</p><h4 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing     单词间距"></a>word-spacing     单词间距</h4><p>word-spacing用于设置英文单词之间的间距，<code>对中文字符无效</code>。其属性值可以为不同单位的数值，<code>允许使用负值</code>，默认值为normal；</p><ul><li>注意</li></ul><p>letter-spacing 和word-spacing均可以对英文字符进行设置；</p><p>不同的是，前者是英文字母之间的距离，后者是英文单词之间的距离；</p><h4 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break    自动换行"></a>word-break    自动换行</h4><p>属性值有以下几种</p><ol><li>normal：使用浏览器默认的换行规则；</li><li>break-all：允许在单词内换行；</li><li>keep-all：只能在半角空格或者连字短符的位置换行；</li></ol><h4 id="颜色半透明-CSS-3"><a href="#颜色半透明-CSS-3" class="headerlink" title="颜色半透明(CSS 3)"></a>颜色半透明(CSS 3)</h4><p>格式：<code>color: rgba(r, g, b, a);</code></p><p>a 代表透明度，取值范围为[0~1]，0为全透明，1为全不透明；</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*给rgb(0, 49, 83)设置为0.1的半透明;*/</span><span class="token property">li</span><span class="token punctuation">:</span><span class="token function">nth-last-child</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">49</span>, <span class="token number">83</span>, <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="文字阴影-CSS-3"><a href="#文字阴影-CSS-3" class="headerlink" title="文字阴影(CSS 3)"></a>文字阴影(CSS 3)</h4><blockquote><p>/* 使 用 格 式 */<br>选择器 {<br>text-shadow:水平位置 垂直位置 模糊距离 阴影颜色<br>}</p></blockquote><table><thead><tr><th align="center">属性值</th><th>描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td><code>必需</code>；水平的阴影位置。<code>允许负值</code></td></tr><tr><td align="center">v-shadow</td><td><code>必需</code>；垂直的阴影位置。<code>允许负值</code></td></tr><tr><td align="center">blur</td><td><code>选填</code>；模糊的距离</td></tr><tr><td align="center">color</td><td><code>选填</code>；阴影的颜色</td></tr></tbody></table><h3 id="六、引入CSS样式表"><a href="#六、引入CSS样式表" class="headerlink" title="六、引入CSS样式表"></a>六、引入CSS样式表</h3><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><ul><li><p>内嵌式是将CSS代码集中在HTML文档的head头部标签中，并用style标签包裹；</p></li><li><p>基本格式</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- &lt;style>        选择器 &amp;#123;            属性名: 属性值;        &amp;#125;    &lt;/style>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    label &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">font</span><span class="token punctuation">:</span> italic, <span class="token number">400</span>, <span class="token number">40</span>px, <span class="token string">"黑体"</span><span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><ul><li><p>行内样式又称内联样式。是通过HTML中标签的style属性来设置元素的样式；</p></li><li><p>基本格式</p></li></ul><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- &lt;标签名 style="属性名: 属性值;">内容&lt;/标签名>    --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><ul><li>外部样式是将CSS代码单独写在一个.css文件中，通过HTML头部中利用 link 标签引入； </li><li>基本格式</li></ul><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- &lt;head>  &lt;link rel="stylesheet" type="text/CSS" href="css文件路径" />&lt;/head>    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/CSS<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/iconfont.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ul><li>注意</li></ul><ol><li>link是个单标签；</li><li>必须指定link标签的三个属性<ol><li>herf：定义所连接外部文档的URL，可以是相对路径，也可以是绝对路径；</li><li>type：定义所链接文档的类型，这里type=”text/CSS”，表明链接的外部文件是CSS样式表；</li><li>rel：定义当前文档和链接文档之间的关系，这里rel=”stylesheet”，表明连接的文档是个样式表文件。</li></ol></li></ol><h3 id="七、标签显示模式"><a href="#七、标签显示模式" class="headerlink" title="七、标签显示模式"></a>七、标签显示模式</h3><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><ul><li>每个块级元素通常都会独自占据一整行或多整行，可以对其设置宽度，高度，对齐等属性，常用于网页布局和结构的搭建；</li><li>常见的块级元素，div是最典型的块级元素。</li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>~~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><ul><li>特点</li></ul><ol><li>总是占据一整行；</li><li>高度，行高，外边距等都可以控制；</li><li>宽度默认是容器的100%；</li><li>可以容纳其他的内联元素和其他块级元素；</li></ol><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><ul><li>行内元素又叫内联元素，不占有独立的区域，仅仅依靠自身的字体大小和图像尺寸支撑结构。</li><li><code>一般不能设置宽度、高度、对齐等属性</code>,默认宽度就是本身内容的宽度；</li><li>水平方向的padding和margin可以设置，垂直方向设置无效；</li><li>常用于控制页面中文本的样式；</li><li><code>行内元素只能容纳文本或其他行内元素</code>；（a标签特殊）</li><li>常见的块级元素，span是典型的块级元素。</li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre><ul><li>注意</li></ul><ol><li>只有文字才能组成段落，因此<code>p标签中不能放块级元素，同理还有h1~h6等标签</code>；</li><li>链接里不能在放链接；</li></ol><h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><p>行内块元素有几个特殊的标签：&lt;img   /&gt;、&lt;input   /&gt;、&lt;td &gt;，对他们就可以设置宽高和对齐属性；</p><p>有些资料中会称他们为行内块元素。</p><p>行内块元素的特点：</p><ol><li>与相邻行内元素/行内块元素在一行上，但是之间会有空白间隙；</li><li>默认宽度就是他本身内容的宽度；</li><li>高度，行高，外边距及内边距都可以控制。</li></ol><h4 id="显示模式转换"><a href="#显示模式转换" class="headerlink" title="显示模式转换 *"></a>显示模式转换 *</h4><table><thead><tr><th>转换类型</th><th>代码</th></tr></thead><tbody><tr><td>块级元素转行内元素</td><td>display:inline;</td></tr><tr><td>行内元素转块级元素</td><td>display:block;</td></tr><tr><td>块级/行内元素转行内块元素</td><td>display:inline-block</td></tr></tbody></table><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">600</span> <span class="token number">18</span>px <span class="token string">"宋体"</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*块级元素转为行内元素显示模式*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>span &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">600</span> <span class="token number">18</span>px <span class="token string">"宋体"</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*行内元素转换为块级元素显示模式*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*行内元素转换为行内块级元素显示模式*/</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h3 id="八、CSS复合选择器"><a href="#八、CSS复合选择器" class="headerlink" title="八、CSS复合选择器"></a>八、CSS复合选择器</h3><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>交集选择器由两个选择器构成，其中一个为标签选择器，第二个为class选择器，</p><p><code>两个选择器之间不能有空格</code>，如p.red{};</p><pre class=" language-css"><code class="language-css">div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*所有的div标签进行设置*/</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">600</span> <span class="token number">18</span>px <span class="token string">"宋体"</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div<span class="token number">.</span>i &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*div标签中class为i的标签进行设置*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>并集选择器是各个选择器通过“逗号”链接而成的，任何形式的选择器（包括标签选择器、class选择器、id选择器等）都可以作为并集选择器的一部分。</p><p>如果某些选择器定义的样式完全相同或部分相同，就可以利用并集选择器为他们定义相同的样式。</p><pre class=" language-css"><code class="language-css">a,#love,<span class="token number">.</span>i &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3c3c3c</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> chartreuse<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span> italic <span class="token number">600</span> <span class="token number">40</span>px <span class="token string">"宋体"</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>div &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>span &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>后代选择器又叫包含选择器，用来选择元素和元素组的所有后代；</p><p>当标签发生嵌套时，内层标签就成为外层标签的后代；</p><p>其写法是<code>外层标签写在前面，内层标签写在后面，中间用空格分开</code>；</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>mht p &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    p a &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> cyan<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>企鹅<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mht<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span><span class="token punctuation">></span></span>王者荣耀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>华腾马<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p><code>子元素选择器只能选择某元素的子元素</code>;</p><p>其写法是把父级元素写在前面，子级标签写在后面，中间用一个“&gt;”连接；</p><p>注意“&gt;”左右都保有一个空格；</p><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><h4 id="伪元素选择器-CSS-3"><a href="#伪元素选择器-CSS-3" class="headerlink" title="伪元素选择器(CSS 3)"></a>伪元素选择器(CSS 3)</h4>]]></content>
      
      
      <categories>
          
          <category> Frond End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 5 for beginner (part 1)</title>
      <link href="/2021/11/30/Spring%205/"/>
      <url>/2021/11/30/Spring%205/</url>
      
        <content type="html"><![CDATA[<h1 id="一、学习内容介绍"><a href="#一、学习内容介绍" class="headerlink" title="一、学习内容介绍"></a>一、学习内容介绍</h1><ul><li><p>Spring概念</p></li><li><p>IOC容器</p></li><li><p>Aop</p></li><li><p>JdbcTemplate</p></li><li><p>事务管理</p></li><li><p>Spring5的新特征</p></li></ul><h1 id="二、Spring框架概述"><a href="#二、Spring框架概述" class="headerlink" title="二、Spring框架概述"></a>二、Spring框架概述</h1><h2 id="1、Spring是开源的JavaEE框架"><a href="#1、Spring是开源的JavaEE框架" class="headerlink" title="1、Spring是开源的JavaEE框架"></a>1、Spring是开源的JavaEE框架</h2><h2 id="2、Spring可以解决企业应用开发的复杂性"><a href="#2、Spring可以解决企业应用开发的复杂性" class="headerlink" title="2、Spring可以解决企业应用开发的复杂性"></a>2、Spring可以解决企业应用开发的复杂性</h2><h2 id="3、Spring有两个核心部分：IOC和Aop"><a href="#3、Spring有两个核心部分：IOC和Aop" class="headerlink" title="3、Spring有两个核心部分：IOC和Aop"></a>3、Spring有两个核心部分：IOC和Aop</h2><blockquote><p>（1）==IOC：控制反转，把创建对象的过程交个Spring进行管理==</p></blockquote><blockquote><p>（2）==Aop：面向切面，在不修改源代码的条件下进行功能的增强==</p></blockquote><h2 id="4、Spring框架的特点"><a href="#4、Spring框架的特点" class="headerlink" title="4、Spring框架的特点"></a>4、Spring框架的特点</h2><blockquote><p>（1）方便解耦，降低耦合性，简化开发</p><p>（2）APP编程支持</p><p>（3）方便程序的测试</p><p>（4）方便和其他框架整合使用</p><p>（5）方便进行事务管理</p><p>（6）降低JavaEE API的开发难度</p></blockquote><h1 id="三、Spring-5的下载与安装"><a href="#三、Spring-5的下载与安装" class="headerlink" title="三、Spring 5的下载与安装"></a>三、Spring 5的下载与安装</h1><blockquote><p><a href="https://repo.spring.io/ui/native/release/org/springframework/spring">Spring 5 下载地址</a></p><p>需要的jar包位于压缩包的lib目录里</p><p>Spring框架核心的jar包主要是4个，包括：Beans、Core、Context、Expression</p></blockquote><p><img src="https://gitee.com/mr_tolie/pics/raw/master/images/3C2CE62F5FA903EEB54E3385FCC33BB1.png" alt="3C2CE62F5FA903EEB54E3385FCC33BB1"></p><h1 id="四、IOC容器"><a href="#四、IOC容器" class="headerlink" title="四、IOC容器"></a>四、IOC容器</h1><ul><li>（1）IOC是什么和IOC的底层原理</li><li>（2）IOC接口（BeanFactory）</li><li>（3）IOC操作Bean原理（基于xml）</li><li>（4）IOC操作Bean原理（基于注解）</li></ul><h2 id="1-IOC是什么和IOC的底层原理"><a href="#1-IOC是什么和IOC的底层原理" class="headerlink" title="1.IOC是什么和IOC的底层原理"></a>1.IOC是什么和IOC的底层原理</h2><blockquote><p>（1）控制反转，把对象的创建和对象之间的调用过程交给Spring进行管理</p><p>（2）使用IOC的目的：降低耦合度</p></blockquote><h2 id="2-IOC的底层管理"><a href="#2-IOC的底层管理" class="headerlink" title="2. IOC的底层管理"></a>2. IOC的底层管理</h2><h3 id="（1）xml解析、工厂模式、反射"><a href="#（1）xml解析、工厂模式、反射" class="headerlink" title="（1）xml解析、工厂模式、反射"></a>（1）xml解析、工厂模式、反射</h3><blockquote><p>工厂模式图所示：</p></blockquote><p><img src="/2021/11/30/Spring%205/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="工厂模式"></p><blockquote><p>IOC的过程：</p></blockquote><p><img src="/2021/11/30/Spring%205/IOC%E8%BF%87%E7%A8%8B.png" alt="IOC过程"></p><h3 id="（2）xml解析、反射"><a href="#（2）xml解析、反射" class="headerlink" title="（2）xml解析、反射"></a>（2）xml解析、反射</h3><h3 id="（3）IOC接口"><a href="#（3）IOC接口" class="headerlink" title="（3）IOC接口"></a>（3）IOC接口</h3><ol><li>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</li><li>Spring提供实现IOC容器的两种基本方式（两个接口）：<ul><li>BeanFactory：IOC容器的基本实现，是Spring的内部的使用接口，一般不提供开发人员使用</li><li>==特点：加载配置文件时候不会创建对象 ，而在获取/使用的时候再进行创建==</li><li>ApplicationContext：是BeanFactory的一个子接口，提供更多更强大的功能，一般提供开发人员使用</li><li>==特点：在加载配置文件的时候就会把配置文件对象进行创建==</li><li>一般使用ApplicationContext</li></ul></li><li>ApplicationContext接口中的主要实现类<ul><li>FileSystemXMLApplicationContext：加载配置文件时，后面加的配置文件在硬盘中的位置，即带有盘符的路径（我理解为一种绝对路径</li><li>ClassPathXmlApplicationContext：加载配置文件时，后面加的是配置文件在Web项目中的src目录下的路径（我理解为一种相对路径</li></ul></li><li>BeanFactory中的子接口<ul><li>ConfigureApplicationContext，是BeanFactory的子接口之一，里面包含的是一些拓展功能等内容</li></ul></li></ol><h1 id="五、IOC的基本操作"><a href="#五、IOC的基本操作" class="headerlink" title="五、IOC的基本操作"></a>五、IOC的基本操作</h1><h2 id="1-IOC操作Bean管理"><a href="#1-IOC操作Bean管理" class="headerlink" title="1.IOC操作Bean管理"></a>1.IOC操作Bean管理</h2><h3 id="（1）-Spring两种类型的bean"><a href="#（1）-Spring两种类型的bean" class="headerlink" title="（1） Spring两种类型的bean"></a>（1） Spring两种类型的bean</h3><p>普通bean和工厂bean</p><ul><li>区别：</li><li>普通bean：在配置文件中定义的bean的类型就是返回类型</li><li>工厂bean：在配置文件中定义的bean的类型可以和返回类型不一样</li></ul><h5 id="实现工厂Bean的操作过程"><a href="#实现工厂Bean的操作过程" class="headerlink" title="* 实现工厂Bean的操作过程"></a>* 实现工厂Bean的操作过程</h5><p>==给Admin类引入一个接口FactoryBean，并使用一个泛型类的写法<User>==</User></p><p>实现一个工厂bean，设置Admin确能够返回一个User对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Admin.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Admin</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Admin&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    返回bean的实例</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//暂时这么写，底层是工厂加反射，后续要记得回来修改</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    返回bean的类型</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    是否是一个单例</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//testDemo</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testFactoryBean</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用Admin的配置文件</span>        ApplicationContext context<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean3.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用User类的文件，创建User对象</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">,</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="（2）Bean的作用域"><a href="#（2）Bean的作用域" class="headerlink" title="（2）Bean的作用域"></a>（2）Bean的作用域</h3><p>在Spring里，可以设置创建bean是单实例对象还是多实例对象，==默认为单实例对象==。</p><h5 id="如何设置为多实例"><a href="#如何设置为多实例" class="headerlink" title="如何设置为多实例 *"></a>如何设置为多实例 *</h5><p>a. 在Spring配置文件中bean标签里有一个属性（scope），用于设置单实例还是多实例</p><ul><li>scope属性第一个值是singleton，也就是默认值，表示单实例对象</li><li>此种情况下，==创建的两个对象的地址相同==</li></ul><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//2.获取创建的配置文件</span>        User user1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.做输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8wzh.Spring5.User@1a482e36wzh.Spring5.User@1a482e36</code></pre><ul><li>scope属性第二个值是prototype，表示多实例对象</li><li>修改配置文件中，bean的scope属性值为prototype后，==创建的两个对象的地址不同==</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8wzh.Spring5.User@223191a6wzh.Spring5.User@49139829</code></pre><p>b. scope属性的singleton和prototype区别</p><ul><li>singleton，也就是默认值，表示单实例对象，而prototype，表示多实例对象；</li><li>设置scope的值为singleton时，在==加载配置文件的时候==就会完成单实例对象的创建</li><li>设置scope的值为prototype时，不在加载配置文件的时候就会完成单实例对象的创建，而==在调用getBean()方法时==，再完成多实例对象的创建</li></ul><p>d. 不常用：scope的值也可以是request和session，如果值为这二者，则每次创建对象都会放在request / session的域对象中</p><h3 id="（3）Bean的生命周期"><a href="#（3）Bean的生命周期" class="headerlink" title="（3）Bean的生命周期"></a>（3）Bean的生命周期</h3><h5 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="* 什么是生命周期"></a>* 什么是生命周期</h5><ul><li>从对象创建到销毁的过程就是生命周期</li></ul><h5 id="生命周期内容"><a href="#生命周期内容" class="headerlink" title="* 生命周期内容"></a>* 生命周期内容</h5><ul><li>通过构造器创建bean实例</li><li>为bean中的属性设置值或对其他bean的引用 （调用 set() 方法）</li><li>调用bean的初始化方法（需要专门配置初始化方法）</li><li>使用bean（对象获取到）</li><li>当容器关闭的时候，调用bean的销毁方法（需要专门配置销毁方法）</li></ul><h5 id="bean的生命周期代码实现"><a href="#bean的生命周期代码实现" class="headerlink" title="* bean的生命周期代码实现"></a>* bean的生命周期代码实现</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--xml配置文件--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--利用set()方法实现ser对象的创建,并注入属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.bean.User<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>james lee<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//User对象文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2.set方法设置属性值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1.已创建bean实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.调用初始化方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//销毁bean对象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5.调用销毁bean对象方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//testSpring5.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">testSpring5</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载Spring的配置文件</span><span class="token comment" spellcheck="true">//        ApplicationContext context =</span><span class="token comment" spellcheck="true">//                new ClassPathXmlApplicationContext("bean1.xml");</span>                <span class="token comment" spellcheck="true">// ApplicationContext的接口中没有close()方法，所以使用了ApplicationContext</span>        ClassPathXmlApplicationContext context <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取创建的配置文件</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4.得到bean实例对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3.做输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//手动调用销毁方法</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><blockquote><p>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8<br>1.已创建bean实例<br>2.set方法设置属性值<br>3.调用初始化方法<br>4.得到bean实例对象<br>wzh.Spring5.bean.User@3e694b3f<br>5.调用销毁bean对象方法</p></blockquote><p>d. 后置处理器 </p><p>除了这五步基本操作，还有==两步的后置处理==</p><ul><li>通过构造器创建bean实例</li><li>为bean中的属性设置值或对其他bean的引用 （调用 set() 方法）</li><li>==把bean实例传给bean后置处理器的方法：postProcessBeforeInitialization==</li><li>调用bean的初始化方法（需要专门配置初始化方法）</li><li>==把bean实例传给bean后置处理器方法：postProcessAfterInitialization==</li><li>使用bean（对象获取到）</li><li>当容器关闭的时候，调用bean的销毁方法（需要专门配置销毁方法）</li></ul><p>e. 添加后置处理器的代码实现</p><ul><li><code>创建类，实现接口BeanPOSTProcessor，创建后置处理器</code></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcess</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.初始化之前调用后置处理器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4.初始化之后调用后置处理器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>在配置文件中添加后置处理器对象，配置后置处理器</li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--配置后置处理器--></span>    <span class="token comment" spellcheck="true">&lt;!--后置处理器会对当前配置文件中的所有bean添加后置处理器的处理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beanPostProcess<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.bean.BeanPostProcess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-81.已创建bean实例2.set方法设置属性值3.初始化之前调用后置处理器4.调用初始化方法4.初始化之后调用后置处理器6.得到bean实例对象wzh.Spring5.bean.User@41d477ed7.调用销毁bean对象方法</code></pre><h3 id="（4）什么是Bean管理"><a href="#（4）什么是Bean管理" class="headerlink" title="（4）什么是Bean管理"></a>（4）什么是Bean管理</h3><p>Bean管理包括两个操作</p><ul><li>Spring创建对象</li><li>Spring注入属性</li></ul><h2 id="2-Bean管理操作的两种方式"><a href="#2-Bean管理操作的两种方式" class="headerlink" title="2.Bean管理操作的两种方式"></a>2.Bean管理操作的两种方式</h2><h3 id="A-基于xml配置文件实现对象创建"><a href="#A-基于xml配置文件实现对象创建" class="headerlink" title="A. 基于xml配置文件实现对象创建"></a>A. 基于xml配置文件实现对象创建</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置User对象创建--></span>&lt;bean id = "user" class = "wzh.Spring5.User"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li><p>在Spring配置文件中，使用bean标签，标签里面添加对应属性。就可以实现对象创建；</p></li><li><p>bean标签的常用属性；</p><p>a——id 属性：对象的唯一标识（不能有特殊符号</p><p>b——class属性创建对象的一个类全路径（包类路径：包名.类名）</p><p>c——name属性：功能与id属性类似，现已不经常使用（可以有特殊符号’</p><p>==d——创建对象的时候，默认调用无参构造方法创建对象；==</p></li></ul><h3 id="B-基于xml配置文件注入属性"><a href="#B-基于xml配置文件注入属性" class="headerlink" title="B.基于xml配置文件注入属性"></a>B.基于xml配置文件注入属性</h3><ul><li><p><code>DI：依赖注入，也就是注入属性，在对象已创建的基础之上完成</code></p><h4 id="（一）、set-方法注入属性值"><a href="#（一）、set-方法注入属性值" class="headerlink" title="（一）、set()方法注入属性值"></a>（一）、set()方法注入属性值</h4><p>==此时！需要无参构造方法==</p><p>==类中没有构造方法，系统会默认创建一个无参构造方法==</p><p>==而如果类中有一个有参构造方法，此时系统就不会自动创建无参构造方法==</p><ol><li><h5 id="在类中创建属性，并创建对应属性的set-方法"><a href="#在类中创建属性，并创建对应属性的set-方法" class="headerlink" title="在类中创建属性，并创建对应属性的set()方法"></a>在类中创建属性，并创建对应属性的set()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String tel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTel</span><span class="token punctuation">(</span>String tel<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"User&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", tel='"</span> <span class="token operator">+</span> tel <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span></code></pre></li><li><h5 id="修改Spring的xml配置文件，配置对象创建及属性注入"><a href="#修改Spring的xml配置文件，配置对象创建及属性注入" class="headerlink" title="修改Spring的xml配置文件，配置对象创建及属性注入"></a>修改Spring的xml配置文件，配置对象创建及属性注入</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置User对象创建--></span>&lt;bean id = "user" class = "wzh.Spring5.User">    <span class="token comment" spellcheck="true">&lt;!--使用property标签完成属性注入        name属性：类里面的属性名称        value属性：属性的值    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>james lee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用一个demo验证</span><span class="token comment" spellcheck="true">//testDemo.java</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.加载Spring的配置文件</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取创建的配置文件，利用xml配置文件完成对象创建及属性注入</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.做输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.调用对象拥有的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><h5 id="p名称空间注入（了解）"><a href="#p名称空间注入（了解）" class="headerlink" title="p名称空间注入（了解）"></a>p名称空间注入（了解）</h5><p><code>简化上述xml配置方法，进行属性注入</code></p><ul><li>在xml文件头部beans标签后面添加p名称空间</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>操作bean标签，进行属性注入</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>tel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>666666<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="注入空值-null-：使用标签"><a href="#注入空值-null-：使用标签" class="headerlink" title="注入空值 (null)：使用标签"></a>注入空值 (null)：使用<null>标签</null></h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--给tel属性注入空值null--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="包含特殊符号的属性值：CDATA标签"><a href="#包含特殊符号的属性值：CDATA标签" class="headerlink" title="包含特殊符号的属性值：CDATA标签"></a>包含特殊符号的属性值：CDATA标签</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--注入包含特殊符号的属性值1. 对特殊符号进行转义2. 利用&lt;![CDATA[……]]>标签，在省略号位置加入想要使用的特殊符号--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                <span class="token cdata">&lt;![CDATA[《活着》]]></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span></code></pre></li><li><h5 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性-外部bean"></a>注入属性-外部bean</h5><p>(1) 创建两个对象类：service类和dao类</p><p>(2) 在service类中调用dao类中的方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//DaoService类</span><span class="token keyword">package</span> wzh<span class="token punctuation">.</span>Spring5<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> wzh<span class="token punctuation">.</span>Spring5<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建UserDao属性类型，生成set()方法</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Service add~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UserDaoImpl类</span><span class="token keyword">package</span> wzh<span class="token punctuation">.</span>Spring5<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dao update~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//UserDao接口</span><span class="token keyword">package</span> wzh<span class="token punctuation">.</span>Spring5<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>(3)在Spring配置文件中进行配置</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- service和dao的对象进行创建--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.service.UserService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入userDao对象           name 是属性名称           ref 是创建对象对应bean标签的id值        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>实现了给对象注入其他的类</p></li><li><h5 id="注入属性—内部bean和级联赋值"><a href="#注入属性—内部bean和级联赋值" class="headerlink" title="注入属性—内部bean和级联赋值"></a>注入属性—内部bean和级联赋值</h5><p>在实体类中表示一对多的关系</p></li></ol><h3 id="（二）、有参构造方法注入属性值"><a href="#（二）、有参构造方法注入属性值" class="headerlink" title="（二）、有参构造方法注入属性值"></a>（二）、有参构造方法注入属性值</h3><p>==此时不需要无参构造方法==</p><h5 id="1-在类中创建属性，并创建对应属性的有参构造方法"><a href="#1-在类中创建属性，并创建对应属性的有参构造方法" class="headerlink" title="1.在类中创建属性，并创建对应属性的有参构造方法"></a>1.在类中创建属性，并创建对应属性的有参构造方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String tel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String tel<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tel <span class="token operator">=</span> tel<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="2-利用有参构造方法注入属性"><a href="#2-利用有参构造方法注入属性" class="headerlink" title="2.利用有参构造方法注入属性"></a>2.利用有参构造方法注入属性</h5><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--利用有参构造方法实现User对象的创建,并注入属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--使用constructor-arg标签完成属性注入        name属性：类里面的属性名称        value属性：属性的值        index属性：索引，代表对象中的第几个参数，0代表第一个，1代表第二个以此类推    --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>james lee<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12138<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--        &lt;constructor-arg index="0" value="james lee"/>        &lt;constructor-arg index="1" value="12138"/>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>同样可以利用testDemo进行验证</p></li></ul><h3 id="C-基于xml配置文件实现自动装配"><a href="#C-基于xml配置文件实现自动装配" class="headerlink" title="C. 基于xml配置文件实现自动装配"></a>C. 基于xml配置文件实现自动装配</h3><p>==在实际使用中一般使用注解的方式做到，但利用xml也可以做到==</p><ol><li><h5 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h5></li></ol><ul><li>根据指定的装配规则（属性名称或属性类型），Spring自动将匹配的属性值注入</li></ul><ol start="2"><li>演示自动装配的实现</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--自动装配bean标签的属性 autowira，可以配置自动装配autowira有常用的两个值    byName：根据属性名注入。要求bean的id的值和类属性名称一致，如下；            private Dep depment;            &lt;bean id="depment" class="wzh.Spring5.bean.Dep"/>    byType：根据属性类型注入            private Dep depment;            &lt;bean id="dep" class="wzh.Spring5.bean.Dep"/>            根据类型注入相同类型的bean不能定义多个，否则会报错--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.bean.Emp<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--手动装配    &lt;property name="depment" ref="dep"/>    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dep<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5.bean.Dep<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="D-基于xml配置文件实现引入外部文件进行属性注入"><a href="#D-基于xml配置文件实现引入外部文件进行属性注入" class="headerlink" title="D.基于xml配置文件实现引入外部文件进行属性注入"></a>D.基于xml配置文件实现引入外部文件进行属性注入</h3><ol><li><h5 id="直接配置数据库信息"><a href="#直接配置数据库信息" class="headerlink" title="直接配置数据库信息"></a>直接配置数据库信息</h5></li></ol><ul><li>配置德鲁伊连接池</li><li>引入德鲁伊连接池的jar包（依赖）<a href="https://repo1.maven.org/maven2/com/alibaba/druid/">德鲁伊连接池jar下载</a></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--直接配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/users?characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>666666<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><h5 id="引入外部文件配置数据库连接池"><a href="#引入外部文件配置数据库连接池" class="headerlink" title="引入外部文件配置数据库连接池"></a>引入外部文件配置数据库连接池</h5></li></ol><ul><li>创建外部属性文件，即properties格式文件，存储数据库信息</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#等号左侧的内容可以随便写，最好不写某一个单词，以防止冲突</span><span class="token attr-name">prop.driverClass</span> <span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">prop.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/users?characterEncoding=UTF-8</span><span class="token attr-name">prop.name</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">prop.password</span><span class="token punctuation">=</span><span class="token attr-value">666666</span></code></pre><ul><li>将properties格式文件引入Spring配置文件中</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ul><li>在Spring配置文件中使用 ==context:property-placeholder== 标签引入外部属性文件</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--入外部属性文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:JDBC.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--配置连接池--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.driverClass&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.url&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;prop.password&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="A-基于注解的方式实现对象创建"><a href="#A-基于注解的方式实现对象创建" class="headerlink" title="A.基于注解的方式实现对象创建"></a>A.基于注解的方式实现对象创建</h3><ol><li><h5 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h5></li></ol><ul><li>注解是代码的特殊标记</li><li>==格式：@ + 注解名称 (属性名称  = 属性值，属性名称 = 属性值……)==</li><li>注解可以作用在方法、类或者属性上面</li><li>注解目的：简化xml配置，以更简洁的方式展现</li></ul><ol start="2"><li><h5 id="Spring针对Bean管理中创建对象提供的注解"><a href="#Spring针对Bean管理中创建对象提供的注解" class="headerlink" title="Spring针对Bean管理中创建对象提供的注解"></a>Spring针对Bean管理中创建对象提供的注解</h5></li></ol><ul><li><p>@Component：是一种普通的组件，对象普通创建</p></li><li><p>@Service：一般用在业务逻辑或者Service层上</p></li><li><p>@Controller：一般用在WEB层上</p></li><li><p>@Repository：一般用在DAO层或者</p></li><li><p>没有要求一定那个注解用在那一层</p></li></ul><p>==上面的四个注解功能是一样的的，都可以用来创建Bean实例==</p><ol start="3"><li><h5 id="实际操作基于注解的方式实现对象创建"><a href="#实际操作基于注解的方式实现对象创建" class="headerlink" title="实际操作基于注解的方式实现对象创建"></a>实际操作基于注解的方式实现对象创建</h5></li></ol><ul><li>第一步：  引入依赖（jar包）spring-aop-5.2.3.RELEASE.jar</li><li>第二步：在配置文件中，开启组件扫描</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--一、导入名称空间context--></span>        <span class="token comment" spellcheck="true">&lt;!--二、开启组件扫描    1. 如果扫描多个包，多个包之间使用逗号隔开    2. 如果扫描多个包，可以扫描上层目录    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li>第三步：创建对象类，并加上创建对象注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在注解中value属性值可以省略不写</span><span class="token comment" spellcheck="true">//默认的value值是首字母小写后的类名称</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//类似于bean标签下的id属性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="4"><li><h5 id="开启组件扫描的细节问题"><a href="#开启组件扫描的细节问题" class="headerlink" title="开启组件扫描的细节问题"></a>开启组件扫描的细节问题</h5></li></ol><ul><li>定义到包中==扫描哪些文件==</li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- use-default-filters="false" 表示现在不使用默认的filter，而使用自己接下里设置的filter    type="annotation" expression="org.springframework.stereotype.Component"    这里的内容表示到wzh.Spring5包里只扫描带Component注解的类    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Component<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><ul><li>定义包中的那些==文件不扫描，其他的全都扫描==</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- use-default-filters="false" 表示现在不使用默认的filter，而使用自己接下里设置的filter    type="annotation" expression="org.springframework.stereotype.Component"    这里的内容表示到wzh.Spring5包里不扫描带Component注解的类，其他的全都扫描    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wzh.Spring5<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Component<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><h3 id="B-基于注解的方式注入属性"><a href="#B-基于注解的方式注入属性" class="headerlink" title="B.基于注解的方式注入属性"></a>B.基于注解的方式注入属性</h3><ol><li><h5 id="Spring针对Bean管理中创建对象提供的注解-1"><a href="#Spring针对Bean管理中创建对象提供的注解-1" class="headerlink" title="Spring针对Bean管理中创建对象提供的注解"></a>Spring针对Bean管理中创建对象提供的注解</h5></li></ol><p>注入对象类型的属性值</p><ul><li><p>@AutoWired：根据属性类型进行自动注入</p></li><li><p>@Qualifier：根据属性名称进行自动注入</p></li><li><p>@Resource：根据属性类型进行自动注入，也可以可以根据属性名称进行自动注入</p></li></ul><p>注入一般类型的属性值</p><ul><li>@Value：注入普通类型属性</li></ul><ol start="2"><li><h5 id="实际操作-基于注解的方式注入属性"><a href="#实际操作-基于注解的方式注入属性" class="headerlink" title="实际操作.基于注解的方式注入属性"></a>实际操作.基于注解的方式注入属性</h5></li></ol><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring 5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about HTTP</title>
      <link href="/2021/11/27/HTTP/"/>
      <url>/2021/11/27/HTTP/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议详解"><a href="#HTTP协议详解" class="headerlink" title="HTTP协议详解"></a>HTTP协议详解</h1><h3 id="重要性："><a href="#重要性：" class="headerlink" title="重要性："></a>重要性：</h3><blockquote><p>无论是以后用WebSevice，还是用rest做大型架构，都离不开对HTTP协议的认识。<br>甚至可以简化的说：</p><p>WebService = Http协议 + XML</p><p>Rest = Http协议 + XML/json实现的</p><p>各种的Api一般也是用Http + XML/json来实现的。</p><p>学习了HTTP协议之后也会方便Ajax的学习。</p></blockquote><h2 id="学习内容："><a href="#学习内容：" class="headerlink" title="学习内容："></a>学习内容：</h2><p>一、原理</p><ol><li>   形象理解Http协议</li><li>   动手试试Http协议</li><li>   Http协议三部分介绍</li></ol><p>二、实战</p><ol><li>   PHP + socket编程发送http请求</li><li>   PHP批量发帖</li><li>   Http协议的防盗链</li></ol><p>三、优化</p><ol><li>   Http协议与缓存控制</li><li>   Http协议与Cookie</li><li>   持久链接</li></ol><h2 id="学习内容：-1"><a href="#学习内容：-1" class="headerlink" title="学习内容："></a>学习内容：</h2><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><h4 id="A-形象理解Http协议"><a href="#A-形象理解Http协议" class="headerlink" title="A.    形象理解Http协议"></a>A.    形象理解Http协议</h4><h5 id="1）-Http协议的定义："><a href="#1）-Http协议的定义：" class="headerlink" title="1） Http协议的定义："></a>1） Http协议的定义：</h5><blockquote><p>计算机协议和现实的协议是一样的，双方多方都遵循这一个共同的规范，这就是协议。计算机可以全世界共通，这些协议功不可没。</p><p>HTTP协议就是按照一定的规则，向服务器索要数据/发送数据。服务器安照一定的规则进行回应。</p></blockquote><h5 id="2）-Http协议的工作流程"><a href="#2）-Http协议的工作流程" class="headerlink" title="2） Http协议的工作流程"></a>2） Http协议的工作流程</h5><blockquote><p>1、原始状态下客户端与服务器没有连接；（连接就是虚拟电路）</p><p>2、建立链接发送请求到服务器；</p><p>3、服务器沿着建立的连接，返回响应信息。客户端收到响应，并进行解析；</p><p>4、断开连接。</p></blockquote><h5 id="3）-Http请求信息和响应信息的格式"><a href="#3）-Http请求信息和响应信息的格式" class="headerlink" title="3） Http请求信息和响应信息的格式"></a>3） Http请求信息和响应信息的格式</h5><h6 id="1、请求信息："><a href="#1、请求信息：" class="headerlink" title="1、请求信息："></a>1、请求信息：</h6><blockquote><pre><code>        请求行；        请求头信息；        （换行）        请求主体信息（可无）</code></pre></blockquote><p><code>！！换行用来分开请求/响应头信息和请求/响应主体信息虽主体信息可有可无，但此空行一定要有。</code></p><h6 id="请求行分为三部分："><a href="#请求行分为三部分：" class="headerlink" title="请求行分为三部分："></a>请求行分为三部分：</h6><p>请求方法、请求路径(URL)、所用的协议。</p><blockquote><p>请求方法包括：GET POST HEAD PUT DELETE TRACE OPTIONS</p><p>请求路径就是URL的一部分</p></blockquote><h6 id="请求头信息格式："><a href="#请求头信息格式：" class="headerlink" title="请求头信息格式："></a>请求头信息格式：</h6><blockquote><p>KEY：VALUE<br>KEY：VALUE<br>………………<br>Contente-length:接下来的主体长度<br>Contente-type:接下来的主体类型</p></blockquote><hr><h6 id="2、响应信息："><a href="#2、响应信息：" class="headerlink" title="2、响应信息："></a>2、响应信息：</h6><pre><code>            响应行            响应头信息            （换行）            响应主体信息</code></pre><p><code>！！换行用来分开请求/响应头信息和请求/响应主体信息虽主体信息可有可无，但此空行一定要有。</code></p><p>响应主体信息可以是HTML或者其他内容</p><h6 id="响应行分为三部分："><a href="#响应行分为三部分：" class="headerlink" title="响应行分为三部分："></a>响应行分为三部分：</h6><blockquote><p> 协议 状态码 状态文字信息<br>状态文字信息是像‘ok’这样</p></blockquote><h6 id="响应头信息格式："><a href="#响应头信息格式：" class="headerlink" title="响应头信息格式："></a>响应头信息格式：</h6><blockquote><p> KEY：VALUE<br>KEY：VALUE<br>………………<br>例如：HTTP/1.1 200 OK<br>     Contente-type:text/html<br>     Contente-length:5</p></blockquote><h5 id="4）-请求方法"><a href="#4）-请求方法" class="headerlink" title="4） 请求方法"></a>4） 请求方法</h5><p>  <code>GET POST HEAD PUT DELETE TRACE OPTIONS</code></p><blockquote><p>（注意要大写</p><p>（注意：这些请求方法虽然Http协议里规定了，但可能有Web Service不支持这些方法。）</p></blockquote><h6 id="1、HEAD与GET方法基本一致，只是不返回内容"><a href="#1、HEAD与GET方法基本一致，只是不返回内容" class="headerlink" title="1、HEAD与GET方法基本一致，只是不返回内容"></a>1、HEAD与GET方法基本一致，只是不返回内容</h6><h6 id="2、POST的请求方法"><a href="#2、POST的请求方法" class="headerlink" title="2、POST的请求方法"></a>2、POST的请求方法</h6><pre><code>    因为POST比GET多了主体信息        所以要在请求头信息里表明主体信息的长度content－length        还要标明主体信息的类型content-type:application/x-www-form-urlencoded</code></pre><p>GET和POST的区别在于GET请求没法传数据，只能单纯的读取一个接口提供的资源</p><p>而PSOT可以传输一定的数据到后台并进行一定的操作。</p><h6 id="3、TRACE应用情况："><a href="#3、TRACE应用情况：" class="headerlink" title="3、TRACE应用情况："></a>3、TRACE应用情况：</h6><p>比如用了代理上网，想查看代理有没有修改Http请求，这种情况就可以用到TRACE，服务器回把最后收到的请求返回给客户端。</p><h6 id="4、OPTIONS："><a href="#4、OPTIONS：" class="headerlink" title="4、OPTIONS："></a>4、OPTIONS：</h6><p>返回服务器可用的请求方法。</p><h5 id="5）-状态码和状态文字"><a href="#5）-状态码和状态文字" class="headerlink" title="5） 状态码和状态文字"></a>5） 状态码和状态文字</h5><blockquote><p>状态码用来反映服务器的响应情况</p><p>状态文字用来描述状态码的</p></blockquote><h6 id="常见的有："><a href="#常见的有：" class="headerlink" title="常见的有："></a>常见的有：</h6><pre><code>200 OK：服务器正常返回网页301/2：永久/临时重定向 （可能会在重定向过程中丢失数据，比如POST可能会变成GET导致数据丢失）304 Not Modified：未修改（请求的内容未修改，告诉客户端到缓存里取307 Temporay Redirect：在重定向中保持原有数据 </code></pre><h6 id="失败的状态码－"><a href="#失败的状态码－" class="headerlink" title="失败的状态码－"></a>失败的状态码－</h6><pre><code> 404 NOT FOUND：请求的网页不存在 500：服务器内部错误 503：服务器暂时不可用</code></pre><h6 id="状态码-定义-说明"><a href="#状态码-定义-说明" class="headerlink" title="状态码    定义    说明"></a>状态码    定义    说明</h6><pre><code>1XX    信息    收到请求，继续处理2XX    成功    操作成功收到、理解、接受3XX    重定向    为了完成请求，必需采取进一步措施4XX    客户端错误    请求的语法有明显错误或不能完全被满足5XX    服务端错误    服务器无法完成明显有效的请求</code></pre><p>B.    动手试试Http协议<br>C.    Http协议三部分介绍</p><p>二、实战<br>A.    PHP + socket编程发送http请求<br>B.    PHP批量发帖<br>C.    Http协议的防盗链</p><p>三、优化<br>A.    Http协议与缓存控制<br>B.    Http协议与Cookie<br>C.    持久链接</p>]]></content>
      
      
      <categories>
          
          <category> Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML for beginner</title>
      <link href="/2021/11/27/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/27/HTML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML学习"><a href="#HTML学习" class="headerlink" title="HTML学习"></a>HTML学习</h1><h2 id="第一章-HTML概述"><a href="#第一章-HTML概述" class="headerlink" title="第一章  HTML概述"></a>第一章  HTML概述</h2><h3 id="一、什么是HTML"><a href="#一、什么是HTML" class="headerlink" title="一、什么是HTML"></a>一、什么是HTML</h3><p>HTML是一种超文本标记语言，由大量的标记组成，每一个标签都有开始标签和结束标签，标签也可以设置各自的属性。</p><p>超文本包括流媒体，图片、视频等。</p><h3 id="二、HTML是谁制定的"><a href="#二、HTML是谁制定的" class="headerlink" title="二、HTML是谁制定的"></a>二、HTML是谁制定的</h3><p>W3C ：世界万维网联盟</p><p>W3C 制定HTML的规范，每个浏览器厂家遵守这一规范。</p><p>HTML规范最新的是HTML 5.0，简称H5。</p><h2 id="第二章-HTML基础"><a href="#第二章-HTML基础" class="headerlink" title="第二章 HTML基础"></a>第二章 HTML基础</h2><h3 id="第一个HTML页面"><a href="#第一个HTML页面" class="headerlink" title="第一个HTML页面"></a>第一个HTML页面</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--在HTML文件第一行加上这一行代码就表示用的是HTML 5.0版本去掉就表示HTML 4.0版本--></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        指定浏览器的解码方式，为"utf-8"        并不是设置当前页面的字符编码方式        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>第一个HTML页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        TOLIE你的未来有无限可能！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="HTML基本标签"><a href="#HTML基本标签" class="headerlink" title="HTML基本标签 *"></a>HTML基本标签 *</h3><p>1、段落</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>2、标题字</p><p>从h1-h6代表标题字，序号越小字体越大。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> H1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span> H2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span> H3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span> H4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span> H5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span> H6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><p>3、换行</p><p>是一个独目标记</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></code></pre><p>4、水平线</p><p>是一个独目标记</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></code></pre><p>5、预留格式</p><p>两个标签之间是什么格式，就在网页上展示什么格式，不做改变。</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>金樽清酒斗十千，玉盘珍羞直万钱。停杯投箸不能食，拔剑四顾心茫然。欲渡黄河冰塞川，将登太行雪满山。闲来垂钓碧溪上，忽复乘舟梦日边。行路难，行路难，多歧路，今安在？长风破浪会有时，直挂云帆济沧海。    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></code></pre><p>6、粗体字、斜体字、插入字、删除字</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--粗体字---></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>TOLIE你的未来有无限可能！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--插入字---></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>插入字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--斜体字---></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>斜体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--删除字---></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span></code></pre><p>7、右上角加字、右下角加字</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--显示为10的2次方---></span>    10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--显示为X的下标n---></span>    X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span></code></pre><p>8、font标签</p><p>一个字体标签</p><pre class=" language-html"><code class="language-html">     <span class="token comment" spellcheck="true">&lt;!--size和color是字体的属性，表示字号和颜色---></span>       &lt;font size = "10" color = "blue">NEUQ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><h3 id="HTML实体符号"><a href="#HTML实体符号" class="headerlink" title="HTML实体符号"></a>HTML实体符号</h3><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- “&amp;lt;” 是小于号---></span>    a<span class="token entity" title="&lt;">&amp;lt;</span>b    <span class="token comment" spellcheck="true">&lt;!-- “&amp;gt;” 是大于号---></span>    b<span class="token entity" title="&gt;">&amp;gt;</span>c    <span class="token comment" spellcheck="true">&lt;!-- “&amp;nbsp;” 是空格---></span>    abc<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>efg</code></pre><h3 id="HTML的表格"><a href="#HTML的表格" class="headerlink" title="HTML的表格 *"></a>HTML的表格 *</h3><h4 id="基本表格"><a href="#基本表格" class="headerlink" title="基本表格"></a>基本表格</h4><p>1、table标签表示一个表格<br>2、th标签也是一个单元格标签，一般用于表头，自带有加粗，居中效果<br>3、tr标签表示表格的一行<br>4、td标签表示表格中一个单元格</p><ul><li>border=”1px”表示边框为1像素</li><li>align=”center”表示位置居中，也可以设置为居左居右</li><li>width = “40%”表示内容占整个窗口的百分之几，==可以随着窗口的变化变化大小==</li></ul><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--    1、table标签表示一个表格     2、th标签也是一个单元格标签，一般用于表头，自带有加粗，居中效果    3、tr标签表示一行    4、td标签表示一个单元格    --></span>    <span class="token comment" spellcheck="true">&lt;!--一个3*3的表格 --></span>    &lt;table border="1" width = "40%">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>班级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>TOLIE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>信管1901<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>James<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>信管1903<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h4 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并 *"></a>单元格合并 *</h4><p>==不能跨格合并==</p><p>row合并：一般把下侧单元格删掉，在上方单元格td标签中添加一个 rowspan 属性，属性值为几就合并几个单元格</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--一个3*3的表格 --></span>    &lt;table border="1" width = "40%">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>班级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>TOLIE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信管1903<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>James<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;td>信管1903&lt;/td> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>col合并：删除左右的的单元格皆可，在单元格td标签中添加一个colspan 属性，属性值为几就合并几个单元格</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--一个3*3的表格 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>班级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;td>TOLIE&lt;/td> --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信管1903<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>James<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>信管1903<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h4 id="thead-tbody-tfoot标签"><a href="#thead-tbody-tfoot标签" class="headerlink" title="thead. tbody. tfoot标签"></a>thead. tbody. tfoot标签</h4><p>将表格分为三个部分：头、身体和脚</p><p>不是必须的，但可以方便后期的JS代码编写。</p><p>==注意拆分之后可能会影响单元格的合并，导致单元格合并失败==</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--一个3*3的表格 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>班级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- &lt;td>TOLIE&lt;/td> --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信管1903<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>James<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>信管1903<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h3 id="HTML背景"><a href="#HTML背景" class="headerlink" title="HTML背景"></a>HTML背景</h3><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!--    1.bgcolor 属性表示背景颜色，值为背景颜色的名称    2.background 属性表示背景图片，值为背景图片的路径    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>web/img/cake-1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="HTML的图片"><a href="#HTML的图片" class="headerlink" title="HTML的图片"></a>HTML的图片</h3><ol><li>设置图片高度和宽度的时候，只设置宽度，高度会等比例缩放；</li><li>img 标签就是图片标签；</li><li>src 属性的属性值是图片所在的路径；</li><li>tittle 属性值在==鼠标悬停==时显示的信息；</li><li>alt 属性设置在==图片找不到的时候==显示的内容；、</li></ol><h3 id="HTML超链接"><a href="#HTML超链接" class="headerlink" title="HTML超链接"></a>HTML超链接</h3><p>特点： 1. 超链接下面有下划线；</p><p>​            2.点击之后可以跳转页面；</p><p>​            3.鼠标放在上面会变成小手；</p><pre class=" language-html"><code class="language-html">    //文本超链接    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    //图片超链接    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>web/img/cake-2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    //点击超链接之后在本页面实现跳转    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    //点击超链接之后在新页面实现跳转    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>herf：是热引用，属性值一定是一个资源的地址，比如”<a href="https://www.bilibili.com&quot;/">https://www.bilibili.com&quot;</a></p><p>a 标签的target属性的可取值有</p><ol><li>_self ：在本窗口实现跳转</li><li>_blank：在新窗口实现跳转</li><li>_top：在顶级窗口实现跳转</li><li>_parent：在父窗口实现跳转</li></ol><h3 id="有序列表和无序列表"><a href="#有序列表和无序列表" class="headerlink" title="有序列表和无序列表"></a>有序列表和无序列表</h3><ul><li>有序列表</li></ul><p>​    标签：ol （ordered list）属性有个type用于指定序号的形式，可以是数字、大写英文、小写英文等；</p><p>​    表项：li</p><ul><li>有序列表</li></ul><p>​    标签：ul （unordered list）属性有个type用于指定序号的形式，可以是圆圈，方块或者点；</p><p>​    表项：li</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 有序列表 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>水果        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>西瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>蔬菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>甜点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 无序列表 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>beijing        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>w<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h3 id="HTML中的id和name"><a href="#HTML中的id和name" class="headerlink" title="HTML中的id和name"></a>HTML中的id和name</h3><ol><li>在html文档中，任何元素/节点都有唯一的id，id是节点的唯一标识，在同一个html文档中id值不能重复</li><li>id可以帮助我们确定唯一的节点</li><li>html文档是一棵树（DOM树），树上有很多节点，每个节点都有着唯一的id。而js就是对这个树上的节点进行增删改查等操作的。</li></ol><h3 id="HTML中的div和span"><a href="#HTML中的div和span" class="headerlink" title="HTML中的div和span"></a>HTML中的div和span</h3><ul><li><p>div是块级元素，span是内联元素</p></li><li><p>是什么？什么div和span都可以称为“图层”；</p><ul><li>图层的作用是保证页面可以灵活布局，现在最流行的就是使用div进行布局；</li><li>图层可以是一个一个的盒子，盒子套盒子就是div套div；</li><li>div和span的定位可以通过左上角的x轴，y轴坐标来确定；</li></ul></li><li><p>作用：布局，方便布局；</p></li><li><p>div和span的区别：默认情况下div会独占一行，而span不会；</p></li></ul><h2 id="HTML的form表单"><a href="#HTML的form表单" class="headerlink" title="HTML的form表单 *"></a>HTML的form表单 *</h2><h3 id="标签：form"><a href="#标签：form" class="headerlink" title="标签：form"></a>标签：form</h3><p>作用：收集用户信息，用户填写好之后，提交服务器做后续处理；</p><ol><li>action 属性值为提交表单的服务器路径/地址；</li><li>method 属性值为提交表单的方法；</li><li>id 属性值用于唯一标识表单，可以理解为 ；</li><li>class 属性值用于标识变量，但不能唯一标识，可以理解为民族；</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.do<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username1<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登 录<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Log()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h3 id="标签：input"><a href="#标签：input" class="headerlink" title="标签：input  **"></a>标签：input  **</h3><ul><li>readonly，只读，用户不能更改，==但可以提交到服务器==；</li><li>disabled，只读，用户不能选中更不能此 input 标签的value，==且不能提交服务器==；</li><li>maxlength，可以用来==控制输入的字符数量==，属性值为几就能输入几个字符</li><li>type 属性值可以有多种，具体内容如下表所示！！<a href="https://www.cnblogs.com/dadayang/p/5749068.html">更多属性值</a></li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">button</td><td align="left">定义可点击按钮（多数情况下，用于通过 JavaScript 启动脚本）。</td></tr><tr><td align="left">checkbox *</td><td align="left">定义复选框。</td></tr><tr><td align="left">file *</td><td align="left">定义输入字段和 “浏览”按钮，供文件上传。使用时要给form表单设置enctype属性，enctype =”multipart/form-data”</td></tr><tr><td align="left">hidden **</td><td align="left">定义隐藏的输入字段，这部分内容网页不展示，但可以正常提交。</td></tr><tr><td align="left">image</td><td align="left">定义图像形式的提交按钮。</td></tr><tr><td align="left">password *</td><td align="left">定义密码字段。该字段中的字符被掩码。</td></tr><tr><td align="left">radio *</td><td align="left">定义单选按钮。</td></tr><tr><td align="left">reset</td><td align="left">定义重置按钮。重置按钮会清除表单中的所有数据。</td></tr><tr><td align="left">submit *</td><td align="left">定义提交按钮。提交按钮会把表单数据发送到服务器。</td></tr><tr><td align="left">text *</td><td align="left">定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符</td></tr><tr><td align="left">number</td><td align="left">定义输入的类型为数字，且==默认情况下会要求填一个整数==。此时定义maxlength不会发挥作用，如果需要限制用户输入的位数，就用js进行约束。</td></tr></tbody></table><p>==填写了表单项 input 的name属性一律会提交给服务器，没有name属性就不会提交==</p><ul><li><p>placeholder 属性提供可描述输入字段预期值的==提示信息==（hint）；</p><p>该提示会在输入字段为空时显示，并会在字段获得焦点时消失；</p><p>适用于以下 text, search, url, telephone, email 以及 password 的  input 类型；</p></li><li><p>name   input  没有name属性就不会提交  input  内的数据；</p></li><li><p>使得 number类型的 input 可以向服务器传小数</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 支持传送至多两位小数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 支持传送至多4位小数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.0001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="标签：label"><a href="#标签：label" class="headerlink" title="标签：label"></a>标签：label</h3><p>一般用于和单选或多选使用，使得==点击label可以选择label对应的选项==</p><ul><li>label 中的 for 属性值是对应选项的id 值</li></ul><pre class=" language-html"><code class="language-html">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="标签：select"><a href="#标签：select" class="headerlink" title="标签：select *"></a>标签：select *</h3><ul><li><p>multiple用来设置允许多选，设置多选之后可以按住ctrl进行多选；</p></li><li><p>size 用来指示展示几项选项；</p></li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>degree<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- selected表示默认选择 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dz<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>大专<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>本科<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>硕士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="第一个form表单"><a href="#第一个form表单" class="headerlink" title="第一个form表单 *"></a>第一个form表单 *</h3><p>注意：</p><ul><li>选择按钮的value必须手动指定；</li><li>文本域没有value属性，用户填写的内容就是value；</li><li>单选内容一般设置每个 input 的name相同，只提交一个内容，保证单选；</li><li>确认密码的时候记住不设置name属性值，阻止提交；</li><li>提交格式不管是什么方式都是 ==name=value&amp;name=value&amp;name=value&amp;name=value==</li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login.do<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regist<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- method属性是指定提交方式        默认方式，也就是GET方式会把数据展示在地址栏上        POST方式不会把数据展示在地址栏--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username1<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确认密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>确认密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 选择按钮的value必须手动指定 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>性<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- checked表示默认选择 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>男                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 选择按钮的value必须手动指定 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>爱<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- checked表示默认选择 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>读书                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>喝酒                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>烫头                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>保健                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 选择按钮的value必须手动指定 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>学<span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>历<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>degree<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!-- selected表示默认选择 --></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dz<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>大专<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>本科<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>硕士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>博士<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 选择按钮的value必须手动指定 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>个人介绍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 文本域没有value属性，用户填写的内容就是value --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selfjs<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>重 置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登 录<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>regist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 提交结果：http://127.0.0.1:5500/login.do?username1=ww&amp;password=qq&amp;sex=1&amp;interest=0&amp;interest=1&amp;interest=2&amp;degree=dz&amp;selfjs=1231--></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Frond End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax for beginner</title>
      <link href="/2021/10/27/AJXA%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/10/27/AJXA%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：原生AJAX"><a href="#第一章：原生AJAX" class="headerlink" title="第一章：原生AJAX"></a>第一章：原生AJAX</h3><h4 id="1-1-AJAX简介"><a href="#1-1-AJAX简介" class="headerlink" title="1.1  AJAX简介"></a>1.1  AJAX简介</h4><blockquote><p>全称为Asynchronous Javascript And XML（异步JavaScript和XML）</p><p>不刷新页面的条件下，向服务端发送请求，即<code>无刷新获取数据</code> 也是AJAX最大的优势！</p><p>AJAX不是一门编程语言，而是一种将现有标准组合在一起使用的新方式。</p></blockquote><h5 id="AJAX优点"><a href="#AJAX优点" class="headerlink" title="AJAX优点"></a>AJAX优点</h5><ul><li>可以不刷新页面与服务器进行通信</li><li>允许根据用户事件来更新部分页面内容</li><li>AJAX获得的数据被JS动态创建之后，这部分可以展示在网页，但信息不能被爬虫爬取</li></ul><h5 id="AJAX缺点"><a href="#AJAX缺点" class="headerlink" title="AJAX缺点"></a>AJAX缺点</h5><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li></ul><h4 id="1-2-XML简介"><a href="#1-2-XML简介" class="headerlink" title="1.2 XML简介"></a>1.2 XML简介</h4><blockquote><p>XML：可扩展标记语言，被设计用来传输和存储数据，而HTML被设计用来呈现数据。</p><p>开始时AJAX就是使用XML格式进行数据交换，但<code>现已被JSON替换</code></p></blockquote><h4 id="1-3-node-js的安装"><a href="#1-3-node-js的安装" class="headerlink" title="1.3 node.js的安装"></a>1.3 node.js的安装</h4><p>​        <a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">2020 node.js的安装教程</a></p><h4 id="1-4-AJAX发送GET请求"><a href="#1-4-AJAX发送GET请求" class="headerlink" title="1.4 AJAX发送GET请求"></a>1.4 AJAX发送GET请求</h4><h5 id="1、AJAX的使用步骤："><a href="#1、AJAX的使用步骤：" class="headerlink" title="1、AJAX的使用步骤："></a>1、AJAX的使用步骤：</h5><ol><li>创建异步对象，即XMLHttpRequest对象；</li><li>初始化，指定请求方法和请求url；</li><li>发送请求；</li><li>绑定onreadystatechange事件；</li><li>确定服务器返回了所有对象后，处理返回结果；</li></ol><h5 id="2、jsp页面代码"><a href="#2、jsp页面代码" class="headerlink" title="2、jsp页面代码"></a>2、jsp页面代码</h5><blockquote><p>这里需要注意js文件的引入方式 src=”${pageContext.request.contextPath}/js/weather.js” </p><p>防止出现路径问题</p></blockquote><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><%--src="$&#123;pageContext.request.contextPath&#125;/js/weather.js"--%><script type="text/javascript" src="$&#123;pageContext.request.contextPath&#125;/js/weather.js"></script><link rel="stylesheet" href="css/index.css"><html><head>    <title>AJAX GET请求</title></head><body><input type="text" id="search" name="search" placeholder="请输入要查询的内容"><input type="button" id="btn" value="查询" onclick="Check()"><br><div  id="result" ></div></body></html></code></pre><h5 id="3、js内容"><a href="#3、js内容" class="headerlink" title="3、js内容"></a>3、js内容</h5><blockquote><p>请求URL的填写：</p><p>“ / + 项目发布名 + / servlet映射名称 ”</p><p>GET请求参数设置：</p><p>在URL后用？分割然后加上要提交的变量和变量值</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// alert("hello")</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.创建XHR对象</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.初始化，设定请求方法和请求url</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/test/server?search=hh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.绑定事件，处理返回的结果</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断服务端返回了所有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断返回响应是否成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 结果处理</span>                result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="4、servlet的配置"><a href="#4、servlet的配置" class="headerlink" title="4、servlet的配置"></a>4、servlet的配置</h5><p>（这里制定了路径，所以不用配置xml配置文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/server"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">searchServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String search <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>search <span class="token operator">+</span> <span class="token string">":发来一条get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"get请求已收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h6 id="WebServlet的属性列表"><a href="#WebServlet的属性列表" class="headerlink" title="@WebServlet的属性列表"></a>@WebServlet的属性列表</h6><p>​        <img src="/2021/10/27/AJXA%E5%AD%A6%E4%B9%A0/@WebServlet%E7%9A%84%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8.png" alt="@WebServlet的属性列表"></p><h4 id="1-5-AJAX发送POST请求"><a href="#1-5-AJAX发送POST请求" class="headerlink" title="1.5 AJAX发送POST请求"></a>1.5 AJAX发送POST请求</h4><h5 id="1、js内容"><a href="#1、js内容" class="headerlink" title="1、js内容"></a>1、js内容</h5><blockquote><p>参数设置：</p><p>语法上参数设置比较的随意，只需要服务器端可以解析，就可以；</p><p>send(“a=100&amp;b=100&amp;c=100&amp;d=100”)或者send(“hquwuifahfhoihqi”)都可以传入服务器端</p><p>甚至可以自定义请求头的key和value（需要后端进行适配，否则会报错</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// alert("hello")</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//1.创建XHR对象</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.初始化，设定请求方法</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/test/server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//xhr.send("a=100&amp;b=100&amp;c=100&amp;d=100");</span>    <span class="token comment" spellcheck="true">//xhr.send("hquwuifahfhoihqi");</span>        <span class="token comment" spellcheck="true">//4.绑定事件，处理返回的结果</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断服务端返回了所有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断返回响应是否成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 结果处理</span>                result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="2、servlet的配置（这里制定了路径，所以不用配置xml配置文件"><a href="#2、servlet的配置（这里制定了路径，所以不用配置xml配置文件" class="headerlink" title="2、servlet的配置（这里制定了路径，所以不用配置xml配置文件"></a>2、servlet的配置（这里制定了路径，所以不用配置xml配置文件</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/server"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">searchServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发来一条POST请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"POST请求已收到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="1-6-AJAX设置请求头信息"><a href="#1-6-AJAX设置请求头信息" class="headerlink" title="1.6  AJAX设置请求头信息"></a>1.6  AJAX设置请求头信息</h4><h5 id="1、HTTP请求头信息格式"><a href="#1、HTTP请求头信息格式" class="headerlink" title="1、HTTP请求头信息格式"></a>1、HTTP请求头信息格式</h5><pre class=" language-KEY：VALUE"><code class="language-KEY：VALUE">KEY：VALUE</code></pre><p>比如：<br>Contente-length:接下来的主体长度<br>Contente-type:接下来的主体类型</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置请求头</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这样就可解析 "a=100&amp;b=100&amp;c=100&amp;d=100" 的格式数据</span></code></pre><h4 id="1-7-Servlet返回json类型的数据"><a href="#1-7-Servlet返回json类型的数据" class="headerlink" title="1.7 Servlet返回json类型的数据"></a>1.7 Servlet返回json类型的数据</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定返回的格式为JSON格式</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接json数据</span>        String jsonStr <span class="token operator">=</span> <span class="token string">"&amp;#123;\"name\":\""</span><span class="token operator">+</span><span class="token string">"TOLIE"</span><span class="token operator">+</span><span class="token string">"\",\"age\":\"20\"&amp;#125;"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据写入流中</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="1-8-AJAX处理接收到的json类型返回结果"><a href="#1-8-AJAX处理接收到的json类型返回结果" class="headerlink" title="1.8 AJAX处理接收到的json类型返回结果"></a>1.8 AJAX处理接收到的json类型返回结果</h4><h5 id="1、手动对json数据转化"><a href="#1、手动对json数据转化" class="headerlink" title="1、手动对json数据转化"></a>1、手动对json数据转化</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 建立div对象</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//1.创建XHR对象</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.初始化，设定请求方法</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/test/server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.绑定事件，处理返回的结果</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断服务端返回了所有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断返回响应是否成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 5.结果处理</span>                                <span class="token comment" spellcheck="true">//手动对json数据转化</span>                <span class="token keyword">let</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="2、自动对json数据转化"><a href="#2、自动对json数据转化" class="headerlink" title="2、自动对json数据转化"></a>2、自动对json数据转化</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// alert("hello")</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//1.创建XHR对象</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设定响应体数据的一个类型</span>    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.初始化，设定请求方法</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/test/server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.发送</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.绑定事件，处理返回的结果</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断服务端返回了所有数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断返回响应是否成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 结果处理</span>                                <span class="token comment" spellcheck="true">//自动对json数据转化</span>                result<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="1-9-AJAX的IE缓存问题"><a href="#1-9-AJAX的IE缓存问题" class="headerlink" title="1.9 AJAX的IE缓存问题"></a>1.9 AJAX的IE缓存问题</h4><h5 id="1、IE缓存"><a href="#1、IE缓存" class="headerlink" title="1、IE缓存"></a>1、IE缓存</h5><p>在ajax的应用中，当用户访问一次后，再进行访问当XMLHttpRequest请求不变的时，在ie中获取数据不会到服务器端取，而是直接从ie的缓存中取，这会就是ie的缓存问题。==IE缓存可能会导致一些时效性很强的请求不能正常获取最新数据==。</p><h5 id="2、解决方案：添加时间戳"><a href="#2、解决方案：添加时间戳" class="headerlink" title="2、解决方案：添加时间戳"></a>2、解决方案：添加时间戳</h5><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//2.初始化，设定请求方法</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/test/server?t="</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Date.now()就是获取一个当前时间，让每一次请求都不相同，避免不能正常获取最新数据。</p><h4 id="1-10-AJAX的网略请求超时和网络异常处理"><a href="#1-10-AJAX的网略请求超时和网络异常处理" class="headerlink" title="1.10 AJAX的网略请求超时和网络异常处理"></a>1.10 AJAX的网略请求超时和网络异常处理</h4><h5 id="1、主要目的"><a href="#1、主要目的" class="headerlink" title="1、主要目的"></a>1、主要目的</h5><p>让用户在网络请求超时或者网络异常的时候可以收到提醒，避免长时间无响应，优化使用体验。</p><h5 id="2、处理方式"><a href="#2、处理方式" class="headerlink" title="2、处理方式"></a>2、处理方式</h5><ul><li>网络请求超时处理</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//设置超时2s，即超过两秒没有收到回应，就取消请求</span>xhr<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置超时事件之后的方法</span>xhr<span class="token punctuation">.</span>ontimeout <span class="token operator">=</span> <span class="token function">funcation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比如可以是弹窗等等显示或操作</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请求超时，请稍后重试！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>网络异常处理</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//设置网络异常事件之后的方法</span>xhr<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token function">funcation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//比如可以是弹窗等等显示或操作</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"网络异常，请检查你的网络！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="1-11-取消AJAX请求"><a href="#1-11-取消AJAX请求" class="headerlink" title="1.11 取消AJAX请求"></a>1.11 取消AJAX请求</h4><h5 id="1、js的ES6规范中let和const"><a href="#1、js的ES6规范中let和const" class="headerlink" title="1、js的ES6规范中let和const"></a>1、js的ES6规范中let和const</h5><p><code>let 声明的变量只在 let 命令所在的代码块 &#123;&#125; 内有效，在 &#123;&#125; 之外不能访问。</code></p><p><code>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</code></p><h5 id="2、-取消AJAX请求"><a href="#2、-取消AJAX请求" class="headerlink" title="2、 取消AJAX请求"></a>2、 取消AJAX请求</h5><p>调用XMLHttpRequest对象的abort()方法，即可完成请求的取消；</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//获取所有的button对象</span>    <span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过let新建一个变量x</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//给第一个button绑定事件</span>    btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"/test/server"</span><span class="token punctuation">)</span>        x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给第二个button绑定事件</span>    btns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消请求</span>        x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="1-12-处理用户重复发送请求"><a href="#1-12-处理用户重复发送请求" class="headerlink" title="1.12 处理用户重复发送请求"></a>1.12 处理用户重复发送请求</h4><h6 id="1、目的"><a href="#1、目的" class="headerlink" title="1、目的"></a>1、目的</h6><p>防止服务器收到高频率的相同请求，导致服务器不能及时响应，影响服务器性能</p><h6 id="2、处理"><a href="#2、处理" class="headerlink" title="2、处理"></a>2、处理</h6><p>选择在用户第二次触发事件的时候，将上一个相同请求取消掉</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过let新建一个变量x</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置一个标识变量，帮助判断请求是否正在发送</span><span class="token keyword">let</span> isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有的button对象</span><span class="token keyword">const</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果请求正在发送，就取消请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSending<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果没有请求正在发送，就取消请求</span>    x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//c请求正在发送，更改标识变量</span>    isSending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/test/server"</span><span class="token punctuation">)</span>    x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//请求发送结束，更改标识变量</span>            isSending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Frond End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
