<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5 about forms</title>
      <link href="/2021/12/03/HTML%20%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/2021/12/03/HTML%20%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5表单验证"><a href="#HTML5表单验证" class="headerlink" title="HTML5表单验证"></a>HTML5表单验证</h1><h2 id="第一章-基本表单验证特征"><a href="#第一章-基本表单验证特征" class="headerlink" title="第一章 基本表单验证特征"></a>第一章 基本表单验证特征</h2><h3 id="一、HTML5中有那些类型"><a href="#一、HTML5中有那些类型" class="headerlink" title="一、HTML5中有那些类型"></a>一、HTML5中有那些类型</h3><p><a href="https://www.cnblogs.com/dadayang/p/5749068.html">HTML5的表单所有type类型 </a></p><h3 id="二、需要特殊记忆的特性"><a href="#二、需要特殊记忆的特性" class="headerlink" title="二、需要特殊记忆的特性"></a>二、需要特殊记忆的特性</h3><p>1、autocomplete：文本框中，输入一次下一次会自动提示；</p><p>2、autofocus：初始化页面之后，让input自动获得焦点；</p><p>3、list和datalist：</p><p>​    datalist与select类似，标签定义选项列表，通常与input元素配合使用该元素，datalist元素的内容不会直接显示在网页上，只是会在用户输入时作为候选项。</p><pre><code class="html">        &lt;input type=&#39;text&#39; name=&#39;capital&#39; list=&#39;address&#39; /&gt;        &lt;datalist id=&quot;address&quot;&gt;            &lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;            &lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;            &lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;        &lt;/datalist&gt;</code></pre><p>​    datalist与select的区别：</p><table><thead><tr><th align="center">异同点</th><th align="center">select</th><th align="center">datalist</th></tr></thead><tbody><tr><td align="center">多选</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center">缺失值</td><td align="center">可以</td><td align="center">不可以</td></tr><tr><td align="center">查找</td><td align="center">不可以</td><td align="center">可以</td></tr><tr><td align="center">增添选项</td><td align="center">不可以</td><td align="center">可以</td></tr></tbody></table><p>4、required：设置表单元素为必填项；</p><p>5、pattern：表单验证使用正则表达式；比如要求邮箱的格式，==不符合规范不会提交==，并提示用户所输内容不符合规范</p><p>6、novalidate 和 formnovalidate：在设置表单元素必填的情况下，提交表单但不验证；</p><p>​    区别：novalidate 应用于表单，并防止验证；</p><p>​               formnovalidate 应用于提交按钮，并覆盖 novalidate 选项（如果存在）；</p><p>​               这意味着 ‘提交此表单而不验证，无论一般表单设置如何’。</p><p>代码展示：</p><pre><code class="html">    &lt;!-- &lt;form action=&quot;post&quot; novalidate&gt; --&gt;    &lt;form action=&quot;post&quot;&gt;        &lt;table border=&quot;1px&quot;&gt;            &lt;tr&gt;                &lt;td&gt; &lt;label&gt;邮箱:&lt;/label&gt;&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;email&quot; placeholder=&quot;请输入注册邮箱！&quot; name=&quot;email&quot; required&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;label&gt;用户名:&lt;/label&gt;&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名！&quot; name=&quot;username&quot; required autocomplete=&quot;on&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;label&gt;密 码:&lt;/label&gt;&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;text&quot; placeholder=&quot;请输入密码！&quot; name=&quot;password&quot; required pattern=&quot;^\d&#123;5&#125;[abcd]$&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;                    &lt;label for=&quot;&quot;&gt;地址：&lt;/label&gt;                &lt;/td&gt;                &lt;td&gt;                    &lt;input type=&#39;text&#39; name=&#39;capital&#39; list=&#39;address&#39; /&gt;                    &lt;datalist id=&quot;address&quot;&gt;                        &lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;                        &lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;                        &lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;                    &lt;/datalist&gt;                &lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;        &lt;!--&lt;input type=&quot;submit&quot; formnovalidate&gt;--&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;</code></pre><p>最终效果：</p><p><img src="https://raw.githubusercontent.com/TOLIE-OFFICIAL/Pics/main/imges/image-20211128232845753.png" alt="image-20211128232845753"></p><h3 id="三、HTML约束验证的API"><a href="#三、HTML约束验证的API" class="headerlink" title="三、HTML约束验证的API"></a>三、HTML约束验证的API</h3><p><code>H5中document.getElementById(&quot; &quot;) === id ，但这是H5的新特性，不推荐这样写</code></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;validity&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;&quot;&gt;        &lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;    &lt;script&gt;        console.log(document.getElementById(&quot;username&quot;) === username)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--此页面，控制台输出结果为true；证明H5中 document.getElementById(&quot; &quot;) === id是正确的--&gt;</code></pre><h4 id="主要的HTML约束验证的API"><a href="#主要的HTML约束验证的API" class="headerlink" title="主要的HTML约束验证的API"></a>主要的HTML约束验证的API</h4><ol><li>willValidate属性：代表元素约束有没有被符合，没有被符合则返回false；</li><li>validity属性 *：表示元素当前所处的验证状态，表示验证是否成功；</li><li>validationMessage属性：用于描述与元素相关约束的失败信息；</li><li>checkValidity()方法 *：用的也很多，主要是看元素有没有满足他的任意约束，不满足返回false，满足返回true；</li><li>setCustomValidity()方法 *：设置自定义的验证信息。当表项设置成了required时候，可以用此方法设置/预定义弹出的提示信息；</li></ol><h4 id="validity属性的介绍及演示"><a href="#validity属性的介绍及演示" class="headerlink" title="validity属性的介绍及演示"></a>validity属性的介绍及演示</h4><ul><li>属性介绍：</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;validity&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;&quot;&gt;        &lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;    &lt;script&gt;        console.log(document.getElementById(&quot;username&quot;).validity)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>在此页面控制台上可以得到如下图所示的属性</li></ul><p><img src="https://raw.githubusercontent.com/TOLIE-OFFICIAL/Pics/main/imges/image-20211129193340142.png" alt="image-20211129193340142"></p><ul><li>代码演示：</li></ul><pre><code class="html">&lt;!-- valueMissing属性值改成true--&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; required&gt;&lt;!-- patternMismatch属性值改成true--&gt;&lt;input type=&quot;text&quot; id=&quot;username&quot; value=&quot;adfafea&quot; pattern=&quot;^\d[5]&quot;&gt;&lt;!-- typeMismatch属性值改成true，以type为email为例--&gt;&lt;input type=&quot;email&quot; id=&quot;email&quot; value=&quot;adfafea&quot;&gt;&lt;!-- rangeOverflow属性值改成true--&gt;&lt;input type=&quot;number&quot; id=&quot;number&quot; max=&quot;5&quot; min=&quot;3&quot; value=&quot;6&quot;&gt;    &lt;!-- rangeUnderflow属性值改成true--&gt;&lt;input type=&quot;number&quot; id=&quot;number&quot; max=&quot;5&quot; min=&quot;3&quot; value=&quot;1&quot;&gt;&lt;!-- tooShort和tooLong 与 minlength和maxlength是对应的，但即使设置了这两个属性·，tooShort和tooLong依然会是false--&gt;</code></pre><h4 id="checkValidity-方法的介绍及演示"><a href="#checkValidity-方法的介绍及演示" class="headerlink" title="checkValidity()方法的介绍及演示"></a>checkValidity()方法的介绍及演示</h4><ul><li>方法介绍</li></ul><p>checkValidity()方法 *：主要是看元素有没有满足他的任意约束，不满足返回false，满足返回true；</p><ul><li>代码演示</li></ul><pre><code class="html">    &lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;        &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; value=&quot;12345&quot; required pattern=&quot;^\d&#123;5&#125;&quot;&gt;        &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; value=&quot;kfajihfioua@163.com&quot;&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;    &lt;script&gt;        if (username.checkValidity()) &#123;            alert(&quot;符合正则表达式&quot;)        &#125; else &#123;            alert(&quot;不符合&quot;)        &#125;        if (email.checkValidity()) &#123;            alert(&quot;符合&quot;)        &#125; else &#123;            alert(&quot;不符合&quot;)        &#125;</code></pre><h4 id="setCust0mValidity-方法的介绍及演示"><a href="#setCust0mValidity-方法的介绍及演示" class="headerlink" title="setCust0mValidity()方法的介绍及演示"></a>setCust0mValidity()方法的介绍及演示</h4><ul><li>方法介绍</li></ul><p>设置自定义的验证信息。当表项设置成了required时候，可以用此方法设置/预定义弹出的提示信息；</p><ul><li>代码演示</li></ul><pre><code class="html">&lt;body&gt;    &lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;td&gt;&lt;label&gt;密 码:&lt;/label&gt;&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;text&quot; placeholder=&quot;请输入密码！&quot; name=&quot;password&quot; oninput=&quot;checkPaw(this)&quot; required                        pattern=&quot;^\d&#123;5&#125;$&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;        &lt;input type=&quot;submit&quot;&gt;    &lt;/form&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        function checkPaw(obj) &#123;            var password = obj.validity;            if (true === password.valueMissing) &#123;                obj.setCustomValidity(&quot;密码不能为空！&quot;);            &#125; else if (true === password.patternMismatch) &#123;                obj.setCustomValidity(&quot;密码必须是5位数字！&quot;);            &#125;        &#125;    &lt;/script&gt;&lt;/body&gt;</code></pre><h3 id="四、HTML自带验证美化"><a href="#四、HTML自带验证美化" class="headerlink" title="四、HTML自带验证美化"></a>四、HTML自带验证美化</h3><p>要做出不一样的表单验证，需要==了解一些伪类和css选择器==</p><ol><li>:required 和 :optional：前者必填，后者是选填</li><li>:in-range 和 :out-of-range：前者在范围之内，后者在范围之外</li><li>:valid 和 :invalid：前者不符合验证，后者符合验证</li><li>:read-only 和 :read-write： 前者为只读不能写，后者为可以写（在input或者div中匹配）</li></ol><ul><li>代码演示</li></ul><p>==学完css回来补充==</p><p>(1). 默认气泡修改</p><ul><li><p>思路：阻止默认气泡，后创建新的气泡</p></li><li><p>代码实现</p></li></ul><p>==学完js再看一遍==</p>]]></content>
      
      
      <categories>
          
          <category> myBlog </category>
          
          <category> Front End </category>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS for beginner  (part 1)</title>
      <link href="/2021/12/03/CSS%20for%20beginner/"/>
      <url>/2021/12/03/CSS%20for%20beginner/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h1><ul><li>好看的颜色</li></ul><table><thead><tr><th align="center">颜色</th><th></th></tr></thead><tbody><tr><td align="center">波尔多红</td><td><strong>rgb(76,0,9)</strong></td></tr><tr><td align="center">勃艮第红</td><td><strong>rgb(128,0,32)</strong></td></tr><tr><td align="center">提香红</td><td><strong>rgb(176,89,35)</strong></td></tr><tr><td align="center">苋菜紫</td><td><strong>rgb(142,41,97)</strong></td></tr><tr><td align="center">木乃伊棕</td><td><strong>rgb(143,75,40)</strong></td></tr><tr><td align="center">普鲁士蓝</td><td><strong>rgb(0,49,83)</strong></td></tr><tr><td align="center">邦迪蓝</td><td><strong>rgb(0,149,182)</strong></td></tr><tr><td align="center">卡布里蓝</td><td><strong>rgb(26,85,153)</strong></td></tr><tr><td align="center">蒂芙尼蓝</td><td><strong>rgb(129,216,208)</strong></td></tr></tbody></table><h3 id="一、CSS初识"><a href="#一、CSS初识" class="headerlink" title="一、CSS初识"></a>一、CSS初识</h3><p>CSS也称为层叠样式表，主要用于设置HTML页面的各种外观显示样式；</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制等，而且还可以根据不同的浏览器设置不同的样式；</p><p>CSS效果优先于HTML效果，即CSS效果可以覆盖HTML效果。</p><h3 id="二、CSS的样式规则"><a href="#二、CSS的样式规则" class="headerlink" title="二、CSS的样式规则"></a>二、CSS的样式规则</h3><pre><code>选择器 + &#123; 属性:值;属性:值;属性:值 &#125;</code></pre><ol><li>选择器用于指定CSS样式作用的HTML标签，花括号内是对该对象设置的具体样式；</li><li>属性和属性值以“键值对”的形式出现；</li><li>属性是对指定对象设置样式的属性，例如字体大小，文本颜色等；</li><li>属性和属性值之间用英文的冒号“ : ”连接；</li><li>多个键值对之间用英文的分号“ ; ”分割；</li></ol><h3 id="三、CSS的字体样式属性"><a href="#三、CSS的字体样式属性" class="headerlink" title="三、CSS的字体样式属性"></a>三、CSS的字体样式属性</h3><h4 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size    字号大小"></a>font-size    字号大小</h4><p>（相对长度单位使用较多，故没写绝对长度单位</p><table><thead><tr><th align="center">相对长度单位</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">em</td><td align="center">相对于当前对象内文本的字体尺寸</td></tr><tr><td align="center">px **</td><td align="center">像素，最为常用</td></tr></tbody></table><h4 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family   字体"></a>font-family   字体</h4><ul><li>注意： </li></ul><p>可以指定多个字体，中间用英文逗号隔开；</p><p>表示如果浏览器不支持第一个字体，会自动尝试下一个，直到找到合适的字体。</p><ul><li>小技巧：</li></ul><ol><li>现今网页中普遍使用的字号为14px，普遍使用的字体为宋体和微软雅黑；</li><li>尽量使用偶数的字号，一些老浏览器支持奇数会出现bug；</li><li>各种字体之间必须用英文逗号隔开；</li><li>==中文字体需要加英文状态下的引号==，比如 font-family:”宋体”；英文字体一般不需要加引号。</li><li>==当需要设置英文字体时，英文字体名必须位于中文字体名之前==；</li><li>如果字体名中包含空格，#，$等符号，则该字体必须加上英文状态下的单引号或双引号，如font-family:”Times New Roman”;</li><li>尽量使用系统字体，保证任何用户的浏览器都可以正常显示；</li></ol><h4 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h4><p>在CSS中设置字体名称，直接写中文是可以的，但在文件编码不匹配的时候会产生乱码的错误，比如xp系统就不支持微软雅黑的中文字体</p><ul><li>解决方案：</li></ul><p>一、使用英文字体来代替，比如font-family:”Microsoft Yahei”;</p><p>二、在CSS中直接使用Unicode编码来写字体名称。使用Unicode编码写中文字体名称，浏览器是可以正确解析的，比如font-family:”\5FAE\8F6F\96C5\9ED1”;表示设置字体为微软雅黑；</p><h4 id="font-weight-字号加粗"><a href="#font-weight-字号加粗" class="headerlink" title="font-weight   字号加粗"></a>font-weight   字号加粗</h4><p>提倡使用数字来表示字体粗细；</p><table><thead><tr><th align="center">属性值</th><th>说明</th></tr></thead><tbody><tr><td align="center">normal</td><td>正常的字体，==相当于数字的400==</td></tr><tr><td align="center">bold</td><td>粗体，==相当于数字的700==</td></tr><tr><td align="center">bolder</td><td>定义比继承值更重的值</td></tr><tr><td align="center">lighter</td><td>定义比继承值更轻的值</td></tr><tr><td align="center">&lt;integer&gt;</td><td>用数字表示文本字体的粗细，取值范围：100|200|300|……|800|900</td></tr></tbody></table><h4 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style    字体风格"></a>font-style    字体风格</h4><p>可以使用HTML中的&lt; i &gt;和&lt; em &gt;标签，CSS中使用font-style；</p><table><thead><tr><th align="center">属性值</th><th>说明</th></tr></thead><tbody><tr><td align="center">normal</td><td>正常的字体</td></tr><tr><td align="center">italic</td><td>设置为倾斜的字体</td></tr><tr><td align="center">oblique</td><td>==不经常使用==</td></tr></tbody></table><h4 id="font-综合设置字体样式"><a href="#font-综合设置字体样式" class="headerlink" title="font  综合设置字体样式 *"></a>font  综合设置字体样式 *</h4><ul><li>基本语法格式</li></ul><pre><code>选择器 + &#123; font: font-style font-weight font-size/line-weight font-family; &#125;</code></pre><p>==使用font属性时，必须按照上面的语法格式中的顺序书写，不能更换顺序，各属性之间用空格隔开；==</p><ul><li>注意：</li></ul><p>其中不需要设置的属性可以忽略（取默认值），但必须保留font-size和font-family属性，否则font属性不起作用。</p><h3 id="四、类选择器"><a href="#四、类选择器" class="headerlink" title="四、类选择器 **"></a>四、类选择器 **</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>可以快速为页面中的同一标签设置样式，但也是他的缺点，即不能设计差异化的样式。</p><pre><code class="css">    /*格式：标签名  +  &#123;属性:属性值;属性:属性值;属性:属性值;&#125;*/    p &#123;            font: italic 600 20px &quot;宋体&quot;;        &#125;</code></pre><pre><code class="html">    &lt;!-- a标签 + ”# + id“实现页面内跳转--&gt;    &lt;a href=&quot;#wushi&quot;&gt;武师时期&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;#jiahe&quot;&gt;嘉禾时期&lt;/a&gt;    &lt;br&gt;    &lt;a href=&quot;#luowei&quot;&gt;罗威时期&lt;/a&gt;</code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li>类命名小技巧</li></ul><ol><li>长名称或词组可以使用短横线来为选择器命名；</li><li>不建议使用下划线“_”来命名css选择器；（避免兼容性问题，输入更加方便</li><li>不要使用纯数字或者中文命名，最好使用英文字母表示；</li></ol><pre><code class="css">&lt;!-- 格式：.类名  +  &#123;属性:属性值;属性:属性值;属性:属性值;&#125; --&gt;        span &#123;            font-size: 100px;        &#125;        .blue &#123;            color: blue;        &#125;        .orange &#123;            color: orange;        &#125;        .yellow &#123;            color: yellow;        &#125;        .green &#123;            color: green;        &#125;</code></pre><h4 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h4><p>一个对象可以有多个类名，中间用空格隔开，使得类名选择器使用更加灵活；</p><ul><li>注意</li></ul><p>如果上下样式显示效果有冲突，此时的显示效果跟HTML中元素的类名先后顺序没有关系，</p><p>受CSS样式的书写的上下顺序影响。</p><pre><code class="html">    &lt;style&gt;     .G &#123;            font-style: italic;        &#125;        .blue &#123;            color: blue;        &#125;    &lt;/style&gt;    &lt;body&gt;    &lt;span class=&quot;blue G&quot;&gt;G&lt;/span&gt;    &lt;/body&gt;</code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><pre><code class="css">&lt;!-- 格式：#id名  +  &#123;属性:属性值;属性:属性值;属性:属性值;&#125; --&gt;        #font-s &#123;            font-size: 100px;        &#125;</code></pre><ul><li>id选择器和类选择器的区别</li></ul><ol><li>在一个文件中id名称不可以重复，类似于身份证号；</li><li>在一个文件中类名可以重复，类似于姓名，比如张伟；</li><li>id选择器前面是“#”，类选择器前面是“.”</li></ol><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>“ * ”代表页面中的所有元素</p><pre><code class="css">&lt;!-- 格式：*  +  &#123;属性:属性值;属性:属性值;属性:属性值;&#125; --&gt;* &#123;    color：red；    &#125;</code></pre><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器 *"></a>伪类选择器 *</h4><h5 id="1-链接伪类选择器"><a href="#1-链接伪类选择器" class="headerlink" title="1. 链接伪类选择器"></a>1. 链接伪类选择器</h5><table><thead><tr><th align="left">链接伪类选择器（主要针对a标签）</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">:link</td><td align="left">未访问的链接</td></tr><tr><td align="left">:visited</td><td align="left">已访问的链接</td></tr><tr><td align="left">:hover</td><td align="left">鼠标移动到链接上</td></tr><tr><td align="left">:active</td><td align="left">选定的链接，即点击但还没有松开的状态</td></tr></tbody></table><pre><code class="css">        /*未访问的链接*/        a:link &#123;            font-size:18px;            color: black;        &#125;        /*已访问的链接*/        a:visited &#123;            font-size:18px;            color: gray;        &#125;        /*鼠标放在链接上*/        a:hover &#123;            font-size:18px;            color: blue;        &#125;        /*点击了链接还没有松开*/        a:active &#123;            font-size:18px;            color: red;        &#125;</code></pre><p><code>顺序不能随便调整，必须按照如上的顺序，简记为LV好（LV hao），所以顺序是l-v-h-a</code></p><ul><li>简写链接伪类选择器</li></ul><pre><code class="css">        a &#123;            font-size:18px;        &#125;        /*未访问的链接*/        a:link &#123;            color: black;        &#125;        /*已访问的链接*/        a:visited &#123;            color: gray;        &#125;        /*鼠标放在链接上*/        a:hover &#123;            color: blue;        &#125;        /*点击了链接还没有松开*/        a:active &#123;            color: red;        &#125;</code></pre><h5 id="2-结构-位置-伪类选择器-CSS-3的新特性"><a href="#2-结构-位置-伪类选择器-CSS-3的新特性" class="headerlink" title="2. 结构(位置)伪类选择器(CSS 3的新特性)"></a>2. 结构(位置)伪类选择器(CSS 3的新特性)</h5><table><thead><tr><th>结构(位置)伪类选择器</th><th>含义</th></tr></thead><tbody><tr><td>:first-child</td><td>选取属于父元素的首个子元素的指定选择器</td></tr><tr><td>:last-child</td><td>选取属于父元素的最后一个子元素的指定选择器</td></tr><tr><td>:nth-child(n)</td><td>选取属于父元素的第n个子元素，不论元素的类型</td></tr><tr><td>:nth-last-child(n)</td><td>选取属于父元素的<code>倒数</code>第n个子元素，不论元素的类型</td></tr></tbody></table><pre><code class="css">        /* 选择第一个孩子 */        li:first-child &#123;            color: rgb(76, 0, 9);        &#125;        /* 选择最后一个孩子 */        li:last-child &#123;            color: rgb(129, 216, 208);        &#125;</code></pre><pre><code class="css">        /* 选择偶数孩子 */        li:nth-child(even) &#123;            color: rgb(0, 49, 83);        &#125;        li:nth-child(2n) &#123;            color: rgb(143, 75, 40);        &#125;        /* 选择奇数孩子 */        li:nth-child(odd) &#123;            color: rgb(143, 75, 40);        &#125;        li:nth-child(2n-1) &#123;            color: rgb(143, 75, 40);        &#125;        /* 选择3的倍数孩子 */        li:nth-child(3n) &#123;            color: rgb(143, 75, 40);        &#125;</code></pre><pre><code class="css">        /* 选择倒数第3个孩子 */        li:nth-last-child(3) &#123;            color: rgb(0, 49, 83);        &#125;        /* 选择倒数的奇数孩子，即正数的偶数孩子 */        li:nth-last-child(odd) &#123;            color: red;        &#125;        /*其他同理*/</code></pre><h5 id="3-目标伪类选择器"><a href="#3-目标伪类选择器" class="headerlink" title="3. 目标伪类选择器"></a>3. 目标伪类选择器</h5><p>:target 目标伪类选择器：用于选取当前活动的目标元素；</p><pre><code class="css">        :target &#123;            color: red;            font-family: &#39;Courier New&#39;, Courier, monospace;        &#125;</code></pre><h3 id="五、CSS外观属性"><a href="#五、CSS外观属性" class="headerlink" title="五、CSS外观属性"></a>五、CSS外观属性</h3><h4 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color     文本颜色"></a>color     文本颜色</h4><p>color属性用于定义文本颜色，取值方式主要有三种：</p><ol><li>预定义颜色值，如red，green等；</li><li>十六进制，如#FF0000，#29D794等；<code>十六进制是最常用的定义颜色方式</code></li><li>RGB代码，如rgb(143, 75, 40)，等。</li></ol><ul><li>注意：</li></ul><p>若是使用RGB代码的百分比颜色，取值为0时也不能省略百分号，必须写为0%。</p><h4 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height     行间距"></a>line-height     行间距</h4><p>line-height属性用于设置行间距，即行与行之间的距离，即字符的垂直距离；</p><p>常用的属性单位有三种，分别是像素px，相对值em和百分比%，使用最多的是像素；</p><p>一般情况下，行距比字号大7-8像素即可；</p><h4 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align     水平对齐方式"></a>text-align     水平对齐方式</h4><p>text-align用于设置文本的水平对齐方式，相当于html中的align属性</p><p>可用属性有三种：</p><ol><li>left：左对齐，即默认对齐方式；</li><li>right：右对齐；</li><li>center：居中对齐；</li></ol><h4 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent      首行缩进"></a>text-indent      首行缩进</h4><p>text-indent属性用于设置文本的首行缩进，允许使用负值，<code>建议使用em作为单位</code>；</p><p>1 em就是一个字的宽度，如果是汉字则1 em就是一个汉字的宽度；</p><pre><code class="css">        /*设置本页面中所有段落首行缩进两个字符*/        p&#123;            text-indent：2em；        &#125;</code></pre><h4 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing     字间距"></a>letter-spacing     字间距</h4><p>letter-spacing用于设置字符与字符之间的距离，其属性值可以为不同单位的数值，<code>允许使用负值</code>，默认值为normal；</p><h4 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing     单词间距"></a>word-spacing     单词间距</h4><p>word-spacing用于设置英文单词之间的间距，<code>对中文字符无效</code>。其属性值可以为不同单位的数值，<code>允许使用负值</code>，默认值为normal；</p><ul><li>注意</li></ul><p>letter-spacing 和word-spacing均可以对英文字符进行设置；</p><p>不同的是，前者是英文字母之间的距离，后者是英文单词之间的距离；</p><h4 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break    自动换行"></a>word-break    自动换行</h4><p>属性值有以下几种</p><ol><li>normal：使用浏览器默认的换行规则；</li><li>break-all：允许在单词内换行；</li><li>keep-all：只能在半角空格或者连字短符的位置换行；</li></ol><h4 id="颜色半透明-CSS-3"><a href="#颜色半透明-CSS-3" class="headerlink" title="颜色半透明(CSS 3)"></a>颜色半透明(CSS 3)</h4><p>格式：<code>color: rgba(r, g, b, a);</code></p><p>a 代表透明度，取值范围为[0~1]，0为全透明，1为全不透明；</p><pre><code class="css">        /*给rgb(0, 49, 83)设置为0.1的半透明;*/        li:nth-last-child(3) &#123;            color: rgba(0, 49, 83, .1);        &#125;</code></pre><h4 id="文字阴影-CSS-3"><a href="#文字阴影-CSS-3" class="headerlink" title="文字阴影(CSS 3)"></a>文字阴影(CSS 3)</h4><pre><code>        /* 使 用 格 式 */        选择器 &#123;            text-shadow:水平位置 垂直位置 模糊距离 阴影颜色        &#125;</code></pre><table><thead><tr><th align="center">属性值</th><th>描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td><code>必需</code>；水平的阴影位置。<code>允许负值</code></td></tr><tr><td align="center">v-shadow</td><td><code>必需</code>；垂直的阴影位置。<code>允许负值</code></td></tr><tr><td align="center">blur</td><td><code>选填</code>；模糊的距离</td></tr><tr><td align="center">color</td><td><code>选填</code>；阴影的颜色</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> myBlog </category>
          
          <category> Front End </category>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring 5 for beginner (part 1)</title>
      <link href="/2021/11/30/Spring%205/"/>
      <url>/2021/11/30/Spring%205/</url>
      
        <content type="html"><![CDATA[<h1 id="一、学习内容介绍"><a href="#一、学习内容介绍" class="headerlink" title="一、学习内容介绍"></a>一、学习内容介绍</h1><ul><li><p>Spring概念</p></li><li><p>IOC容器</p></li><li><p>Aop</p></li><li><p>JdbcTemplate</p></li><li><p>事务管理</p></li><li><p>Spring5的新特征</p></li></ul><h1 id="二、Spring框架概述"><a href="#二、Spring框架概述" class="headerlink" title="二、Spring框架概述"></a>二、Spring框架概述</h1><h2 id="1、Spring是开源的JavaEE框架"><a href="#1、Spring是开源的JavaEE框架" class="headerlink" title="1、Spring是开源的JavaEE框架"></a>1、Spring是开源的JavaEE框架</h2><h2 id="2、Spring可以解决企业应用开发的复杂性"><a href="#2、Spring可以解决企业应用开发的复杂性" class="headerlink" title="2、Spring可以解决企业应用开发的复杂性"></a>2、Spring可以解决企业应用开发的复杂性</h2><h2 id="3、Spring有两个核心部分：IOC和Aop"><a href="#3、Spring有两个核心部分：IOC和Aop" class="headerlink" title="3、Spring有两个核心部分：IOC和Aop"></a>3、Spring有两个核心部分：IOC和Aop</h2><blockquote><p>（1）==IOC：控制反转，把创建对象的过程交个Spring进行管理==</p></blockquote><blockquote><p>（2）==Aop：面向切面，在不修改源代码的条件下进行功能的增强==</p></blockquote><h2 id="4、Spring框架的特点"><a href="#4、Spring框架的特点" class="headerlink" title="4、Spring框架的特点"></a>4、Spring框架的特点</h2><blockquote><p>（1）方便解耦，降低耦合性，简化开发</p><p>（2）APP编程支持</p><p>（3）方便程序的测试</p><p>（4）方便和其他框架整合使用</p><p>（5）方便进行事务管理</p><p>（6）降低JavaEE API的开发难度</p></blockquote><h1 id="三、Spring-5的下载与安装"><a href="#三、Spring-5的下载与安装" class="headerlink" title="三、Spring 5的下载与安装"></a>三、Spring 5的下载与安装</h1><ul><li><a href="https://repo.spring.io/ui/native/release/org/springframework/spring">Spring 5 下载地址</a><blockquote></blockquote></li><li>需要的jar包位于压缩包的lib目录里<blockquote></blockquote></li><li>Spring框架核心的jar包主要是4个，包括：Beans、Core、Context、Expression</li></ul><p><img src="https://raw.githubusercontent.com/TOLIE-OFFICIAL/Pics/main/imges/3C2CE62F5FA903EEB54E3385FCC33BB1.png"></p><h1 id="四、IOC容器"><a href="#四、IOC容器" class="headerlink" title="四、IOC容器"></a>四、IOC容器</h1><ul><li>（1）IOC是什么和IOC的底层原理</li><li>（2）IOC接口（BeanFactory）</li><li>（3）IOC操作Bean原理（基于xml）</li><li>（4）IOC操作Bean原理（基于注解）</li></ul><h2 id="1-IOC是什么和IOC的底层原理"><a href="#1-IOC是什么和IOC的底层原理" class="headerlink" title="1.IOC是什么和IOC的底层原理"></a>1.IOC是什么和IOC的底层原理</h2><p>（1）控制反转，把对象的创建和对象之间的调用过程交给Spring进行管理</p><p>（2）使用IOC的目的：降低耦合度</p><h2 id="2-IOC的底层管理"><a href="#2-IOC的底层管理" class="headerlink" title="2. IOC的底层管理"></a>2. IOC的底层管理</h2><h3 id="（1）xml解析、工厂模式、反射"><a href="#（1）xml解析、工厂模式、反射" class="headerlink" title="（1）xml解析、工厂模式、反射"></a>（1）xml解析、工厂模式、反射</h3><ul><li>工厂模式图所示：</li></ul><p><img src="https://raw.githubusercontent.com/TOLIE-OFFICIAL/Pics/main/imges/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="工厂模式"></p><ul><li>IOC的过程：</li></ul><p><img src="https://raw.githubusercontent.com/TOLIE-OFFICIAL/Pics/main/imges/IOC%E8%BF%87%E7%A8%8B.png"></p><h3 id="（2）xml解析、反射"><a href="#（2）xml解析、反射" class="headerlink" title="（2）xml解析、反射"></a>（2）xml解析、反射</h3><h3 id="（3）IOC接口"><a href="#（3）IOC接口" class="headerlink" title="（3）IOC接口"></a>（3）IOC接口</h3><ol><li>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</li><li>Spring提供实现IOC容器的两种基本方式（两个接口）：<ul><li>BeanFactory：IOC容器的基本实现，是Spring的内部的使用接口，一般不提供开发人员使用</li><li>==特点：加载配置文件时候不会创建对象 ，而在获取/使用的时候再进行创建==</li><li>ApplicationContext：是BeanFactory的一个子接口，提供更多更强大的功能，一般提供开发人员使用</li><li>==特点：在加载配置文件的时候就会把配置文件对象进行创建==</li><li>一般使用ApplicationContext</li></ul></li><li>ApplicationContext接口中的主要实现类<ul><li>FileSystemXMLApplicationContext：加载配置文件时，后面加的配置文件在硬盘中的位置，即带有盘符的路径（我理解为一种绝对路径</li><li>ClassPathXmlApplicationContext：加载配置文件时，后面加的是配置文件在Web项目中的src目录下的路径（我理解为一种相对路径</li></ul></li><li>BeanFactory中的子接口<ul><li>ConfigureApplicationContext，是BeanFactory的子接口之一，里面包含的是一些拓展功能等内容</li></ul></li></ol><h1 id="五、IOC的基本操作"><a href="#五、IOC的基本操作" class="headerlink" title="五、IOC的基本操作"></a>五、IOC的基本操作</h1><h2 id="1-IOC操作Bean管理"><a href="#1-IOC操作Bean管理" class="headerlink" title="1.IOC操作Bean管理"></a>1.IOC操作Bean管理</h2><h3 id="（1）-Spring两种类型的bean"><a href="#（1）-Spring两种类型的bean" class="headerlink" title="（1） Spring两种类型的bean"></a>（1） Spring两种类型的bean</h3><p>普通bean和工厂bean</p><ul><li>区别：</li><li>普通bean：在配置文件中定义的bean的类型就是返回类型</li><li>工厂bean：在配置文件中定义的bean的类型可以和返回类型不一样</li></ul><h5 id="实现工厂Bean的操作过程"><a href="#实现工厂Bean的操作过程" class="headerlink" title="* 实现工厂Bean的操作过程"></a>* 实现工厂Bean的操作过程</h5><p>==给Admin类引入一个接口FactoryBean，并使用一个泛型类的写法<User>==</p><p>实现一个工厂bean，设置Admin确能够返回一个User对象</p><pre><code class="java">//Admin.classpublic class Admin implements FactoryBean&lt;User&gt; &#123;    private String id;    public Admin(String id) &#123;        this.id = id;    &#125;    public Admin() &#123;    &#125;    @Override    public String toString() &#123;        return &quot;Admin&#123;&quot; +                &quot;id=&#39;&quot; + id + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;    //    返回bean的实例    @Override    public User getObject() throws Exception &#123;        //暂时这么写，底层是工厂加反射，后续要记得回来修改        User user = new User();        user.setName(&quot;我爱你&quot;);        return user;    &#125;    //    返回bean的类型    @Override    public Class&lt;?&gt; getObjectType() &#123;        return null;    &#125;    //    是否是一个单例    @Override    public boolean isSingleton() &#123;        return false;    &#125;&#125;</code></pre><pre><code class="java">//testDemopublic class testFactoryBean &#123;    @Test    public void testFb() &#123;        //利用Admin的配置文件        ApplicationContext context= new ClassPathXmlApplicationContext(&quot;bean3.xml&quot;);        //使用User类的文件，创建User对象        User user = context.getBean(&quot;Admin&quot;,User.class);        System.out.println(user.toString());    &#125;&#125;</code></pre><h3 id="（2）Bean的作用域"><a href="#（2）Bean的作用域" class="headerlink" title="（2）Bean的作用域"></a>（2）Bean的作用域</h3><p>在Spring里，可以设置创建bean是单实例对象还是多实例对象，==默认为单实例对象==。</p><h5 id="如何设置为多实例"><a href="#如何设置为多实例" class="headerlink" title="如何设置为多实例 *"></a>如何设置为多实例 *</h5><p>a. 在Spring配置文件中bean标签里有一个属性（scope），用于设置单实例还是多实例</p><ul><li>scope属性第一个值是singleton，也就是默认值，表示单实例对象</li><li>此种情况下，==创建的两个对象的地址相同==</li></ul><pre><code class="java">        //2.获取创建的配置文件        User user1 = context.getBean(&quot;user&quot;, User.class);        User user2 = context.getBean(&quot;user&quot;, User.class);        //3.做输出        System.out.println(user1);        System.out.println(user2);</code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8wzh.Spring5.User@1a482e36wzh.Spring5.User@1a482e36</code></pre><ul><li>scope属性第二个值是prototype，表示多实例对象</li><li>修改配置文件中，bean的scope属性值为prototype后，==创建的两个对象的地址不同==</li></ul><pre><code class="xml">&lt;bean id=&quot;user&quot; class=&quot;wzh.Spring5.User&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8wzh.Spring5.User@223191a6wzh.Spring5.User@49139829</code></pre><p>b. scope属性的singleton和prototype区别</p><ul><li>singleton，也就是默认值，表示单实例对象，而prototype，表示多实例对象；</li><li>设置scope的值为singleton时，在==加载配置文件的时候==就会完成单实例对象的创建</li><li>设置scope的值为prototype时，不在加载配置文件的时候就会完成单实例对象的创建，而==在调用getBean()方法时==，再完成多实例对象的创建</li></ul><p>d. 不常用：scope的值也可以是request和session，如果值为这二者，则每次创建对象都会放在request / session的域对象中</p><h3 id="（3）Bean的生命周期"><a href="#（3）Bean的生命周期" class="headerlink" title="（3）Bean的生命周期"></a>（3）Bean的生命周期</h3><h5 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="* 什么是生命周期"></a>* 什么是生命周期</h5><ul><li>从对象创建到销毁的过程就是生命周期</li></ul><h5 id="生命周期内容"><a href="#生命周期内容" class="headerlink" title="* 生命周期内容"></a>* 生命周期内容</h5><ul><li>通过构造器创建bean实例</li><li>为bean中的属性设置值或对其他bean的引用 （调用 set() 方法）</li><li>调用bean的初始化方法（需要专门配置初始化方法）</li><li>使用bean（对象获取到）</li><li>当容器关闭的时候，调用bean的销毁方法（需要专门配置销毁方法）</li></ul><h5 id="bean的生命周期代码实现"><a href="#bean的生命周期代码实现" class="headerlink" title="* bean的生命周期代码实现"></a>* bean的生命周期代码实现</h5><pre><code class="xml">&lt;!--xml配置文件--&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;&lt;!--利用set()方法实现ser对象的创建,并注入属性--&gt;        &lt;bean id=&quot;user&quot; class=&quot;wzh.Spring5.bean.User&quot; init-method=&quot;init&quot; destroy-method=&quot;destory&quot;&gt;            &lt;property name=&quot;name&quot; value=&quot;james lee&quot;/&gt;        &lt;/bean&gt;&lt;/beans&gt;</code></pre><pre><code class="java">//User对象文件public class User &#123;    private String name;    public void setName(String name) &#123;        this.name = name;        System.out.println(&quot;2.set方法设置属性值&quot;);    &#125;    public User() &#123;        System.out.println(&quot;1.已创建bean实例&quot;);    &#125;    //初始化方法    public void init() &#123;        System.out.println(&quot;3.调用初始化方法&quot;);    &#125;    //销毁bean对象方法    public void destory() &#123;        System.out.println(&quot;5.调用销毁bean对象方法&quot;);    &#125;&#125;</code></pre><pre><code class="java">//testSpring5.javapublic class testSpring5 &#123;    @Test    public void testAdd() &#123;        //1.加载Spring的配置文件//        ApplicationContext context =//                new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);                // ApplicationContext的接口中没有close()方法，所以使用了ApplicationContext        ClassPathXmlApplicationContext context =                new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);        //2.获取创建的配置文件        User user = context.getBean(&quot;user&quot;, User.class);        System.out.println(&quot;4.得到bean实例对象&quot;);                //3.做输出        System.out.println(user);        //手动调用销毁方法        context.close();    &#125;&#125;</code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-81.已创建bean实例2.set方法设置属性值3.调用初始化方法4.得到bean实例对象wzh.Spring5.bean.User@3e694b3f5.调用销毁bean对象方法</code></pre><p>d. 后置处理器 </p><p>除了这五步基本操作，还有==两步的后置处理==</p><ul><li>通过构造器创建bean实例</li><li>为bean中的属性设置值或对其他bean的引用 （调用 set() 方法）</li><li>==把bean实例传给bean后置处理器的方法：postProcessBeforeInitialization==</li><li>调用bean的初始化方法（需要专门配置初始化方法）</li><li>==把bean实例传给bean后置处理器方法：postProcessAfterInitialization==</li><li>使用bean（对象获取到）</li><li>当容器关闭的时候，调用bean的销毁方法（需要专门配置销毁方法）</li></ul><p>e. 添加后置处理器的代码实现</p><ul><li><code>创建类，实现接口BeanPOSTProcessor，创建后置处理器</code></li></ul><pre><code class="java">import org.springframework.beans.BeansException;import org.springframework.beans.factory.config.BeanPostProcessor;public class BeanPostProcess implements BeanPostProcessor &#123;    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;        System.out.println(&quot;3.初始化之前调用后置处理器&quot;);        return bean;    &#125;    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;        System.out.println(&quot;4.初始化之后调用后置处理器&quot;);        return bean;    &#125;&#125;</code></pre><ul><li>在配置文件中添加后置处理器对象，配置后置处理器</li></ul><pre><code class="xml">    &lt;!--配置后置处理器--&gt;    &lt;!--后置处理器会对当前配置文件中的所有bean添加后置处理器的处理--&gt;    &lt;bean id=&quot;beanPostProcess&quot; class=&quot;wzh.Spring5.bean.BeanPostProcess&quot;&gt;&lt;/bean&gt;</code></pre><p>运行结果：</p><pre><code>Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-81.已创建bean实例2.set方法设置属性值3.初始化之前调用后置处理器4.调用初始化方法4.初始化之后调用后置处理器6.得到bean实例对象wzh.Spring5.bean.User@41d477ed7.调用销毁bean对象方法</code></pre><h3 id="（4）什么是Bean管理"><a href="#（4）什么是Bean管理" class="headerlink" title="（4）什么是Bean管理"></a>（4）什么是Bean管理</h3><p>Bean管理包括两个操作</p><ul><li>Spring创建对象</li><li>Spring注入属性</li></ul><h2 id="2-Bean管理操作的两种方式"><a href="#2-Bean管理操作的两种方式" class="headerlink" title="2.Bean管理操作的两种方式"></a>2.Bean管理操作的两种方式</h2><h3 id="A-基于xml配置文件实现对象创建"><a href="#A-基于xml配置文件实现对象创建" class="headerlink" title="A. 基于xml配置文件实现对象创建"></a>A. 基于xml配置文件实现对象创建</h3><pre><code class="xml">&lt;!--配置User对象创建--&gt;&lt;bean id = &quot;user&quot; class = &quot;wzh.Spring5.User&quot;&gt;&lt;/bean&gt;</code></pre><ul><li><p>在Spring配置文件中，使用bean标签，标签里面添加对应属性。就可以实现对象创建；</p></li><li><p>bean标签的常用属性；</p><p>a——id 属性：对象的唯一标识（不能有特殊符号</p><p>b——class属性创建对象的一个类全路径（包类路径：包名.类名）</p><p>c——name属性：功能与id属性类似，现已不经常使用（可以有特殊符号’</p><p>==d——创建对象的时候，默认调用无参构造方法创建对象；==</p></li></ul><h3 id="B-基于xml配置文件注入属性"><a href="#B-基于xml配置文件注入属性" class="headerlink" title="B.基于xml配置文件注入属性"></a>B.基于xml配置文件注入属性</h3><ul><li><p><code>DI：依赖注入，也就是注入属性，在对象已创建的基础之上完成</code></p><h4 id="（一）、set-方法注入属性值"><a href="#（一）、set-方法注入属性值" class="headerlink" title="（一）、set()方法注入属性值"></a>（一）、set()方法注入属性值</h4><p>==此时！需要无参构造方法==</p><p>==类中没有构造方法，系统会默认创建一个无参构造方法==</p><p>==而如果类中有一个有参构造方法，此时系统就不会自动创建无参构造方法==</p><ol><li><h5 id="在类中创建属性，并创建对应属性的set-方法"><a href="#在类中创建属性，并创建对应属性的set-方法" class="headerlink" title="在类中创建属性，并创建对应属性的set()方法"></a>在类中创建属性，并创建对应属性的set()方法</h5><pre><code class="java">public class User &#123;    private String name;    private String tel;    public void setName(String name) &#123;        this.name = name;    &#125;    public void setTel(String tel) &#123;        this.tel = tel;    &#125;        @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, tel=&#39;&quot; + tel + &#39;\&#39;&#39; +                &#39;&#125;&#39;;</code></pre></li><li><h5 id="修改Spring的xml配置文件，配置对象创建及属性注入"><a href="#修改Spring的xml配置文件，配置对象创建及属性注入" class="headerlink" title="修改Spring的xml配置文件，配置对象创建及属性注入"></a>修改Spring的xml配置文件，配置对象创建及属性注入</h5><pre><code class="xml">&lt;!--配置User对象创建--&gt;&lt;bean id = &quot;user&quot; class = &quot;wzh.Spring5.User&quot;&gt;    &lt;!--使用property标签完成属性注入        name属性：类里面的属性名称        value属性：属性的值    --&gt;    &lt;property name=&quot;name&quot; value=&quot;james lee&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><pre><code class="java">//使用一个demo验证//testDemo.java@Test    public void testAdd() &#123;        //1.加载Spring的配置文件        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);        //2.获取创建的配置文件，利用xml配置文件完成对象创建及属性注入        User user = context.getBean(&quot;user&quot;, User.class );        //3.做输出        System.out.println(user);        //4.调用对象拥有的方法        System.out.println(user.toString());    &#125;</code></pre></li><li><h5 id="p名称空间注入（了解）"><a href="#p名称空间注入（了解）" class="headerlink" title="p名称空间注入（了解）"></a>p名称空间注入（了解）</h5><p><code>简化上述xml配置方法，进行属性注入</code></p><ul><li>在xml文件头部beans标签后面添加p名称空间</li></ul><pre><code class="xml">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</code></pre><ul><li>操作bean标签，进行属性注入</li></ul><pre><code class="xml">&lt;bean id=&quot;user&quot; class=&quot;wzh.Spring5.User&quot; p:name=&quot;wzh&quot; p:tel=&quot;666666&quot;&gt;    &lt;/bean&gt;</code></pre></li><li><h5 id="注入空值-null-：使用标签"><a href="#注入空值-null-：使用标签" class="headerlink" title="注入空值 (null)：使用标签"></a>注入空值 (null)：使用<null>标签</h5><pre><code class="xml">&lt;!--给tel属性注入空值null--&gt;&lt;property name=&quot;name&quot;&gt;    &lt;null/&gt;&lt;/property&gt;</code></pre></li><li><h5 id="包含特殊符号的属性值：CDATA标签"><a href="#包含特殊符号的属性值：CDATA标签" class="headerlink" title="包含特殊符号的属性值：CDATA标签"></a>包含特殊符号的属性值：CDATA标签</h5><pre><code class="xml">&lt;!--注入包含特殊符号的属性值1. 对特殊符号进行转义2. 利用&lt;![CDATA[……]]&gt;标签，在省略号位置加入想要使用的特殊符号--&gt;&lt;property name=&quot;book&quot;&gt;            &lt;value&gt;                &lt;![CDATA[《活着》]]&gt;            &lt;/value&gt;        &lt;/property&gt;</code></pre></li><li><h5 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性-外部bean"></a>注入属性-外部bean</h5><p>(1) 创建两个对象类：service类和dao类</p><p>(2) 在service类中调用dao类中的方法</p><pre><code class="java">//DaoService类package wzh.Spring5.service;import wzh.Spring5.dao.UserDao;public class UserService &#123;//创建UserDao属性类型，生成set()方法    private UserDao userDao;    public void setUserDao(UserDao userDao) &#123;        this.userDao = userDao;    &#125;    public void add()&#123;        System.out.println(&quot;Service add~~~&quot;);        userDao.update();    &#125;&#125;//UserDaoImpl类package wzh.Spring5.dao;public class UserDaoImpl implements UserDao&#123;    @Override    public void update()&#123;        System.out.println(&quot;dao update~~~&quot;);    &#125;&#125;//UserDao接口package wzh.Spring5.dao;public interface UserDao &#123;    public void update();&#125;</code></pre><p>(3)在Spring配置文件中进行配置</p><pre><code class="xml">    &lt;!-- service和dao的对象进行创建--&gt;    &lt;bean id=&quot;UserService&quot; class=&quot;wzh.Spring5.service.UserService&quot;&gt;        &lt;!--注入userDao对象           name 是属性名称           ref 是创建对象对应bean标签的id值        --&gt;        &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;    &lt;/bean&gt;    &lt;bean id=&quot;userDao&quot; class=&quot;wzh.Spring5.dao.UserDaoImpl&quot;/&gt;</code></pre><p>实现了给对象注入其他的类</p></li><li><h5 id="注入属性—内部bean和级联赋值"><a href="#注入属性—内部bean和级联赋值" class="headerlink" title="注入属性—内部bean和级联赋值"></a>注入属性—内部bean和级联赋值</h5><p>在实体类中表示一对多的关系</p></li></ol><h3 id="（二）、有参构造方法注入属性值"><a href="#（二）、有参构造方法注入属性值" class="headerlink" title="（二）、有参构造方法注入属性值"></a>（二）、有参构造方法注入属性值</h3><p>==此时不需要无参构造方法==</p><h5 id="1-在类中创建属性，并创建对应属性的有参构造方法"><a href="#1-在类中创建属性，并创建对应属性的有参构造方法" class="headerlink" title="1.在类中创建属性，并创建对应属性的有参构造方法"></a>1.在类中创建属性，并创建对应属性的有参构造方法</h5><pre><code class="java">public class User &#123;    private String name;    private String tel;    public User(String name, String tel) &#123;        this.name = name;        this.tel = tel;    &#125;    public void add() &#123;        System.out.println(&quot;add~~~~&quot;);    &#125;</code></pre><h5 id="2-利用有参构造方法注入属性"><a href="#2-利用有参构造方法注入属性" class="headerlink" title="2.利用有参构造方法注入属性"></a>2.利用有参构造方法注入属性</h5><pre><code class="xml">&lt;!--利用有参构造方法实现User对象的创建,并注入属性--&gt;    &lt;bean id=&quot;user&quot; class=&quot;wzh.Spring5.User&quot;&gt;        &lt;!--使用constructor-arg标签完成属性注入        name属性：类里面的属性名称        value属性：属性的值        index属性：索引，代表对象中的第几个参数，0代表第一个，1代表第二个以此类推    --&gt;        &lt;constructor-arg name=&quot;name&quot; value=&quot;james lee&quot;/&gt;        &lt;constructor-arg name=&quot;tel&quot; value=&quot;12138&quot;/&gt;                &lt;!--        &lt;constructor-arg index=&quot;0&quot; value=&quot;james lee&quot;/&gt;        &lt;constructor-arg index=&quot;1&quot; value=&quot;12138&quot;/&gt;    --&gt;    &lt;/bean&gt;</code></pre><p>同样可以利用testDemo进行验证</p></li></ul><h3 id="C-基于xml配置文件实现自动装配"><a href="#C-基于xml配置文件实现自动装配" class="headerlink" title="C. 基于xml配置文件实现自动装配"></a>C. 基于xml配置文件实现自动装配</h3><p>==在实际使用中一般使用注解的方式做到，但利用xml也可以做到==</p><ol><li><h5 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h5></li></ol><ul><li>根据指定的装配规则（属性名称或属性类型），Spring自动将匹配的属性值注入</li></ul><ol start="2"><li>演示自动装配的实现</li></ol><pre><code class="xml">&lt;!--自动装配bean标签的属性 autowira，可以配置自动装配autowira有常用的两个值    byName：根据属性名注入。要求bean的id的值和类属性名称一致，如下；            private Dep depment;            &lt;bean id=&quot;depment&quot; class=&quot;wzh.Spring5.bean.Dep&quot;/&gt;    byType：根据属性类型注入            private Dep depment;            &lt;bean id=&quot;dep&quot; class=&quot;wzh.Spring5.bean.Dep&quot;/&gt;            根据类型注入相同类型的bean不能定义多个，否则会报错--&gt;&lt;bean id=&quot;emp&quot; class=&quot;wzh.Spring5.bean.Emp&quot; autowire=&quot;byType&quot;&gt;    &lt;!--手动装配    &lt;property name=&quot;depment&quot; ref=&quot;dep&quot;/&gt;    --&gt;&lt;/bean&gt;&lt;bean id=&quot;dep&quot; class=&quot;wzh.Spring5.bean.Dep&quot;/&gt;</code></pre><h3 id="D-基于xml配置文件实现引入外部文件进行属性注入"><a href="#D-基于xml配置文件实现引入外部文件进行属性注入" class="headerlink" title="D.基于xml配置文件实现引入外部文件进行属性注入"></a>D.基于xml配置文件实现引入外部文件进行属性注入</h3><ol><li><h5 id="直接配置数据库信息"><a href="#直接配置数据库信息" class="headerlink" title="直接配置数据库信息"></a>直接配置数据库信息</h5></li></ol><ul><li>配置德鲁伊连接池</li><li>引入德鲁伊连接池的jar包（依赖）<a href="https://repo1.maven.org/maven2/com/alibaba/druid/">德鲁伊连接池jar下载</a></li></ul><pre><code class="xml">&lt;!--直接配置连接池--&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/users?characterEncoding=UTF-8&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;666666&quot;/&gt;&lt;/bean&gt;</code></pre><ol start="2"><li><h5 id="引入外部文件配置数据库连接池"><a href="#引入外部文件配置数据库连接池" class="headerlink" title="引入外部文件配置数据库连接池"></a>引入外部文件配置数据库连接池</h5></li></ol><ul><li>创建外部属性文件，即properties格式文件，存储数据库信息</li></ul><pre><code class="properties">#等号左侧的内容可以随便写，最好不写某一个单词，以防止冲突prop.driverClass =com.mysql.jdbc.Driverprop.url = jdbc:mysql://localhost:3306/users?characterEncoding=UTF-8prop.name=rootprop.password=666666</code></pre><ul><li>将properties格式文件引入Spring配置文件中</li></ul><pre><code class="xml">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</code></pre><ul><li>在Spring配置文件中使用 ==context:property-placeholder== 标签引入外部属性文件</li></ul><pre><code class="xml">&lt;!--入外部属性文件--&gt;&lt;context:property-placeholder location=&quot;classpath:JDBC.properties&quot;/&gt;&lt;!--配置连接池--&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;prop.driverClass&#125;&quot;/&gt;    &lt;property name=&quot;url&quot; value=&quot;$&#123;prop.url&#125;&quot;/&gt;    &lt;property name=&quot;username&quot; value=&quot;$&#123;prop.name&#125;&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;$&#123;prop.password&#125;&quot;/&gt;&lt;/bean&gt;</code></pre><h3 id="A-基于注解的方式实现对象创建"><a href="#A-基于注解的方式实现对象创建" class="headerlink" title="A.基于注解的方式实现对象创建"></a>A.基于注解的方式实现对象创建</h3><ol><li><h5 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h5></li></ol><ul><li>注解是代码的特殊标记</li><li>==格式：@ + 注解名称 (属性名称  = 属性值，属性名称 = 属性值……)==</li><li>注解可以作用在方法、类或者属性上面</li><li>注解目的：简化xml配置，以更简洁的方式展现</li></ul><ol start="2"><li><h5 id="Spring针对Bean管理中创建对象提供的注解"><a href="#Spring针对Bean管理中创建对象提供的注解" class="headerlink" title="Spring针对Bean管理中创建对象提供的注解"></a>Spring针对Bean管理中创建对象提供的注解</h5></li></ol><ul><li><p>@Component：是一种普通的组件，对象普通创建</p></li><li><p>@Service：一般用在业务逻辑或者Service层上</p></li><li><p>@Controller：一般用在WEB层上</p></li><li><p>@Repository：一般用在DAO层或者</p></li><li><p>没有要求一定那个注解用在那一层</p></li></ul><p>==上面的四个注解功能是一样的的，都可以用来创建Bean实例==</p><ol start="3"><li><h5 id="实际操作基于注解的方式实现对象创建"><a href="#实际操作基于注解的方式实现对象创建" class="headerlink" title="实际操作基于注解的方式实现对象创建"></a>实际操作基于注解的方式实现对象创建</h5></li></ol><ul><li>第一步：  引入依赖（jar包）spring-aop-5.2.3.RELEASE.jar</li><li>第二步：在配置文件中，开启组件扫描</li></ul><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;    &lt;!--一、导入名称空间context--&gt;        &lt;!--二、开启组件扫描    1. 如果扫描多个包，多个包之间使用逗号隔开    2. 如果扫描多个包，可以扫描上层目录    --&gt;    &lt;context:component-scan base-package=&quot;wzh.Spring5&quot;&gt;&lt;/context:component-scan&gt;&lt;/beans&gt;</code></pre><ul><li>第三步：创建对象类，并加上创建对象注解</li></ul><pre><code class="java">//在注解中value属性值可以省略不写//默认的value值是首字母小写后的类名称@Component(value = &quot;user&quot;)//类似于bean标签下的id属性public class User &#123;    public void add() &#123;        System.out.println(&quot;add~~~~&quot;);    &#125;&#125;</code></pre><ol start="4"><li><h5 id="开启组件扫描的细节问题"><a href="#开启组件扫描的细节问题" class="headerlink" title="开启组件扫描的细节问题"></a>开启组件扫描的细节问题</h5></li></ol><ul><li>定义到包中==扫描哪些文件==</li></ul><pre><code class="xml">    &lt;!-- use-default-filters=&quot;false&quot; 表示现在不使用默认的filter，而使用自己接下里设置的filter    type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Component&quot;    这里的内容表示到wzh.Spring5包里只扫描带Component注解的类    --&gt;    &lt;context:component-scan base-package=&quot;wzh.Spring5&quot; use-default-filters=&quot;false&quot;&gt;        &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Component&quot;/&gt;    &lt;/context:component-scan&gt;</code></pre><ul><li>定义包中的那些==文件不扫描，其他的全都扫描==</li></ul><pre><code class="xml">&lt;!-- use-default-filters=&quot;false&quot; 表示现在不使用默认的filter，而使用自己接下里设置的filter    type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Component&quot;    这里的内容表示到wzh.Spring5包里不扫描带Component注解的类，其他的全都扫描    --&gt;    &lt;context:component-scan base-package=&quot;wzh.Spring5&quot; use-default-filters=&quot;false&quot;&gt;        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Component&quot;/&gt;    &lt;/context:component-scan&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> myBlog </category>
          
          <category> JAVA 框架 </category>
          
          <category> Spring 5 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX for beginner</title>
      <link href="/2021/11/28/AJXA%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/28/AJXA%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：原生AJAX"><a href="#第一章：原生AJAX" class="headerlink" title="第一章：原生AJAX"></a>第一章：原生AJAX</h3><h4 id="1-1-AJAX简介"><a href="#1-1-AJAX简介" class="headerlink" title="1.1  AJAX简介"></a>1.1  AJAX简介</h4><ul><li>全称为Asynchronous Javascript And XML（异步JavaScript和XML）</li><li>不刷新页面的条件下，向服务端发送请求，即<code>无刷新获取数据</code> 也是AJAX最大的优势！</li><li>AJAX不是一门编程语言，而是一种将现有标准组合在一起使用的新方式。</li></ul><h5 id="AJAX优点"><a href="#AJAX优点" class="headerlink" title="AJAX优点"></a>AJAX优点</h5><ul><li>可以不刷新页面与服务器进行通信</li><li>允许根据用户事件来更新部分页面内容</li><li>AJAX获得的数据被JS动态创建之后，这部分可以展示在网页，但信息不能被爬虫爬取</li></ul><h5 id="AJAX缺点"><a href="#AJAX缺点" class="headerlink" title="AJAX缺点"></a>AJAX缺点</h5><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题（同源）</li></ul><h4 id="1-2-XML简介"><a href="#1-2-XML简介" class="headerlink" title="1.2 XML简介"></a>1.2 XML简介</h4><ul><li>XML：可扩展标记语言，被设计用来传输和存储数据，而HTML被设计用来呈现数据。</li><li>开始时AJAX就是使用XML格式进行数据交换，但<code>现已被JSON替换</code></li></ul><h4 id="1-3-node-js的安装"><a href="#1-3-node-js的安装" class="headerlink" title="1.3 node.js的安装"></a>1.3 node.js的安装</h4><p>​        <a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">2020 node.js的安装教程</a></p><h4 id="1-4-AJAX发送GET请求"><a href="#1-4-AJAX发送GET请求" class="headerlink" title="1.4 AJAX发送GET请求"></a>1.4 AJAX发送GET请求</h4><h5 id="1、AJAX的使用步骤："><a href="#1、AJAX的使用步骤：" class="headerlink" title="1、AJAX的使用步骤："></a>1、AJAX的使用步骤：</h5><ol><li>创建异步对象，即XMLHttpRequest对象；</li><li>初始化，指定请求方法和请求url；</li><li>发送请求；</li><li>绑定onreadystatechange事件；</li><li>确定服务器返回了所有对象后，处理返回结果；</li></ol><h5 id="2、jsp页面代码"><a href="#2、jsp页面代码" class="headerlink" title="2、jsp页面代码"></a>2、jsp页面代码</h5><ul><li>这里需要注意js文件的引入方式 src=”${pageContext.request.contextPath}/js/weather.js” </li><li>防止出现路径问题</li></ul><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%--src=&quot;$&#123;pageContext.request.contextPath&#125;/js/weather.js&quot;--%&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.request.contextPath&#125;/js/weather.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;AJAX GET请求&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;text&quot; id=&quot;search&quot; name=&quot;search&quot; placeholder=&quot;请输入要查询的内容&quot;&gt;&lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;查询&quot; onclick=&quot;Check()&quot;&gt;&lt;br&gt;&lt;div  id=&quot;result&quot; &gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="3、js内容"><a href="#3、js内容" class="headerlink" title="3、js内容"></a>3、js内容</h5><ul><li><p>请求URL的填写：</p><blockquote><p>“ / + 项目发布名 + / servlet映射名称 ” </p></blockquote></li><li><p>GET请求参数设置：</p><blockquote><p>在URL后用？分割然后加上要提交的变量和变量值</p></blockquote></li></ul><pre><code class="js">function Check() &#123;    // alert(&quot;hello&quot;)    const result = document.getElementById(&quot;result&quot;);    //1.创建XHR对象    const xhr = new XMLHttpRequest();    //2.初始化，设定请求方法和请求url    xhr.open(&quot;GET&quot;, &quot;/test/server?search=hh&quot;);    //3.发送    xhr.send();    //4.绑定事件，处理返回的结果    xhr.onreadystatechange = function () &#123;        // 判断服务端返回了所有数据        if (xhr.readyState === 4) &#123;            // 判断返回响应是否成功            if (xhr.status === 200) &#123;                // 结果处理                result.innerHTML = xhr.response;            &#125;        &#125;    &#125;&#125;</code></pre><h5 id="4、servlet的配置"><a href="#4、servlet的配置" class="headerlink" title="4、servlet的配置"></a>4、servlet的配置</h5><p>（这里制定了路径，所以不用配置xml配置文件</p><pre><code class="java">@WebServlet(&quot;/server&quot;)public class searchServlet extends HttpServlet &#123;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        String search = request.getParameter(&quot;search&quot;);        System.out.println(search + &quot;:发来一条get请求&quot;);        response.setContentType(&quot;text/html;charset=utf-8&quot;);        response.getWriter().write(&quot;get请求已收到&quot;);    &#125;&#125;</code></pre><h6 id="WebServlet的属性列表"><a href="#WebServlet的属性列表" class="headerlink" title="@WebServlet的属性列表"></a>@WebServlet的属性列表</h6><p>​        <img src="https://raw.githubusercontent.com/TOLIE-OFFICIAL/Pics/main/imges/%40WebServlet%E7%9A%84%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8.png" style="zoom:95%;" /></p><h4 id="1-5-AJAX发送POST请求"><a href="#1-5-AJAX发送POST请求" class="headerlink" title="1.5 AJAX发送POST请求"></a>1.5 AJAX发送POST请求</h4><h5 id="1、js内容"><a href="#1、js内容" class="headerlink" title="1、js内容"></a>1、js内容</h5><ul><li>参数设置：</li></ul><p>1.语法上参数设置比较的随意，只需要服务器端可以解析，就可以；<br>2.send(“a=100&amp;b=100&amp;c=100&amp;d=100”)或者send(“hquwuifahfhoihqi”)都可以传入服务器端<br>3.甚至可以自定义请求头的key和value（需要后端进行适配，否则会报错</p><pre><code class="js">function post() &#123;    // alert(&quot;hello&quot;)    const result = document.getElementById(&quot;result&quot;)    //1.创建XHR对象    const xhr = new XMLHttpRequest();    //2.初始化，设定请求方法    xhr.open(&quot;POST&quot;, &quot;/test/server&quot;);    //3.发送    xhr.send();    //xhr.send(&quot;a=100&amp;b=100&amp;c=100&amp;d=100&quot;);    //xhr.send(&quot;hquwuifahfhoihqi&quot;);        //4.绑定事件，处理返回的结果    xhr.onreadystatechange = function () &#123;        // 判断服务端返回了所有数据        if (xhr.readyState === 4) &#123;            // 判断返回响应是否成功            if (xhr.status === 200) &#123;                // 结果处理                result.innerHTML = xhr.response;            &#125;        &#125;    &#125;&#125;</code></pre><h5 id="2、servlet的配置（这里制定了路径，所以不用配置xml配置文件"><a href="#2、servlet的配置（这里制定了路径，所以不用配置xml配置文件" class="headerlink" title="2、servlet的配置（这里制定了路径，所以不用配置xml配置文件"></a>2、servlet的配置（这里制定了路径，所以不用配置xml配置文件</h5><pre><code class="java">@WebServlet(&quot;/server&quot;)public class searchServlet extends HttpServlet &#123;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        System.out.println(&quot;发来一条POST请求&quot;);        response.setContentType(&quot;text/html;charset=utf-8&quot;);        response.getWriter().write(&quot;POST请求已收到&quot;);    &#125;&#125;</code></pre><h4 id="1-6-AJAX设置请求头信息"><a href="#1-6-AJAX设置请求头信息" class="headerlink" title="1.6  AJAX设置请求头信息"></a>1.6  AJAX设置请求头信息</h4><h5 id="1、HTTP请求头信息格式"><a href="#1、HTTP请求头信息格式" class="headerlink" title="1、HTTP请求头信息格式"></a>1、HTTP请求头信息格式</h5><pre><code class="KEY：VALUE">KEY：VALUE</code></pre><p>比如：<br>Contente-length:接下来的主体长度<br>Contente-type:接下来的主体类型</p><pre><code class="js">// 设置请求头xhr.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)//这样就可解析 &quot;a=100&amp;b=100&amp;c=100&amp;d=100&quot; 的格式数据</code></pre><h4 id="1-7-Servlet返回json类型的数据"><a href="#1-7-Servlet返回json类型的数据" class="headerlink" title="1.7 Servlet返回json类型的数据"></a>1.7 Servlet返回json类型的数据</h4><pre><code class="java">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        //指定返回的格式为JSON格式        response.setCharacterEncoding(&quot;utf-8&quot;);        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;application/json; charset=utf-8&quot;);        //拼接json数据        String jsonStr = &quot;&#123;\&quot;name\&quot;:\&quot;&quot;+&quot;TOLIE&quot;+&quot;\&quot;,\&quot;age\&quot;:\&quot;20\&quot;&#125;&quot;;        //将数据写入流中        response.getWriter().write(jsonStr);    &#125;&#125;</code></pre><h4 id="1-8-AJAX处理接收到的json类型返回结果"><a href="#1-8-AJAX处理接收到的json类型返回结果" class="headerlink" title="1.8 AJAX处理接收到的json类型返回结果"></a>1.8 AJAX处理接收到的json类型返回结果</h4><h5 id="1、手动对json数据转化"><a href="#1、手动对json数据转化" class="headerlink" title="1、手动对json数据转化"></a>1、手动对json数据转化</h5><pre><code class="js">function get() &#123;    // 建立div对象    const result = document.getElementById(&quot;result&quot;)    //1.创建XHR对象    const xhr = new XMLHttpRequest();    //2.初始化，设定请求方法    xhr.open(&quot;GET&quot;, &quot;/test/server&quot;);    //3.发送    xhr.send();    //4.绑定事件，处理返回的结果    xhr.onreadystatechange = function () &#123;        // 判断服务端返回了所有数据        if (xhr.readyState === 4) &#123;            // 判断返回响应是否成功            if (xhr.status === 200) &#123;                // 5.结果处理                                //手动对json数据转化                let data = JSON.parse(xhr.response);                console.log(xhr.response);                result.innerHTML = data.name;                            &#125;        &#125;    &#125;&#125;</code></pre><h5 id="2、自动对json数据转化"><a href="#2、自动对json数据转化" class="headerlink" title="2、自动对json数据转化"></a>2、自动对json数据转化</h5><pre><code class="js">function get() &#123;    // alert(&quot;hello&quot;)    const result = document.getElementById(&quot;result&quot;)    //1.创建XHR对象    const xhr = new XMLHttpRequest();        // 设定响应体数据的一个类型    xhr.responseType = &quot;json&quot;;        //2.初始化，设定请求方法    xhr.open(&quot;GET&quot;, &quot;/test/server&quot;);    //3.发送    xhr.send();    //4.绑定事件，处理返回的结果    xhr.onreadystatechange = function () &#123;        // 判断服务端返回了所有数据        if (xhr.readyState === 4) &#123;            // 判断返回响应是否成功            if (xhr.status === 200) &#123;                // 结果处理                                //自动对json数据转化                result.innerHTML = xhr.response.age;            &#125;        &#125;    &#125;&#125;</code></pre><h4 id="1-9-AJAX的IE缓存问题"><a href="#1-9-AJAX的IE缓存问题" class="headerlink" title="1.9 AJAX的IE缓存问题"></a>1.9 AJAX的IE缓存问题</h4><h5 id="1、IE缓存"><a href="#1、IE缓存" class="headerlink" title="1、IE缓存"></a>1、IE缓存</h5><p>在ajax的应用中，当用户访问一次后，再进行访问当XMLHttpRequest请求不变的时，在ie中获取数据不会到服务器端取，而是直接从ie的缓存中取，这会就是ie的缓存问题。==IE缓存可能会导致一些时效性很强的请求不能正常获取最新数据==。</p><h5 id="2、解决方案：添加时间戳"><a href="#2、解决方案：添加时间戳" class="headerlink" title="2、解决方案：添加时间戳"></a>2、解决方案：添加时间戳</h5><pre><code class="js">    //2.初始化，设定请求方法    xhr.open(&quot;GET&quot;, &quot;/test/server?t=&quot;+Date.now());</code></pre><p>Date.now()就是获取一个当前时间，让每一次请求都不相同，避免不能正常获取最新数据。</p><h4 id="1-10-AJAX的网略请求超时和网络异常处理"><a href="#1-10-AJAX的网略请求超时和网络异常处理" class="headerlink" title="1.10 AJAX的网略请求超时和网络异常处理"></a>1.10 AJAX的网略请求超时和网络异常处理</h4><h5 id="1、主要目的"><a href="#1、主要目的" class="headerlink" title="1、主要目的"></a>1、主要目的</h5><p>让用户在网络请求超时或者网络异常的时候可以收到提醒，避免长时间无响应，优化使用体验。</p><h5 id="2、处理方式"><a href="#2、处理方式" class="headerlink" title="2、处理方式"></a>2、处理方式</h5><ul><li>网络请求超时处理</li></ul><pre><code class="js">//设置超时2s，即超过两秒没有收到回应，就取消请求xhr.timeout = 2000;//设置超时事件之后的方法xhr.ontimeout = funcation()&#123;    //比如可以是弹窗等等显示或操作    alert(&quot;请求超时，请稍后重试！&quot;);&#125;</code></pre><ul><li>网络异常处理</li></ul><pre><code class="js">//设置网络异常事件之后的方法xhr.error = funcation()&#123;    //比如可以是弹窗等等显示或操作    alert(&quot;网络异常，请检查你的网络！&quot;);&#125;</code></pre><h4 id="1-11-取消AJAX请求"><a href="#1-11-取消AJAX请求" class="headerlink" title="1.11 取消AJAX请求"></a>1.11 取消AJAX请求</h4><h5 id="1、js的ES6规范中let和const"><a href="#1、js的ES6规范中let和const" class="headerlink" title="1、js的ES6规范中let和const"></a>1、js的ES6规范中let和const</h5><p><code>let 声明的变量只在 let 命令所在的代码块 &#123;&#125; 内有效，在 &#123;&#125; 之外不能访问。</code></p><p><code>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</code></p><h5 id="2、-取消AJAX请求"><a href="#2、-取消AJAX请求" class="headerlink" title="2、 取消AJAX请求"></a>2、 取消AJAX请求</h5><p>调用XMLHttpRequest对象的abort()方法，即可完成请求的取消；</p><pre><code class="js">    //获取所有的button对象    const btns = document.querySelectorAll(&quot;button&quot;);        //通过let新建一个变量x    let x = null;        //给第一个button绑定事件    btns[0].onclick = function () &#123;        x = new XMLHttpRequest();        x.open(&quot;GET&quot;,&quot;/test/server&quot;)        x.send();    &#125;    //给第二个button绑定事件    btns[1].onclick = function () &#123;        x = new XMLHttpRequest();        //取消请求        x.abort();    &#125;</code></pre><h4 id="1-12-处理用户重复发送请求"><a href="#1-12-处理用户重复发送请求" class="headerlink" title="1.12 处理用户重复发送请求"></a>1.12 处理用户重复发送请求</h4><h6 id="1、目的"><a href="#1、目的" class="headerlink" title="1、目的"></a>1、目的</h6><p>防止服务器收到高频率的相同请求，导致服务器不能及时响应，影响服务器性能</p><h6 id="2、处理"><a href="#2、处理" class="headerlink" title="2、处理"></a>2、处理</h6><p>选择在用户第二次触发事件的时候，将上一个相同请求取消掉</p><pre><code class="js">//通过let新建一个变量xlet x = null;//设置一个标识变量，帮助判断请求是否正在发送let isSending = false;//获取所有的button对象const btns = document.querySelectorAll(&quot;button&quot;);btns[0].onclick = function () &#123;    //如果请求正在发送，就取消请求    if (isSending) &#123;        x.abort();    &#125;    //如果没有请求正在发送，就取消请求    x = new XMLHttpRequest();    //c请求正在发送，更改标识变量    isSending = true;    x.open(&quot;GET&quot;, &quot;/test/server&quot;)    x.send();    x.onreadystatechange = function () &#123;        if (x.readyState === 4) &#123;            //请求发送结束，更改标识变量            isSending = false;        &#125;    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> myBlog </category>
          
          <category> Front End </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML for beginner</title>
      <link href="/2021/11/27/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/27/HTML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-HTML概述"><a href="#第一章-HTML概述" class="headerlink" title="第一章  HTML概述"></a>第一章  HTML概述</h2><h3 id="一、什么是HTML"><a href="#一、什么是HTML" class="headerlink" title="一、什么是HTML"></a>一、什么是HTML</h3><p>HTML是一种超文本标记语言，由大量的标记组成，每一个标签都有开始标签和结束标签，标签也可以设置各自的属性。</p><p>超文本包括流媒体，图片、视频等。</p><h3 id="二、HTML是谁制定的"><a href="#二、HTML是谁制定的" class="headerlink" title="二、HTML是谁制定的"></a>二、HTML是谁制定的</h3><p>W3C ：世界万维网联盟</p><p>W3C 制定HTML的规范，每个浏览器厂家遵守这一规范。</p><p>HTML规范最新的是HTML 5.0，简称H5。</p><h2 id="第二章-HTML基础"><a href="#第二章-HTML基础" class="headerlink" title="第二章 HTML基础"></a>第二章 HTML基础</h2><h3 id="第一个HTML页面"><a href="#第一个HTML页面" class="headerlink" title="第一个HTML页面"></a>第一个HTML页面</h3><pre><code class="html">&lt;!--在HTML文件第一行加上这一行代码就表示用的是HTML 5.0版本去掉就表示HTML 4.0版本--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;!--        指定浏览器的解码方式，为&quot;utf-8&quot;        并不是设置当前页面的字符编码方式        --&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;第一个HTML页面&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        TOLIE你的未来有无限可能！    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="HTML基本标签"><a href="#HTML基本标签" class="headerlink" title="HTML基本标签 *"></a>HTML基本标签 *</h3><p>1、段落</p><pre><code class="html">&lt;p&gt;   &lt;/p&gt;</code></pre><p>2、标题字</p><p>从h1-h6代表标题字，序号越小字体越大。</p><pre><code class="html">&lt;h1&gt; H1&lt;/h1&gt;&lt;h2&gt; H2&lt;/h2&gt;&lt;h3&gt; H3&lt;/h3&gt;&lt;h4&gt; H4&lt;/h4&gt;&lt;h5&gt; H5&lt;/h5&gt;&lt;h6&gt; H6&lt;/h6&gt;</code></pre><p>3、换行</p><p>是一个独目标记</p><pre><code class="html">&lt;br&gt;</code></pre><p>4、水平线</p><p>是一个独目标记</p><pre><code class="html">&lt;hr&gt;</code></pre><p>5、预留格式</p><p>两个标签之间是什么格式，就在网页上展示什么格式，不做改变。</p><pre><code class="html">    &lt;pre&gt;金樽清酒斗十千，玉盘珍羞直万钱。停杯投箸不能食，拔剑四顾心茫然。欲渡黄河冰塞川，将登太行雪满山。闲来垂钓碧溪上，忽复乘舟梦日边。行路难，行路难，多歧路，今安在？长风破浪会有时，直挂云帆济沧海。    &lt;/pre&gt;</code></pre><p>6、粗体字、斜体字、插入字、删除字</p><pre><code class="html">    &lt;!--粗体字---&gt;    &lt;b&gt;TOLIE你的未来有无限可能！&lt;/b&gt;    &lt;!--插入字---&gt;    &lt;ins&gt;插入字&lt;/ins&gt;    &lt;!--斜体字---&gt;    &lt;i&gt;斜体字&lt;/i&gt;    &lt;!--删除字---&gt;    &lt;del&gt;删除字&lt;/del&gt;</code></pre><p>7、右上角加字、右下角加字</p><pre><code class="html">    &lt;!--显示为10的2次方---&gt;    10&lt;sup&gt;2&lt;/sup&gt;    &lt;!--显示为X的下标n---&gt;    X&lt;sub&gt;n&lt;/sub&gt;</code></pre><p>8、font标签</p><p>一个字体标签</p><pre><code class="html">     &lt;!--size和color是字体的属性，表示字号和颜色---&gt;       &lt;font size = &quot;10&quot; color = &quot;blue&quot;&gt;NEUQ&lt;/font&gt;</code></pre><h3 id="HTML实体符号"><a href="#HTML实体符号" class="headerlink" title="HTML实体符号"></a>HTML实体符号</h3><pre><code class="html">    &lt;!-- “&amp;lt;” 是小于号---&gt;    a&amp;lt;b    &lt;!-- “&amp;gt;” 是大于号---&gt;    b&amp;gt;c    &lt;!-- “&amp;nbsp;” 是空格---&gt;    abc&amp;nbsp;&amp;nbsp;&amp;nbsp;efg</code></pre><h3 id="HTML的表格"><a href="#HTML的表格" class="headerlink" title="HTML的表格 *"></a>HTML的表格 *</h3><h4 id="基本表格"><a href="#基本表格" class="headerlink" title="基本表格"></a>基本表格</h4><p>1、table标签表示一个表格<br>2、th标签也是一个单元格标签，一般用于表头，自带有加粗，居中效果<br>3、tr标签表示表格的一行<br>4、td标签表示表格中一个单元格</p><ul><li>border=”1px”表示边框为1像素</li><li>align=”center”表示位置居中，也可以设置为居左居右</li><li>width = “40%”表示内容占整个窗口的百分之几，<code>可以随着窗口的变化变化大小</code></li></ul><pre><code class="html">    &lt;!--    1、table标签表示一个表格     2、th标签也是一个单元格标签，一般用于表头，自带有加粗，居中效果    3、tr标签表示一行    4、td标签表示一个单元格    --&gt;    &lt;!--一个3*3的表格 --&gt;    &lt;table border=&quot;1&quot; width = &quot;40%&quot;&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;序号&lt;/td&gt;            &lt;td&gt;姓名&lt;/td&gt;            &lt;td&gt;班级&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;TOLIE&lt;/td&gt;            &lt;td&gt;信管1901&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;James&lt;/td&gt;            &lt;td&gt;信管1903&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;</code></pre><h4 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并 *"></a>单元格合并 *</h4><p><code>不能跨格合并</code></p><p>row合并：一般把下侧单元格删掉，在上方单元格td标签中添加一个 rowspan 属性，属性值为几就合并几个单元格</p><pre><code class="html">    &lt;!--一个3*3的表格 --&gt;    &lt;table border=&quot;1&quot; width = &quot;40%&quot;&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;序号&lt;/td&gt;            &lt;td&gt;姓名&lt;/td&gt;            &lt;td&gt;班级&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;TOLIE&lt;/td&gt;            &lt;td rowspan=&quot;2&quot;&gt;信管1903&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;James&lt;/td&gt;        &lt;!-- &lt;td&gt;信管1903&lt;/td&gt; --&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;</code></pre><p>col合并：删除左右的的单元格皆可，在单元格td标签中添加一个colspan 属性，属性值为几就合并几个单元格</p><pre><code class="html">    &lt;!--一个3*3的表格 --&gt;    &lt;table border=&quot;1&quot; width=&quot;40%&quot;&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;序号&lt;/td&gt;            &lt;td&gt;姓名&lt;/td&gt;            &lt;td&gt;班级&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;!-- &lt;td&gt;TOLIE&lt;/td&gt; --&gt;            &lt;td colspan=&quot;2&quot;&gt;信管1903&lt;/td&gt;        &lt;/tr&gt;        &lt;tr align=&quot;center&quot;&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;James&lt;/td&gt;            &lt;td&gt;信管1903&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;</code></pre><h4 id="thead-tbody-tfoot标签"><a href="#thead-tbody-tfoot标签" class="headerlink" title="thead. tbody. tfoot标签"></a>thead. tbody. tfoot标签</h4><p>将表格分为三个部分：头、身体和脚</p><p>不是必须的，但可以方便后期的JS代码编写。</p><p><code>注意拆分之后可能会影响单元格的合并，导致单元格合并失败</code></p><pre><code class="html">    &lt;!--一个3*3的表格 --&gt;    &lt;table border=&quot;1&quot; width=&quot;40%&quot;&gt;        &lt;thead&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;td&gt;序号&lt;/td&gt;                &lt;td&gt;姓名&lt;/td&gt;                &lt;td&gt;班级&lt;/td&gt;            &lt;/tr&gt;        &lt;/thead&gt;        &lt;tbody&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;td&gt;1&lt;/td&gt;                &lt;!-- &lt;td&gt;TOLIE&lt;/td&gt; --&gt;                &lt;td colspan=&quot;2&quot;&gt;信管1903&lt;/td&gt;            &lt;/tr&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;td&gt;2&lt;/td&gt;                &lt;td&gt;James&lt;/td&gt;                &lt;td&gt;信管1903&lt;/td&gt;            &lt;/tr&gt;        &lt;/tbody&gt;        &lt;tfoot&gt;        &lt;/tfoot&gt;    &lt;/table&gt;</code></pre><h3 id="HTML背景"><a href="#HTML背景" class="headerlink" title="HTML背景"></a>HTML背景</h3><pre><code class="html">    &lt;!--    1.bgcolor 属性表示背景颜色，值为背景颜色的名称    2.background 属性表示背景图片，值为背景图片的路径    --&gt;    &lt;body bgcolor=&quot;blue&quot; background=&quot;web/img/cake-1.jpg&quot;&gt;&lt;/body&gt;</code></pre><h3 id="HTML的图片"><a href="#HTML的图片" class="headerlink" title="HTML的图片"></a>HTML的图片</h3><ol><li>设置图片高度和宽度的时候，只设置宽度，高度会等比例缩放；</li><li>img 标签就是图片标签；</li><li>src 属性的属性值是图片所在的路径；</li><li>tittle 属性值在<code>鼠标悬停</code>时显示的信息；</li><li>alt 属性设置在<code>图片找不到的时候</code>显示的内容；、</li></ol><h3 id="HTML超链接"><a href="#HTML超链接" class="headerlink" title="HTML超链接"></a>HTML超链接</h3><p>特点： 1. 超链接下面有下划线；</p><p>​            2.点击之后可以跳转页面；</p><p>​            3.鼠标放在上面会变成小手；</p><pre><code class="html">    //文本超链接    &lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;    //图片超链接    &lt;a href=&quot;http://www.baidu.com&quot;&gt;      &lt;img src=&quot;web/img/cake-2.jpg&quot;&gt;    &lt;/a&gt;    //点击超链接之后在本页面实现跳转    &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_self&quot;&gt;百度&lt;/a&gt;    //点击超链接之后在新页面实现跳转    &lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_self&quot;&gt;百度&lt;/a&gt;</code></pre><p>herf：是热引用，属性值一定是一个资源的地址，比如”<a href="https://www.bilibili.com&quot;/">https://www.bilibili.com&quot;</a></p><p>a 标签的target属性的可取值有</p><ol><li>_self ：在本窗口实现跳转</li><li>_blank：在新窗口实现跳转</li><li>_top：在顶级窗口实现跳转</li><li>_parent：在父窗口实现跳转</li></ol><h3 id="有序列表和无序列表"><a href="#有序列表和无序列表" class="headerlink" title="有序列表和无序列表"></a>有序列表和无序列表</h3><ul><li>有序列表</li></ul><p>​    标签：ol （ordered list）属性有个type用于指定序号的形式，可以是数字、大写英文、小写英文等；</p><p>​    表项：li</p><ul><li>有序列表</li></ul><p>​    标签：ul （unordered list）属性有个type用于指定序号的形式，可以是圆圈，方块或者点；</p><p>​    表项：li</p><pre><code class="html">    &lt;!-- 有序列表 --&gt;    &lt;ol type=&quot;1&quot;&gt;      &lt;li&gt;水果        &lt;ol type=&quot;a&quot;&gt;          &lt;li&gt;苹果&lt;/li&gt;          &lt;li&gt;西瓜&lt;/li&gt;        &lt;/ol&gt;      &lt;/li&gt;      &lt;li&gt;蔬菜&lt;/li&gt;      &lt;li&gt;甜点&lt;/li&gt;    &lt;/ol&gt;    &lt;!-- 无序列表 --&gt;    &lt;ul type=&quot;circle&quot;&gt;      &lt;li&gt;beijing        &lt;ul type=&quot;disc&quot;&gt;          &lt;li&gt;e&lt;/li&gt;          &lt;li&gt;w&lt;/li&gt;          &lt;li&gt;s&lt;/li&gt;          &lt;li&gt;n&lt;/li&gt;        &lt;/ul&gt;      &lt;/li&gt;    &lt;/ul&gt;</code></pre><h3 id="HTML中的id和name"><a href="#HTML中的id和name" class="headerlink" title="HTML中的id和name"></a>HTML中的id和name</h3><ol><li>在html文档中，任何元素/节点都有唯一的id，id是节点的唯一标识，在同一个html文档中id值不能重复</li><li>id可以帮助我们确定唯一的节点</li><li>html文档是一棵树（DOM树），树上有很多节点，每个节点都有着唯一的id。而js就是对这个树上的节点进行增删改查等操作的。</li></ol><h3 id="HTML中的div和span"><a href="#HTML中的div和span" class="headerlink" title="HTML中的div和span"></a>HTML中的div和span</h3><ul><li><p>div是块级元素，span是内联元素</p></li><li><p>是什么？什么div和span都可以称为“图层”；</p><ul><li>图层的作用是保证页面可以灵活布局，现在最流行的就是使用div进行布局；</li><li>图层可以是一个一个的盒子，盒子套盒子就是div套div；</li><li>div和span的定位可以通过左上角的x轴，y轴坐标来确定；</li></ul></li><li><p>作用：布局，方便布局；</p></li><li><p>div和span的区别：默认情况下div会独占一行，而span不会；</p></li></ul><h2 id="HTML的form表单"><a href="#HTML的form表单" class="headerlink" title="HTML的form表单 *"></a>HTML的form表单 *</h2><h3 id="标签：form"><a href="#标签：form" class="headerlink" title="标签：form"></a>标签：form</h3><p>作用：收集用户信息，用户填写好之后，提交服务器做后续处理；</p><ol><li>action 属性值为提交表单的服务器路径/地址；</li><li>method 属性值为提交表单的方法；</li><li>id 属性值用于唯一标识表单，可以理解为 ；</li><li>class 属性值用于标识变量，但不能唯一标识，可以理解为民族；</li></ol><pre><code class="html">&lt;form method=&quot;post&quot; action=&quot;login.do&quot; class=&quot;login&quot; id=&quot;lg&quot;&gt;            &lt;input type=&quot;text&quot; placeholder=&quot;用户名&quot; id=&quot;username1&quot; name=&quot;username1&quot;&gt;            &lt;input type=&quot;password&quot; placeholder=&quot;密码&quot; id=&quot;password1&quot; name=&quot;password1&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;登 录&quot; class=&quot;btn&quot; id=&quot;login&quot; onclick=&quot;Log()&quot;&gt;        &lt;/form&gt;</code></pre><h3 id="标签：input"><a href="#标签：input" class="headerlink" title="标签：input  **"></a>标签：input  **</h3><ul><li>readonly，只读，用户不能更改，<code>但可以提交到服务器</code>；</li><li>disabled，只读，用户不能选中更不能此 input 标签的value，<code>且不能提交服务器</code>；</li><li>maxlength，可以用来<code>控制输入的字符数量</code>，属性值为几就能输入几个字符</li><li>type 属性值可以有多种，具体内容如下表所示！！</li></ul><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">button</td><td align="left">定义可点击按钮（多数情况下，用于通过 JavaScript 启动脚本）。</td></tr><tr><td align="left">checkbox *</td><td align="left">定义复选框。</td></tr><tr><td align="left">file *</td><td align="left">定义输入字段和 “浏览”按钮，供文件上传。</td></tr><tr><td align="left">hidden **</td><td align="left">定义隐藏的输入字段，这部分内容网页不展示，但可以正常提交。</td></tr><tr><td align="left">image</td><td align="left">定义图像形式的提交按钮。</td></tr><tr><td align="left">password *</td><td align="left">定义密码字段。该字段中的字符被掩码。</td></tr><tr><td align="left">radio *</td><td align="left">定义单选按钮。</td></tr><tr><td align="left">reset</td><td align="left">定义重置按钮。重置按钮会清除表单中的所有数据。</td></tr><tr><td align="left">submit *</td><td align="left">定义提交按钮。提交按钮会把表单数据发送到服务器。</td></tr><tr><td align="left">text *</td><td align="left">定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符</td></tr></tbody></table><ul><li><p>placeholder 属性提供可描述输入字段预期值的<code>提示信息</code>（hint）；</p><p>该提示会在输入字段为空时显示，并会在字段获得焦点时消失；</p><p>适用于以下 text, search, url, telephone, email 以及 password 的  input  类型；</p></li><li><p>name  input没有name属性就不会提交  input 内的数据；</p></li></ul><p><code>填写了表单项 input 的name属性一律会提交给服务器，没有name属性就不会提交</code></p><h3 id="标签：select"><a href="#标签：select" class="headerlink" title="标签：select *"></a>标签：select *</h3><ul><li><p>multiple用来设置允许多选，设置多选之后可以按住ctrl进行多选；</p></li><li><p>size 用来指示展示几项选项；</p></li></ul><pre><code class="html">    &lt;select name=&quot;degree&quot; multiple size=&quot;2&quot;&gt;        &lt;!-- selected表示默认选择 --&gt;        &lt;option value=&quot;dz&quot; selected&gt;大专&lt;/option&gt;        &lt;option value=&quot;bk&quot;&gt;本科&lt;/option&gt;        &lt;option value=&quot;ss&quot;&gt;硕士&lt;/option&gt;        &lt;option value=&quot;bs&quot;&gt;博士&lt;/option&gt;    &lt;/select&gt;</code></pre><h3 id="第一个form表单"><a href="#第一个form表单" class="headerlink" title="第一个form表单 *"></a>第一个form表单 *</h3><p>注意：</p><ul><li>选择按钮的value必须手动指定；</li><li>文本域没有value属性，用户填写的内容就是value；</li><li>单选内容一般设置每个 input  的name相同，只提交一个内容，保证单选；</li><li>确认密码的时候记住不设置name属性值，阻止提交；</li><li>提交格式不管是什么方式都是 <code>name=value&amp;name=value&amp;name=value&amp;name=value</code></li></ul><pre><code class="html">    &lt;form method=&quot;GET&quot; action=&quot;login.do&quot; class=&quot;regist&quot; id=&quot;lg&quot;&gt;        &lt;!-- method属性是指定提交方式        默认方式，也就是GET方式会把数据展示在地址栏上        POST方式不会把数据展示在地址栏--&gt;        &lt;table border=&quot;1px&quot;&gt;            &lt;tr&gt;                &lt;td align=&quot;center&quot;&gt;用户名&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;text&quot; placeholder=&quot;用户名&quot; id=&quot;username1&quot; name=&quot;username1&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td align=&quot;center&quot;&gt;密&amp;nbsp;&amp;nbsp;&amp;nbsp;码&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;password&quot; placeholder=&quot;密码&quot; id=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td align=&quot;center&quot;&gt;确认密码&lt;/td&gt;                &lt;td&gt;&lt;input type=&quot;password&quot; placeholder=&quot;确认密码&quot;&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;!-- 选择按钮的value必须手动指定 --&gt;                &lt;td align=&quot;center&quot;&gt;性&amp;nbsp;&amp;nbsp;&amp;nbsp;别&lt;/td&gt;                &lt;td&gt;                    &lt;!-- checked表示默认选择 --&gt;                    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;1&quot; checked&gt;男                    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;0&quot;&gt;女                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;!-- 选择按钮的value必须手动指定 --&gt;                &lt;td&gt;爱&amp;nbsp;&amp;nbsp;&amp;nbsp;好&lt;/td&gt;                &lt;td&gt;                    &lt;!-- checked表示默认选择 --&gt;                    &lt;input type=&quot;checkbox&quot; name=&quot;interest&quot; value=&quot;0&quot; checked&gt;读书                    &lt;input type=&quot;checkbox&quot; name=&quot;interest&quot; value=&quot;1&quot;&gt;喝酒                    &lt;input type=&quot;checkbox&quot; name=&quot;interest&quot; value=&quot;2&quot;&gt;烫头                    &lt;input type=&quot;checkbox&quot; name=&quot;interest&quot; value=&quot;3&quot;&gt;保健                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;!-- 选择按钮的value必须手动指定 --&gt;                &lt;td&gt;学&amp;nbsp;&amp;nbsp;&amp;nbsp;历&lt;/td&gt;                &lt;td&gt;                    &lt;select name=&quot;degree&quot;&gt;                        &lt;!-- selected表示默认选择 --&gt;                        &lt;option value=&quot;dz&quot; selected&gt;大专&lt;/option&gt;                        &lt;option value=&quot;bk&quot;&gt;本科&lt;/option&gt;                        &lt;option value=&quot;ss&quot;&gt;硕士&lt;/option&gt;                        &lt;option value=&quot;bs&quot;&gt;博士&lt;/option&gt;                    &lt;/select&gt;                &lt;/td&gt;            &lt;/tr&gt;            &lt;tr align=&quot;center&quot;&gt;                &lt;!-- 选择按钮的value必须手动指定 --&gt;                &lt;td&gt;个人介绍&lt;/td&gt;                &lt;td&gt;                    &lt;!-- 文本域没有value属性，用户填写的内容就是value --&gt;                    &lt;textarea name=&quot;selfjs&quot; role=&quot;20&quot; rows=&quot;2&quot;&gt;&lt;/textarea&gt;                &lt;/td&gt;            &lt;/tr&gt;                    &lt;/table&gt;    &lt;/form&gt;    &lt;input type=&quot;reset&quot; value=&quot;重 置&quot;&gt;    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    &lt;input type=&quot;submit&quot; value=&quot;登 录&quot; class=&quot;btn&quot; id=&quot;regist&quot;&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> myBlog </category>
          
          <category> Front End </category>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/27/hello-world/"/>
      <url>/2021/11/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
